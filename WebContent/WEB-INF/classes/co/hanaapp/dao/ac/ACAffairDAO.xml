<?xml version="1.0" encoding="utf-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<!-- TABLE NAME : TB_AC_AFFAIR_MST : 사건마스터, TB_AC_AFFAIR_DTL: 사건디테일 -->
<mapper namespace="co.hanaapp.dao.ac.ACAffairDAO">

 <!-- 
 
    주의) null 값이 있는 항목은 무조건 nvl(항목, ' ') 처리 해야한다.
    mybatis 3 버젼부터 null 이면 result의 map에 해당 항목 자체가 없으므로 반드시 nvl 처리 해야함!@@@@@
    
    공백은 heweb에서 공백만 있을경우 "" 처리 함
 
  --> 
 
 
 
   <!-- 사건 리스트 팝업 -->
    <select id="selectAffairPopTree" parameterType="map" resultType ="map">
      SELECT /* 사건 팝업 리스트 */
              NVL(A.BRCH_ID,' ') AS  BRCH_ID,
              NVL(A.AFF_SEQ,'-99999') AS  AFF_SEQ,
              NVL(A.CLT_NM,' ') AS  CLT_NM,
              NVL(TO_CHAR(A.AFF_ST_DT,'YYYYMMDD'),' ') AS AFF_ST_DT ,
              NVL(TO_CHAR(NVL(A.AFF_ETC_ED_DT, A.AFF_ED_DT),'YYYYMMDD'),' ') AS AFF_ED_DT ,
              NVL(CASE 
                   WHEN NVL(B.TEL_OPN_YN, 'Y') = 'Y' THEN NVL(A.TUB_NM,' ')
                   ELSE '비공개'
              END ,' ') AS  TUB_NM,
              NVL(A.SIN_NM,' ') AS  SIN_NM,
              NVL(A.CHG_NM,' ') AS  CHG_NM,
              
              NVL(CASE 
                   WHEN NVL(B.TEL_OPN_YN, 'Y') = 'Y' THEN B.CHG_TEL
                   ELSE '개인의뢰'
              END ,' ') AS  CHG_TEL,
              NVL(CASE 
                   WHEN NVL(B.TEL_OPN_YN, 'Y') = 'Y' THEN B.CHG_HP
                   ELSE '개인의뢰'
              END ,' ') AS  CHG_HP,
              NVL(CASE 
                   WHEN NVL(B.TEL_OPN_YN, 'Y') = 'Y' THEN B.CHG_FAX
                   ELSE '개인의뢰'
              END ,' ') AS  CHG_FAX                                               
        FROM TB_AC_AFFAIR_MST A, TB_CC_TIEUPCHG_LST B
       WHERE A.BRCH_ID = B.BRCH_ID(+)
         AND A.TUB_SEQ = B.TUB_SEQ(+)
         AND A.CHG_SEQ = B.CHG_SEQ(+)
         AND A.BRCH_ID =  #{S_BRCH_ID, jdbcType=VARCHAR}
         AND (A.TUB_SEQ LIKE  #{S_CLT_NM, jdbcType=VARCHAR} || '%' 
                OR A.TUB_NM LIKE '%' || #{S_CLT_NM, jdbcType=VARCHAR} || '%' 
                OR A.CHG_NM LIKE '%' || #{S_CLT_NM, jdbcType=VARCHAR} || '%' 
                OR A.CLT_NM LIKE  '%' || #{S_CLT_NM, jdbcType=VARCHAR} || '%'
                OR A.CLT_JMN LIKE '%' || #{S_CLT_NM, jdbcType=VARCHAR} || '%'
                OR A.CLT_TEL LIKE '%' || #{S_CLT_NM, jdbcType=VARCHAR} || '%'
                OR A.HNA_CHG_USR_NM  LIKE  #{S_CLT_NM, jdbcType=VARCHAR} || '%'
                OR A.TUB_TEL LIKE '%' || #{S_CLT_NM, jdbcType=VARCHAR} || '%'
                OR A.TUB_FAX LIKE '%' || #{S_CLT_NM, jdbcType=VARCHAR} || '%'
                OR A.AFF_SEQ LIKE  #{S_CLT_NM, jdbcType=VARCHAR} || '%'
               )
       ORDER BY AFF_ST_DT DESC

    </select>
 
 
    <!-- 사건 리스트 진행중 전체  -->
    <select id="selectAffairPopIng" parameterType="map" resultType ="map">
      SELECT /* 진행중 팝업 리스트 */
              NVL(A.BRCH_ID,' ') AS  BRCH_ID,
              NVL(A.AFF_SEQ,'-99999') AS  AFF_SEQ,
              NVL(A.CLT_NM,' ') AS  CLT_NM,
              NVL(TO_CHAR(A.AFF_ST_DT,'YYYYMMDD'),' ') AS AFF_ST_DT ,
              NVL(TO_CHAR(NVL(A.AFF_ETC_ED_DT, A.AFF_ED_DT),'YYYYMMDD'),' ') AS AFF_ED_DT ,
              NVL(CASE 
                   WHEN NVL(B.TEL_OPN_YN, 'Y') = 'Y' THEN NVL(A.TUB_NM,' ')
                   ELSE '비공개'
              END ,' ') AS  TUB_NM,
              NVL(A.SIN_NM,' ') AS  SIN_NM,
              NVL(A.CHG_NM,' ') AS  CHG_NM,
              
              NVL(CASE 
                   WHEN NVL(B.TEL_OPN_YN, 'Y') = 'Y' THEN B.CHG_TEL
                   ELSE '개인의뢰'
              END ,' ') AS  CHG_TEL,
              NVL(CASE 
                   WHEN NVL(B.TEL_OPN_YN, 'Y') = 'Y' THEN B.CHG_HP
                   ELSE '개인의뢰'
              END ,' ') AS  CHG_HP,
              NVL(CASE 
                   WHEN NVL(B.TEL_OPN_YN, 'Y') = 'Y' THEN B.CHG_FAX
                   ELSE '개인의뢰'
              END ,' ') AS  CHG_FAX                                               
        FROM TB_AC_AFFAIR_MST A, TB_CC_TIEUPCHG_LST B
       WHERE A.BRCH_ID = B.BRCH_ID(+)
         AND A.TUB_SEQ = B.TUB_SEQ(+)
         AND A.CHG_SEQ = B.CHG_SEQ(+)
         AND NVL(A.AFF_PRS_STS, '10') = '10' 
         AND A.BRCH_ID =  #{S_BRCH_ID, jdbcType=VARCHAR}
    ORDER BY A.AFF_ST_DT DESC
    </select>
 
 
 
    <!-- 사건 리스트 내사건 -->
    <select id="selectAffairPopMy" parameterType="map" resultType ="map">
      SELECT /* 내사건 팝업 리스트 */
              NVL(A.BRCH_ID,' ') AS  BRCH_ID,
              NVL(A.AFF_SEQ,'-99999') AS  AFF_SEQ,
              NVL(A.CLT_NM,' ') AS  CLT_NM,
              NVL(TO_CHAR(A.AFF_ST_DT,'YYYYMMDD'),' ') AS AFF_ST_DT ,
              NVL(TO_CHAR(NVL(A.AFF_ETC_ED_DT, A.AFF_ED_DT),'YYYYMMDD'),' ') AS AFF_ED_DT ,
              NVL(CASE 
                   WHEN NVL(B.TEL_OPN_YN, 'Y') = 'Y' THEN NVL(A.TUB_NM,' ')
                   ELSE '비공개'
              END ,' ') AS  TUB_NM,
              NVL(A.SIN_NM,' ') AS  SIN_NM,
              NVL(A.CHG_NM,' ') AS  CHG_NM,
              
              NVL(CASE 
                   WHEN NVL(B.TEL_OPN_YN, 'Y') = 'Y' THEN B.CHG_TEL
                   ELSE '개인의뢰'
              END ,' ') AS  CHG_TEL,
              NVL(CASE 
                   WHEN NVL(B.TEL_OPN_YN, 'Y') = 'Y' THEN B.CHG_HP
                   ELSE '개인의뢰'
              END ,' ') AS  CHG_HP,
              NVL(CASE 
                   WHEN NVL(B.TEL_OPN_YN, 'Y') = 'Y' THEN B.CHG_FAX
                   ELSE '개인의뢰'
              END ,' ') AS  CHG_FAX                                               
        FROM TB_AC_AFFAIR_MST A, TB_CC_TIEUPCHG_LST B
       WHERE A.BRCH_ID = B.BRCH_ID(+)
         AND A.TUB_SEQ = B.TUB_SEQ(+)
         AND A.CHG_SEQ = B.CHG_SEQ(+)
         AND A.HNA_CHG_USR = #{OPERATOR, jdbcType=VARCHAR}
         AND NVL(A.AFF_PRS_STS, '10') = '10' 
         AND A.BRCH_ID =  #{S_BRCH_ID, jdbcType=VARCHAR}
         AND (A.TUB_SEQ LIKE  #{S_CLT_NM, jdbcType=VARCHAR} || '%' 
                OR A.TUB_NM LIKE '%' || #{S_CLT_NM, jdbcType=VARCHAR} || '%' 
                OR A.CHG_NM LIKE '%' || #{S_CLT_NM, jdbcType=VARCHAR} || '%' 
                OR A.CLT_NM LIKE  '%' || #{S_CLT_NM, jdbcType=VARCHAR} || '%'
                OR A.CLT_JMN LIKE '%' || #{S_CLT_NM, jdbcType=VARCHAR} || '%'
                OR A.CLT_TEL LIKE '%' || #{S_CLT_NM, jdbcType=VARCHAR} || '%'
                OR A.HNA_CHG_USR_NM  LIKE  #{S_CLT_NM, jdbcType=VARCHAR} || '%'
                OR A.TUB_TEL LIKE '%' || #{S_CLT_NM, jdbcType=VARCHAR} || '%'
                OR A.TUB_FAX LIKE '%' || #{S_CLT_NM, jdbcType=VARCHAR} || '%'
                OR A.AFF_SEQ LIKE  #{S_CLT_NM, jdbcType=VARCHAR} || '%'
               )
       ORDER BY A.AFF_ST_DT DESC

    </select>
 
 
 
    <!-- 사건 리스트 우리팀 -->
    <select id="selectAffairPopTeam" parameterType="map" resultType ="map">
      SELECT /* 팀사건 팝업 리스트 */
              NVL(A.BRCH_ID,' ') AS  BRCH_ID,
              NVL(A.AFF_SEQ,'-99999') AS  AFF_SEQ,
              NVL(A.CLT_NM,' ') AS  CLT_NM,
              NVL(TO_CHAR(A.AFF_ST_DT,'YYYYMMDD'),' ') AS AFF_ST_DT ,
              NVL(TO_CHAR(NVL(A.AFF_ETC_ED_DT, A.AFF_ED_DT),'YYYYMMDD'),' ') AS AFF_ED_DT ,
              NVL(CASE 
                   WHEN NVL(B.TEL_OPN_YN, 'Y') = 'Y' THEN NVL(A.TUB_NM,' ')
                   ELSE '비공개'
              END ,' ') AS  TUB_NM,
              NVL(A.SIN_NM,' ') AS  SIN_NM,
              NVL(A.CHG_NM,' ') AS  CHG_NM,
              
              NVL(CASE 
                   WHEN NVL(B.TEL_OPN_YN, 'Y') = 'Y' THEN B.CHG_TEL
                   ELSE '개인의뢰'
              END ,' ') AS  CHG_TEL,
              NVL(CASE 
                   WHEN NVL(B.TEL_OPN_YN, 'Y') = 'Y' THEN B.CHG_HP
                   ELSE '개인의뢰'
              END ,' ') AS  CHG_HP,
              NVL(CASE 
                   WHEN NVL(B.TEL_OPN_YN, 'Y') = 'Y' THEN B.CHG_FAX
                   ELSE '개인의뢰'
              END ,' ') AS  CHG_FAX                                               
        FROM TB_AC_AFFAIR_MST A, TB_CC_TIEUPCHG_LST B
       WHERE A.BRCH_ID = B.BRCH_ID(+)
         AND A.TUB_SEQ = B.TUB_SEQ(+)
         AND A.CHG_SEQ = B.CHG_SEQ(+)
         AND A.HNA_CHG_USR IN (SELECT USR_ID 
                                 FROM TB_CC_USER_LST
                                WHERE BRCH_ID =  #{S_BRCH_ID, jdbcType=VARCHAR}
                                  AND DEPT_CD = (SELECT DEPT_CD 
                                                   FROM TB_CC_USER_LST 
                                                  WHERE BRCH_ID = #{S_BRCH_ID, jdbcType=VARCHAR}
                                                    AND USR_ID =  #{OPERATOR, jdbcType=VARCHAR}
                                                 )
                              )
         AND NVL(A.AFF_PRS_STS, '10') = '10' 
         AND A.BRCH_ID =  #{S_BRCH_ID, jdbcType=VARCHAR}
         AND (A.TUB_SEQ LIKE  #{S_CLT_NM, jdbcType=VARCHAR} || '%' 
                OR A.TUB_NM LIKE '%' || #{S_CLT_NM, jdbcType=VARCHAR} || '%' 
                OR A.CHG_NM LIKE '%' || #{S_CLT_NM, jdbcType=VARCHAR} || '%' 
                OR A.CLT_NM LIKE  '%' || #{S_CLT_NM, jdbcType=VARCHAR} || '%'
                OR A.CLT_JMN LIKE '%' || #{S_CLT_NM, jdbcType=VARCHAR} || '%'
                OR A.CLT_TEL LIKE '%' || #{S_CLT_NM, jdbcType=VARCHAR} || '%'
                OR A.HNA_CHG_USR_NM  LIKE  #{S_CLT_NM, jdbcType=VARCHAR} || '%'
                OR A.TUB_TEL LIKE '%' || #{S_CLT_NM, jdbcType=VARCHAR} || '%'
                OR A.TUB_FAX LIKE '%' || #{S_CLT_NM, jdbcType=VARCHAR} || '%'
                OR A.AFF_SEQ LIKE  #{S_CLT_NM, jdbcType=VARCHAR} || '%'
               )
       ORDER BY A.AFF_ST_DT DESC

    </select>
 
 
   <!-- 사건 마스터 TREE  조회 -->
   
       <select id="selectAffairMstTree" parameterType="map" resultType ="map">
        SELECT /* 사건 마스터 TREE */
                NVL(A.BRCH_ID,' ') AS  BRCH_ID,
            NVL(A.AFF_SEQ,'-99999') AS  AFF_SEQ,
            NVL(TO_CHAR(A.AFF_ST_DT,'YYYYMMDD'),' ') AS AFF_ST_DT ,
            NVL(TO_CHAR(A.AFF_ED_DT,'YYYYMMDD'),' ') AS AFF_ED_DT ,
            NVL(TO_CHAR(A.AFF_ETC_ED_DT,'YYYYMMDD'),' ') AS AFF_ETC_ED_DT ,
            NVL(TO_CHAR(A.ASK_EXP_DT,'YYYYMMDD'),' ') AS ASK_EXP_DT ,
            NVL(A.CLT_NM,' ') AS  CLT_NM,
            NVL(A.CLT_TEL,' ') AS  CLT_TEL,
            NVL(A.CLT_JMN,' ') AS  CLT_JMN,
            NVL(FC_CC_GET_CODENAME('AD02',A.AFF_PRS_STS),' ') AS AFF_PRS_STS_NM                                                                         
          FROM TB_AC_AFFAIR_MST A
         WHERE A.BRCH_ID =  #{S_BRCH_ID, jdbcType=VARCHAR}
           AND (A.TUB_SEQ LIKE  #{S_TUB_NM, jdbcType=VARCHAR} || '%' 
                OR A.TUB_NM LIKE  #{S_TUB_NM, jdbcType=VARCHAR} || '%' 
                OR A.CHG_NM LIKE  #{S_TUB_NM, jdbcType=VARCHAR} || '%' 
                OR A.CLT_NM LIKE   #{S_TUB_NM, jdbcType=VARCHAR} || '%'
                OR A.CLT_JMN LIKE  #{S_TUB_NM, jdbcType=VARCHAR} || '%'
                OR A.CLT_TEL LIKE  #{S_TUB_NM, jdbcType=VARCHAR} || '%'
                OR A.HNA_CHG_USR_NM LIKE  #{S_TUB_NM, jdbcType=VARCHAR} || '%'
                OR A.TUB_TEL LIKE  #{S_TUB_NM, jdbcType=VARCHAR} || '%'
                OR A.TUB_FAX LIKE  #{S_TUB_NM, jdbcType=VARCHAR} || '%'
                OR A.AFF_SEQ LIKE  #{S_TUB_NM, jdbcType=VARCHAR} || '%'
               )
         ORDER BY AFF_ST_DT DESC

    </select>
   
   
    <!-- 
    <select id="selectAffairMstTree_old" parameterType="map" resultType ="map">
        SELECT /* 사건 마스터 TREE */
                NVL(A.BRCH_ID,' ') AS  BRCH_ID,
            NVL(A.AFF_SEQ,'-99999') AS  AFF_SEQ,
            NVL(TO_CHAR(A.AFF_ST_DT,'YYYYMMDD'),' ') AS AFF_ST_DT ,
            NVL(TO_CHAR(A.AFF_ED_DT,'YYYYMMDD'),' ') AS AFF_ED_DT ,
            NVL(TO_CHAR(A.AFF_ETC_ED_DT,'YYYYMMDD'),' ') AS AFF_ETC_ED_DT ,
            NVL(A.CLT_NM,' ') AS  CLT_NM,
            NVL(A.CLT_TEL,' ') AS  CLT_TEL,
            NVL(A.CLT_JMN,' ') AS  CLT_JMN                                                                         
          FROM TB_AC_AFFAIR_MST A, TB_CC_TIEUP_LST B
         WHERE A.TUB_SEQ = B.TUB_SEQ(+)
           AND A.BRCH_ID =  #{S_BRCH_ID, jdbcType=VARCHAR}
           AND A.TUB_SEQ like  #{TUb_SEQ, jdbcType=VARCHAR} || '%'
           AND (A.TUB_NM LIKE  #{S_TUB_NM, jdbcType=VARCHAR} || '%' 
                OR A.CHG_NM LIKE  #{S_TUB_NM, jdbcType=VARCHAR} || '%' 
                OR A.CLT_NM LIKE  #{S_TUB_NM, jdbcType=VARCHAR} || '%'
                OR A.CLT_JMN LIKE  #{S_TUB_NM, jdbcType=VARCHAR} || '%'
                OR A.CLT_TEL LIKE  #{S_TUB_NM, jdbcType=VARCHAR} || '%'
                OR A.HNA_CHG_USR_NM LIKE  #{S_TUB_NM, jdbcType=VARCHAR} || '%'
                OR A.TUB_TEL LIKE  #{S_TUB_NM, jdbcType=VARCHAR} || '%'
                OR A.TUB_FAX LIKE  #{S_TUB_NM, jdbcType=VARCHAR} || '%'
                OR B.RLT_NM LIKE  #{S_TUB_NM, jdbcType=VARCHAR} || '%'
                OR A.AFF_SEQ LIKE #{S_TUB_NM, jdbcType=VARCHAR} || '%'
               )
           AND A.AFF_ST_DT BETWEEN TO_DATE(NVL(#{S_ST_DT, jdbcType=VARCHAR},'19000101')) AND TO_DATE(NVL(#{S_ED_DT, jdbcType=VARCHAR},'29991231')) + 0.99999
           AND A.AFF_PRS_STS LIKE  #{S_AFF_PRS_STS, jdbcType=VARCHAR} || '%'
         ORDER BY nvl(A.AFF_SEQ,'-99999'), AFF_ST_DT

    </select>
     -->


   <!-- 사건 마스터 한건 조회 -->
    <select id="selectAffairMstOne" parameterType="map" resultType ="map">
        SELECT /* 사건 마스터 한건조회 */
                'N' AS FLAG,
                ROWIDTOCHAR(A.ROWID) AS ROW_ID,
                '0' AS CHK,
                #{OPERATOR, jdbcType=VARCHAR} AS OPERATOR,
            NVL(A.BRCH_ID,' ') AS  BRCH_ID,
            NVL(A.AFF_SEQ,'-99999') AS  AFF_SEQ,
            NVL(A.TUB_SEQ,'-99999') AS  TUB_SEQ,
            NVL(A.CHG_SEQ,'-99999') AS  CHG_SEQ,
            NVL(A.TUB_NM,' ') AS  TUB_NM,
            NVL(A.CHG_NM,' ') AS  CHG_NM,
            NVL(A.TUB_TEL,' ') AS  TUB_TEL,
            NVL(A.TUB_FAX,' ') AS  TUB_FAX,
            NVL(A.HNA_CHG_USR,' ') AS HNA_CHG_USR ,
            NVL(A.HNA_CHG_USR_NM,' ') AS  HNA_CHG_USR_NM,
            NVL(A.PRS_CHG_USR,' ') AS  PRS_CHG_USR,
            NVL(A.DOC_CRT_USR,' ') AS  DOC_CRT_USR,
            NVL(TO_CHAR(A.AFF_ST_DT,'YYYYMMDD'),' ') AS AFF_ST_DT ,
            NVL(TO_CHAR(A.AFF_ED_DT,'YYYYMMDD'),' ') AS AFF_ED_DT ,
            NVL(A.AFF_GBN,' ') AS AFF_GBN ,
            NVL(A.SMT_PLC,' ') AS SMT_PLC ,
            NVL(A.CLT_NM,' ') AS  CLT_NM,
            NVL(A.CLT_TEL,' ') AS  CLT_TEL,
            NVL(A.CLT_JMN,' ') AS  CLT_JMN,
            NVL(A.CLT_ADDR,' ') AS  CLT_ADDR,
            NVL(A.CLT_ZIP,' ') AS CLT_ZIP,
            NVL(A.DOC_CARY,' ') AS DOC_CARY ,
            NVL(A.AFF_PRS_STS,' ') AS AFF_PRS_STS ,
            NVL(FC_CC_GET_CODENAME('AD02',A.AFF_PRS_STS),' ') AS AFF_PRS_STS_NM,
            NVL(B.BIZ_FILE_SAVE_NM,' ') AS BIZ_FILE_SAVE_NM,
            ' ' AS AFF_EXP_DD,
            NVL(B.AFF_REG_NOTE,' ') AS AFF_REG_NOTE,
            NVL(B.AFF_PRS_NOTE,' ') AS AFF_PRS_NOTE,
            NVL(A.CHG_PRS_NOTE,' ') AS CHG_PRS_NOTE,
            NVL(TO_CHAR(NVL(A.AFF_ETC_ED_DT, A.AFF_ED_DT),'YYYYMMDD'), ' ') AS PRT_AFF_ED_DT,
            NVL(A.ADD_INF_GBN,' ') AS ADD_INF_GBN,
            NVL(A.BEF_CLT_NM,' ') AS BEF_CLT_NM,
            NVL(A.BEF_CLT_JMN,' ') AS BEF_CLT_JMN,
            NVL(TO_CHAR(A.ASK_EXP_DT,'YYYYMMDD'),' ') AS ASK_EXP_DT,
            NVL(B.CLT_OPN_YN,' ') AS CLT_OPN_YN,
            NVL(B.CLT_OPN_HP,' ') AS CLT_OPN_HP,
            NVL(B.SIN_GBN,' ') AS SIN_GBN,
            NVL(A.SIN_NM,' ') AS SIN_NM,
            nvl(B.BAG_AGC_AMT,'-99999') BAG_AGC_AMT,
            nvl(B.ETC_AGC_AMT,'-99999') ETC_AGC_AMT   
                                                                   
          FROM TB_AC_AFFAIR_MST A, TB_CC_TIEUP_LST B
         WHERE A.TUB_SEQ = B.TUB_SEQ(+)
           AND A.BRCH_ID =  #{S_BRCH_ID, jdbcType=VARCHAR}
           AND A.AFF_SEQ = #{S_AFF_SEQ, jdbcType=VARCHAR}

    </select>







   <!-- 사건 코드채 번 -->
    <select id="selectAffSeq" parameterType="map" resultType ="map">
       SELECT /* 사건번호 채번 */
              SQ_AC_AFFAIR_LST.NEXTVAL AS AFF_SEQ
         FROM DUAL              
    </select>



      <!-- 사건정보 추가/수정 -->
     <insert   id="saveAffairMst" parameterType="map" >

        begin
         UPDATE TB_AC_AFFAIR_MST
            SET        TUB_SEQ = #{TUB_SEQ, jdbcType=VARCHAR} , 
                CHG_SEQ = #{CHG_SEQ, jdbcType=VARCHAR} , 
                TUB_NM = #{TUB_NM, jdbcType=VARCHAR} , 
                CHG_NM = #{CHG_NM, jdbcType=VARCHAR} , 
                TUB_TEL = #{TUB_TEL, jdbcType=VARCHAR} , 
                TUB_FAX = #{TUB_FAX, jdbcType=VARCHAR} , 
                HNA_CHG_USR = #{HNA_CHG_USR, jdbcType=VARCHAR} , 
                HNA_CHG_USR_NM = #{HNA_CHG_USR_NM, jdbcType=VARCHAR} , 
                PRS_CHG_USR = #{PRS_CHG_USR, jdbcType=VARCHAR} , 
                DOC_CRT_USR = #{DOC_CRT_USR, jdbcType=VARCHAR} , 
                AFF_ST_DT = #{AFF_ST_DT, jdbcType=VARCHAR} ,
                AFF_ED_DT = #{AFF_ED_DT, jdbcType=VARCHAR} ,
                AFF_ETC_ED_DT = #{AFF_ETC_ED_DT, jdbcType=VARCHAR} ,
                AFF_GBN = #{AFF_GBN, jdbcType=VARCHAR} , 
                SMT_PLC = #{SMT_PLC, jdbcType=VARCHAR} ,
                CLT_NM = #{CLT_NM, jdbcType=VARCHAR} , 
                CLT_TEL = #{CLT_TEL, jdbcType=VARCHAR} , 
                CLT_JMN = #{CLT_JMN, jdbcType=VARCHAR} , 
                CLT_ADDR = #{CLT_ADDR, jdbcType=VARCHAR} , 
                CLT_ZIP = #{CLT_ZIP, jdbcType=VARCHAR} , 
                DOC_CARY = #{DOC_CARY, jdbcType=VARCHAR} , 
                AFF_PRS_STS = #{AFF_PRS_STS, jdbcType=VARCHAR} , 
                CHG_PRS_NOTE = #{CHG_PRS_NOTE, jdbcType=VARCHAR} ,    
                ADD_INF_GBN = #{ADD_INF_GBN, jdbcType=VARCHAR} , 
                BEF_CLT_NM = #{BEF_CLT_NM, jdbcType=VARCHAR} , 
                BEF_CLT_JMN = #{BEF_CLT_JMN, jdbcType=VARCHAR} ,  
                SIN_NM = #{SIN_NM, jdbcType=VARCHAR} ,  
                ASK_EXP_DT = CASE
                                  WHEN NVL(#{AFF_PRS_STS, jdbcType=VARCHAR}, '99') IN ('20','25')  AND #{AFF_ED_DT, jdbcType=VARCHAR} IS NOT NULL 
                                       THEN FC_CC_GET_ASKEXP_DATE(#{BRCH_ID, jdbcType=VARCHAR} , #{TUB_SEQ, jdbcType=VARCHAR}, #{AFF_ED_DT, jdbcType=VARCHAR}, 0)  -- 당일 포함 
                                  ELSE ASK_EXP_DT
                             END,
                EDT_USR = #{OPERATOR, jdbcType=VARCHAR} , 
                EDT_DT = SYSDATE  
            where rowid = chartorowid(#{ROW_ID, jdbcType=VARCHAR}); 
            
           
               if sql%rowcount=0 then
         INSERT INTO TB_AC_AFFAIR_MST
                 (
                  BRCH_ID , 
                  AFF_SEQ , 
                  TUB_SEQ , 
                  CHG_SEQ , 
                  TUB_NM , 
                  CHG_NM , 
                  TUB_TEL , 
                  TUB_FAX , 
                  HNA_CHG_USR , 
                  HNA_CHG_USR_NM,
                  PRS_CHG_USR , 
                  DOC_CRT_USR , 
                  AFF_ST_DT , 
                  AFF_ED_DT , 
                  AFF_ETC_ED_DT,
                  AFF_NO , 
                  AFF_GBN , 
                  SMT_PLC,
                  CLT_NM , 
                  CLT_TEL , 
                  CLT_JMN , 
                  CLT_ADDR , 
                  CLT_ZIP , 
                  DOC_CARY , 
                  AFF_PRS_STS , 
                  CHG_PRS_NOTE,
                  ADD_INF_GBN,
                  BEF_CLT_NM,
                  BEF_CLT_JMN,
                  SIN_NM,
                  CRT_USR , 
                  CRT_DT , 
                  EDT_USR , 
                  EDT_DT )
          VALUES (
                  #{BRCH_ID, jdbcType=VARCHAR} , 
                  #{AFF_SEQ, jdbcType=VARCHAR} , 
                  #{TUB_SEQ, jdbcType=VARCHAR} , 
                  #{CHG_SEQ, jdbcType=VARCHAR} , 
                  #{TUB_NM, jdbcType=VARCHAR} , 
                  #{CHG_NM, jdbcType=VARCHAR} , 
                  #{TUB_TEL, jdbcType=VARCHAR} , 
                  #{TUB_FAX, jdbcType=VARCHAR} , 
                  #{HNA_CHG_USR, jdbcType=VARCHAR} , 
                  #{HNA_CHG_USR_NM, jdbcType=VARCHAR} , 
                  #{PRS_CHG_USR, jdbcType=VARCHAR} , 
                  #{DOC_CRT_USR, jdbcType=VARCHAR} , 
                  #{AFF_ST_DT, jdbcType=VARCHAR} , 
                  NULL , 
                  NULL,
                  NULL , 
                  #{AFF_GBN, jdbcType=VARCHAR} , 
                  #{SMT_PLC, jdbcType=VARCHAR} , 
                  #{CLT_NM, jdbcType=VARCHAR} , 
                  #{CLT_TEL, jdbcType=VARCHAR} , 
                  #{CLT_JMN, jdbcType=VARCHAR} , 
                  #{CLT_ADDR, jdbcType=VARCHAR} , 
                  #{CLT_ZIP, jdbcType=VARCHAR} , 
                  #{DOC_CARY, jdbcType=VARCHAR} , 
                  '10' , 
                  #{CHG_PRS_NOTE, jdbcType=VARCHAR} ,
                  #{ADD_INF_GBN, jdbcType=VARCHAR} ,
                  #{BEF_CLT_NM, jdbcType=VARCHAR} ,
                  #{BEF_CLT_JMN, jdbcType=VARCHAR} ,
                  #{SIN_NM, jdbcType=VARCHAR} ,
                  #{OPERATOR, jdbcType=VARCHAR} , 
                  SYSDATE , 
                  #{OPERATOR, jdbcType=VARCHAR} , 
                  SYSDATE );
                  end if;
                  

            exception
                when others then
                    raise_application_error(-20501,'TB_AC_AFFAIR_MST save error : ' ||SQLERRM);
            end;
        
    </insert>
 
   <!-- 사건정보 삭제 -->
    <delete   id="deleteAffairMst" parameterType="map" >
          BEGIN
             
             DELETE FROM TB_AC_AFFAIRCHRG_LST A
              WHERE (BRCH_ID, AFF_SEQ) IN 
                 (SELECT BRCH_ID, AFF_SEQ 
                    FROM TB_AC_AFFAIR_MST
                   WHERE ROWID = chartorowid(#{ROW_ID, jdbcType=VARCHAR})   
                 );

             DELETE FROM TB_AC_AFFAIROUT_LST A
              WHERE (BRCH_ID, AFF_SEQ) IN 
                 (SELECT BRCH_ID, AFF_SEQ 
                    FROM TB_AC_AFFAIR_MST
                   WHERE ROWID = chartorowid(#{ROW_ID, jdbcType=VARCHAR})   
                 );                              

             DELETE FROM TB_AC_AFFAIRPRSNOTE_LST A
              WHERE (BRCH_ID, AFF_SEQ) IN 
                 (SELECT BRCH_ID, AFF_SEQ 
                    FROM TB_AC_AFFAIR_MST
                   WHERE ROWID = chartorowid(#{ROW_ID, jdbcType=VARCHAR})   
                 );   
             
             DELETE FROM TB_AC_AFFAIRPRS_LST A
              WHERE (BRCH_ID, AFF_SEQ) IN 
                 (SELECT BRCH_ID, AFF_SEQ 
                    FROM TB_AC_AFFAIR_MST
                   WHERE ROWID = chartorowid(#{ROW_ID, jdbcType=VARCHAR})   
                 );    
    
             
             DELETE FROM TB_AC_AFFAIR_DTL A
              WHERE (BRCH_ID, AFF_SEQ) IN 
                 (SELECT BRCH_ID, AFF_SEQ 
                    FROM TB_AC_AFFAIR_MST
                   WHERE ROWID = chartorowid(#{ROW_ID, jdbcType=VARCHAR})   
                 );

             DELETE FROM TB_AC_AFFAIR_MST
          WHERE ROWID = chartorowid(#{ROW_ID, jdbcType=VARCHAR});   
        exception
            when others then
                raise_application_error(-20501,'TB_AC_AFFAIR_MST save error : ' ||SQLERRM);
        end;  
   
    </delete>
 
 
       <!-- 사건정보 마감 -->
     <insert   id="closeAffairMst" parameterType="map" >

        DECLARE
            V_SIN_GBN VARCHAR2(4);
            V_SIN_NM  VARCHAR2(255);
            V_OCC_AMT NUMBER(10);
            V_ASK_SEQ NUMBER(15);
            
        begin
         
             -- 건별의 경우 비용청구까지 보낸다.
             BEGIN
                   SELECT SIN_GBN, 
                          SIN_NM,
                          B.OCC_AMT
                     INTO V_SIN_GBN,
                          V_SIN_NM,
                          V_OCC_AMT
                     FROM TB_CC_TIEUP_LST A, 
	                      (SELECT NVL(SUM(BNK_CHRG),0) + NVL(SUM(AGC_CHRG),0) AS OCC_AMT
	                         FROM TB_AC_AFFAIR_DTL
	                        WHERE BRCH_ID = #{BRCH_ID, jdbcType=VARCHAR} 
	                          AND AFF_SEQ = #{AFF_SEQ, jdbcType=VARCHAR} 
	                     ) B
                    WHERE A.BRCH_ID = #{BRCH_ID, jdbcType=VARCHAR} 
                      AND A.TUB_SEQ = #{TUB_SEQ, jdbcType=VARCHAR};
              exception
                 WHEN NO_DATA_FOUND THEN
                    V_SIN_GBN := NULL;
                    V_SIN_NM := NULL;
                    V_OCC_AMT := 0;
                 when others then
                     raise_application_error(-20501,'마감구분/발생금액 오류 save error : ' ||SQLERRM);
              end; 
              
              
            -- 바로 비용청구 
            IF V_SIN_GBN = 'CO' AND  #{AFF_PRS_STS, jdbcType=VARCHAR} = '20' THEN 
  
	            -- 건별 청구서 순번 채번
	            -- 주의 건별은 채번 방식이 틀리다 
	            BEGIN
	               SELECT /* 비용청구 채번 */
	                      #{S_TUB_SEQ, jdbcType=VARCHAR} || NVL(MAX(ASK_SEQ),0) + 1 AS ASK_SEQ
	                 INTO V_ASK_SEQ
	                 FROM TB_AC_TIEUPASK_MST
	                where BRCH_ID = #{BRCH_ID, jdbcType=VARCHAR} 
	                 AND TUB_SEQ = #{TUB_SEQ, jdbcType=VARCHAR};
	              exception
	                 when others then
	                     raise_application_error(-20501,'비용청구서 채번 오류 save error : ' ||SQLERRM);
	             end; 
  
            
		         -- 비용청구 마스터 
		         INSERT INTO TB_AC_TIEUPASK_MST
		                 (
		                  BRCH_ID , 
		                  TUB_SEQ ,
		                  ASK_SEQ, 
		                  ASK_DT , 
		                  TUB_NM , 
		                  SIN_NM , 
		                  BAS_ST_DT , 
		                  BAS_ED_DT , 
		                  UNP_AMT , 
		                  OCC_AMT , 
		                  VAT_AMT , 
		                  ASK_AMT , 
		                  NOTE , 
		                  HNA_CHG_USR,
		                  USE_YN,
		                  CRT_USR , 
		                  CRT_DT , 
		                  EDT_USR , 
		                  EDT_DT,
		                  SIN_GBN )
		          VALUES (
		                  #{BRCH_ID, jdbcType=VARCHAR} , 
		                  #{TUB_SEQ, jdbcType=VARCHAR} , 
		                  V_ASK_SEQ,
		                  #{AFF_ED_DT, jdbcType=VARCHAR} , 
		                  #{TUB_NM, jdbcType=VARCHAR} , 
		                  V_SIN_NM , 
		                  #{AFF_ST_DT, jdbcType=VARCHAR} , 
		                  #{AFF_ED_DT, jdbcType=VARCHAR} , 
		                  0,                               -- 건별은 미수금 관리 안함
		                  V_OCC_AMT , 
		                  0 ,                              -- 건별은 부가세 없음 
		                  V_OCC_AMT , 
		                  NULL , 
		                  #{HNA_CHG_USR, jdbcType=VARCHAR} , 
		                  'Y',
		                  #{OPERATOR, jdbcType=VARCHAR} , 
		                  SYSDATE , 
		                  #{OPERATOR, jdbcType=VARCHAR} , 
		                  SYSDATE,
		                  V_SIN_GBN );            
            

		         -- 비용청구 디테일 
		         INSERT INTO TB_AC_TIEUPASK_DTL
		                 (
		                  BRCH_ID , 
		                  TUB_SEQ ,
		                  ASK_SEQ, 
		                  AFF_SEQ , 
		                  CRT_USR , 
		                  CRT_DT , 
		                  EDT_USR , 
		                  EDT_DT )
		          VALUES (
		                  #{BRCH_ID, jdbcType=VARCHAR} , 
		                  #{TUB_SEQ, jdbcType=VARCHAR} ,
		                  V_ASK_SEQ ,  
		                  #{AFF_SEQ, jdbcType=VARCHAR} , 
		                  #{OPERATOR, jdbcType=VARCHAR} , 
		                  SYSDATE , 
		                  #{OPERATOR, jdbcType=VARCHAR} , 
		                  SYSDATE );
            
            
           
		         -- 관련 사건은 비용청구로 상태 변경          
		          UPDATE TB_AC_AFFAIR_MST
		             SET AFF_PRS_STS = '30' , 
		                EDT_USR = #{OPERATOR, jdbcType=VARCHAR} , 
		                EDT_DT = SYSDATE 
		          where BRCH_ID = #{BRCH_ID, jdbcType=VARCHAR} 
		            AND AFF_SEQ = #{AFF_SEQ, jdbcType=VARCHAR};           
           
           
           
            END IF;
         
         

            exception
                when others then
                    raise_application_error(-20501,'TB_AC_AFFAIR_MST close error : ' ||SQLERRM);
            end;
        
    </insert>
 
 
 
   <!-- 사건디테일에서 불필요 clear -->
    <delete   id="clearAffairDtl" parameterType="map" >
          BEGIN
             
             DELETE FROM TB_AC_AFFAIR_DTL A
              WHERE BRCH_ID = #{BRCH_ID, jdbcType=VARCHAR}
                AND AFF_SEQ = #{AFF_SEQ, jdbcType=VARCHAR}
                AND REQ_BND_SEQ IS NULL  -- 사건등록시 임시로 등록된 행을 지우는거  
                 ;
        exception
            when others then
                raise_application_error(-20501,'TB_AC_AFFAIR_DTL clear error : ' ||SQLERRM);
        end;  
   
    </delete> 
 
    
  <!-- 사건 디테일 한건  조회 -->
    <select id="selectAffairDtlOne" parameterType="map" resultType ="map">
            SELECT /* 사건 디테일 한건 */
                   'N' AS FLAG,
                   ROWIDTOCHAR(B.ROWID) AS ROW_ID,
                   '0' AS CHK,
                   #{OPERATOR, jdbcType=VARCHAR} AS OPERATOR,
                    NVL(A.BRCH_ID,' ') AS  BRCH_ID,
                    NVL(A.AFF_SEQ,'-99999') AS  AFF_SEQ,
                    NVL(B.DTL_SEQ,'-99999') AS  DTL_SEQ,
                    NVL(B.GRP_CD,'-99999') AS  GRP_CD,
                    NVL(B.GRP_SEQ,'-99999') AS  GRP_SEQ,
                    NVL(B.REQ_SEQ,'-99999') AS  REQ_SEQ,
                    NVL(B.SORT_NO,'-99999') AS  SORT_NO,
                    NVL(B.REQ_BND_SEQ,'-99999') AS  REQ_BND_SEQ,
                    NVL(B.REQ_BND_NM,' ') AS  REQ_BND_NM,
                    NVL(B.REQ_BND_STS,' ') AS  REQ_BND_STS,
                    NVL(FC_CC_GET_CODENAME('AD03',B.REQ_BND_STS),' ') AS  REQ_BND_STS_NM,
                    NVL(B.REQ_PRS_NOTE,' ') AS REQ_PRS_NOTE,
                    
                    decode(B.REQ_DEB,'Y',1,0) AS  REQ_DEB,
               decode(B.REQ_BNK,'Y',1,0) AS  REQ_BNK,
               decode(B.REQ_CARD,'Y',1,0) AS  REQ_CARD,
               
                    NVL(B.BND_SEQ_1,'-99999') AS BND_SEQ_1,
                    NVL(B.BND_NM_1,' ') AS BND_NM_1,
                    NVL(B.PRS_STS_1,' ') AS PRS_STS_1,
                    NVL(FC_CC_GET_CODENAME('AD03',B.PRS_STS_1),' ') AS  PRS_STS_1_NM,
                    NVL(B.PRS_NOTE_1,' ') AS PRS_NOTE_1,
                    NVL(B.ACP_MTD_1, ' ') AS ACP_MTD_1, 
                    NVL(FC_CC_GET_CODENAME('AC09',B.ACP_MTD_1),' ') AS ACP_MTD_NM_1,
                    
                    
                    NVL(B.BND_SEQ_2,'-99999') AS BND_SEQ_2,
                    NVL(B.BND_NM_2,' ') AS BND_NM_2,
                    NVL(B.PRS_STS_2,' ') AS PRS_STS_2,
                    NVL(FC_CC_GET_CODENAME('AD03',B.PRS_STS_2),' ') AS  PRS_STS_2_NM,
                    NVL(B.PRS_NOTE_2,' ') AS PRS_NOTE_2,
                    NVL(B.ACP_MTD_2, ' ') AS ACP_MTD_2,
                    NVL(FC_CC_GET_CODENAME('AC09',B.ACP_MTD_2),' ') AS ACP_MTD_NM_2,
                                       
                    decode(B.ISU_DEB,'Y',1,0) AS  ISU_DEB,
                    decode(B.ISU_COC,'Y',1,0) AS  ISU_COC,
                    decode(B.ISU_BNK,'Y',1,0) AS  ISU_BNK,
                    decode(B.ISU_CARD,'Y',1,0) AS  ISU_CARD,
                    decode(B.ISU_CRDT,'Y',1,0) AS  ISU_CRDT,
                    
                    NVL(B.BNK_CHRG,'-99999') AS  BNK_CHRG,
                    NVL(B.AGC_CHRG,'-99999') AS  AGC_CHRG,
                    
                    NVL(B.BNK_NOTE,' ') AS  BNK_NOTE,
                    NVL(B.CARD_NOTE,' ') AS  CARD_NOTE,
                    NVL(B.BIZ_REQ_YN,' ') AS  BIZ_REQ_YN,
               NVL(B.REQ_PRT_YN,' ') AS  REQ_PRT_YN,
                    decode(B.PRT_YN,'Y',1,0) AS PRT_YN,
                    NVL(B.CLOSE_YN,' ') AS CLOSE_YN,
                    NVL(B.NOTE,' ') AS NOTE,  
                    NVL(B.NOTE2,' ') AS NOTE2,                    
                    '출력' AS PRT_BTN,
                    CASE 
                         WHEN C.FORM_GBN = 'C1' THEN 'PG_CC_BONDFORM_C1.mrd'
                         WHEN C.FORM_GBN = 'C2' THEN 'PG_CC_BONDFORM_C2.mrd'
                         WHEN C.FORM_GBN IN  ('S', 'SC1', 'SC2') THEN FORM_SAVE_FILE
                         WHEN C.FORM_GBN = 'R' THEN 'PG_CC_BONDFORM_S.mrd'
                         ELSE ' '
                    END  AS FORM_SAVE_FILE1,  -- 출력물1 (자채_공통의 경우 폼이 1,2 출력이므로 두개로 나눈다.)
                    CASE 
                         WHEN C.FORM_GBN = 'SC1' THEN 'PG_CC_BONDFORM_C1.mrd'
                         WHEN C.FORM_GBN = 'SC2' THEN 'PG_CC_BONDFORM_C2.mrd'
                         ELSE ' '
                    END  AS FORM_SAVE_FILE2,  -- 출력물2 (자채_공통의 경우 폼이 1,2 출력이므로 두개로 나눈다.)
                    
                    DECODE(C.FORM_SAVE_FILE, NULL,'X', 'O') AS PRT_ABL_YN,
                NVL(C.DT_GBN, ' ') AS DT_GBN,
                NVL(B.BNK_NOTE_TRM,' ') AS  BNK_NOTE_TRM,
                    NVL(B.BNK_NOTE_ETC,' ') AS  BNK_NOTE_ETC,
                    NVL(B.CARD_NOTE_TRM,' ') AS  CARD_NOTE_TRM,
               NVL(B.CARD_NOTE_ETC,' ') AS  CARD_NOTE_ETC,
               CASE
                    WHEN B.REQ_BND_STS = '210' OR  B.PRS_STS_1 = '210' OR B.PRS_STS_2 = '210' THEN 'Y'
                    ELSE 'N'
                END AS ROW_COLOR,
                ' ' AS TMP_PRS_STS,
                NVL(C.REG_GBN, ' ') AS REG_GBN,
                'N' as ISU_EDT_YN,  -- 서류종류 수정여부 
                'N' as PRT_EDT_YN,   -- 출력 수정 여부
                'N' as AMT_EDT_YN,   -- 수수료 수정 여부
                NVL(C.CLT_OPN_YN, ' ') AS CLT_OPN_YN,
                NVL(C.JMN_OPN_YN, ' ') AS JMN_OPN_YN,
                NVL(C.FORM_GBN, ' ') AS FORM_GBN,
                
                NVL(B.REQ_BAR,'-99999') AS REQ_BAR,
                NVL(B.BAR_1,'-99999') AS BAR_1,
                NVL(B.BAR_2,'-99999') AS BAR_2
                                
              FROM TB_AC_AFFAIR_MST A, TB_AC_AFFAIR_DTL B, TB_CC_BOND_LST C, TB_CC_TIEUP_LST D
             WHERE B.BRCH_ID = A.BRCH_ID
               AND B.BRCH_ID = C.BRCH_ID(+)
               AND B.BRCH_ID = D.BRCH_ID
               AND A.TUB_SEQ = D.TUB_SEQ
               AND B.REQ_BND_SEQ = C.BND_SEQ(+)
               AND A.AFF_SEQ = B.AFF_SEQ
               AND A.BRCH_ID =  #{S_BRCH_ID, jdbcType=VARCHAR}
               AND A.AFF_SEQ = #{S_AFF_SEQ, jdbcType=VARCHAR}
             ORDER BY A.AFF_SEQ, B.SORT_NO, B.GRP_CD, B.GRP_SEQ


    </select>    

 
 

    
  <!-- 사건 디테일  조회 -->
    <!-- 
    <select id="selectAffairDtl" parameterType="map" resultType ="map">
            SELECT /* 사건 디테일 */
                   'N' AS FLAG,
                   ROWIDTOCHAR(B.ROWID) AS ROW_ID,
                   '0' AS CHK,
                   #{OPERATOR, jdbcType=VARCHAR} AS OPERATOR,
                    NVL(A.BRCH_ID,' ') AS  BRCH_ID,
                    NVL(A.AFF_SEQ,'-99999') AS  AFF_SEQ,
                    NVL(B.DTL_SEQ,'-99999') AS  DTL_SEQ,
                    NVL(B.GRP_CD,'-99999') AS  GRP_CD,
                    NVL(B.GRP_SEQ,'-99999') AS  GRP_SEQ,
                    NVL(B.REQ_SEQ,'-99999') AS  REQ_SEQ,
                    NVL(B.SORT_NO,'-99999') AS  SORT_NO,
                    NVL(B.REQ_BND_SEQ,'-99999') AS  REQ_BND_SEQ,
                    NVL(B.REQ_BND_NM,' ') AS  REQ_BND_NM,
                    NVL(B.REQ_BND_STS,' ') AS  REQ_BND_STS,
                    NVL(FC_CC_GET_CODENAME('AD03',B.REQ_BND_STS),' ') AS  REQ_BND_STS_NM,
                    NVL(B.REQ_PRS_NOTE,' ') AS REQ_PRS_NOTE,
                    
                    decode(B.REQ_DEB,'Y',1,0) AS  REQ_DEB,
               decode(B.REQ_BNK,'Y',1,0) AS  REQ_BNK,
               decode(B.REQ_CARD,'Y',1,0) AS  REQ_CARD,
               
                    NVL(B.BND_SEQ_1,'-99999') AS BND_SEQ_1,
                    NVL(B.BND_NM_1,' ') AS BND_NM_1,
                    NVL(B.PRS_STS_1,' ') AS PRS_STS_1,
                    NVL(FC_CC_GET_CODENAME('AD03',B.PRS_STS_1),' ') AS  PRS_STS_1_NM,
                    NVL(B.PRS_NOTE_1,' ') AS PRS_NOTE_1,
                    NVL(B.ACP_MTD_1, ' ') AS ACP_MTD_1, 
                    NVL(FC_CC_GET_CODENAME('AC09',B.ACP_MTD_1),' ') AS ACP_MTD_NM_1,
                    
                    
                    NVL(B.BND_SEQ_2,'-99999') AS BND_SEQ_2,
                    NVL(B.BND_NM_2,' ') AS BND_NM_2,
                    NVL(B.PRS_STS_2,' ') AS PRS_STS_2,
                    NVL(FC_CC_GET_CODENAME('AD03',B.PRS_STS_2),' ') AS  PRS_STS_2_NM,
                    NVL(B.PRS_NOTE_2,' ') AS PRS_NOTE_2,
                    NVL(B.ACP_MTD_2, ' ') AS ACP_MTD_2,
                    NVL(FC_CC_GET_CODENAME('AC09',B.ACP_MTD_2),' ') AS ACP_MTD_NM_2,
                                       
                    decode(B.ISU_DEB,'Y',1,0) AS  ISU_DEB,
                    decode(B.ISU_COC,'Y',1,0) AS  ISU_COC,
                    decode(B.ISU_BNK,'Y',1,0) AS  ISU_BNK,
                    decode(B.ISU_CARD,'Y',1,0) AS  ISU_CARD,
                    decode(B.ISU_CRDT,'Y',1,0) AS  ISU_CRDT,
                    
                    NVL(B.BNK_CHRG,'-99999') AS  BNK_CHRG,
                    NVL(B.AGC_CHRG,'-99999') AS  AGC_CHRG,
                    
                    NVL(B.BNK_NOTE,' ') AS  BNK_NOTE,
                    NVL(B.CARD_NOTE,' ') AS  CARD_NOTE,
                    NVL(B.BIZ_REQ_YN,' ') AS  BIZ_REQ_YN,
               NVL(B.REQ_PRT_YN,' ') AS  REQ_PRT_YN,
                    decode(B.PRT_YN,'Y',1,0) AS PRT_YN,
                    NVL(B.CLOSE_YN,' ') AS CLOSE_YN,
                    NVL(B.NOTE,' ') AS NOTE,  
                    NVL(B.NOTE2,' ') AS NOTE2,                    
                    '출력' AS PRT_BTN,                    
                    CASE 
                         WHEN C.FORM_GBN = 'C1' THEN 'PG_CC_BONDFORM_C1.mrd'
                         WHEN C.FORM_GBN = 'C2' THEN 'PG_CC_BONDFORM_C2.mrd'
                         WHEN C.FORM_GBN IN  ('S', 'SC1', 'SC2') THEN FORM_SAVE_FILE
                         ELSE ' '
                    END  AS FORM_SAVE_FILE1,  출력물1 (자채_공통의 경우 폼이 1,2 출력이므로 두개로 나눈다.)
                    CASE 
                         WHEN C.FORM_GBN = 'SC1' THEN 'PG_CC_BONDFORM_C1.mrd'
                         WHEN C.FORM_GBN = 'SC2' THEN 'PG_CC_BONDFORM_C2.mrd'
                         ELSE ' '
                    END  AS FORM_SAVE_FILE2,   출력물2 (자채_공통의 경우 폼이 1,2 출력이므로 두개로 나눈다.)
                    DECODE(C.FORM_SAVE_FILE, NULL,'X', 'O') AS PRT_ABL_YN,
                NVL(C.DT_GBN, ' ') AS DT_GBN,
                
                NVL(B.BNK_NOTE_TRM,' ') AS  BNK_NOTE_TRM,
                    NVL(B.BNK_NOTE_ETC,' ') AS  BNK_NOTE_ETC,
                    NVL(B.CARD_NOTE_TRM,' ') AS  CARD_NOTE_TRM,
               NVL(B.CARD_NOTE_ETC,' ') AS  CARD_NOTE_ETC,
               CASE
                    WHEN B.REQ_BND_STS = '210' OR  B.PRS_STS_1 = '210' OR B.PRS_STS_2 = '210' THEN 'Y'
                    ELSE 'N'
                END AS ROW_COLOR               
              FROM TB_AC_AFFAIR_MST A, TB_AC_AFFAIR_DTL B, TB_CC_BOND_LST C, TB_CC_TIEUP_LST D
             WHERE B.BRCH_ID = A.BRCH_ID
               AND B.BRCH_ID = C.BRCH_ID(+)
               AND B.BRCH_ID = D.BRCH_ID
               AND A.TUB_SEQ = D.TUB_SEQ
               AND B.REQ_BND_SEQ = C.BND_SEQ(+)
               AND A.AFF_SEQ = B.AFF_SEQ
               AND A.BRCH_ID =  #{S_BRCH_ID, jdbcType=VARCHAR}
               AND A.TUB_SEQ like  #{TUb_SEQ, jdbcType=VARCHAR} || '%'
               AND (A.TUB_NM LIKE '%' || #{S_TUB_NM, jdbcType=VARCHAR} || '%' 
                   OR A.CHG_NM LIKE '%' || #{S_TUB_NM, jdbcType=VARCHAR} || '%' 
                   OR A.CLT_NM LIKE '%' || #{S_TUB_NM, jdbcType=VARCHAR} || '%'
                   OR A.CLT_JMN LIKE '%' || #{S_TUB_NM, jdbcType=VARCHAR} || '%'
                   OR A.CLT_TEL LIKE '%' || #{S_TUB_NM, jdbcType=VARCHAR} || '%'
                   OR A.HNA_CHG_USR_NM LIKE '%' || #{S_TUB_NM, jdbcType=VARCHAR} || '%'
                   OR A.TUB_TEL LIKE '%' || #{S_TUB_NM, jdbcType=VARCHAR} || '%'
                   OR A.TUB_FAX LIKE '%' || #{S_TUB_NM, jdbcType=VARCHAR} || '%'
                   OR D.RLT_NM LIKE '%' || #{S_TUB_NM, jdbcType=VARCHAR} || '%'   
                   OR A.AFF_SEQ LIKE #{S_TUB_NM, jdbcType=VARCHAR} || '%'               
                  )
               AND A.AFF_ST_DT BETWEEN TO_DATE(NVL(#{S_ST_DT, jdbcType=VARCHAR},'19000101')) AND TO_DATE(NVL(#{S_ED_DT, jdbcType=VARCHAR},'29991231')) + 0.99999
               AND A.AFF_PRS_STS LIKE  #{S_AFF_PRS_STS, jdbcType=VARCHAR} || '%'
             ORDER BY A.AFF_SEQ, B.SORT_NO, B.GRP_CD, B.GRP_SEQ


    </select>  
     -->  



     <!-- 사건 사건디테일 추가/수정 -->
     <insert   id="saveAffairDtl" parameterType="map" >

        DECLARE 
            V_DTL_SEQ NUMBER(5);
        begin
            IF #{FLAG, jdbcType=VARCHAR} = 'D' THEN
                DELETE FROM TB_AC_AFFAIR_DTL
                 WHERE ROWID = chartorowid(#{ROW_ID, jdbcType=VARCHAR}) ;              
            ELSE         
         
            UPDATE TB_AC_AFFAIR_DTL
               SET        GRP_CD = #{GRP_CD, jdbcType=VARCHAR} , 
                   GRP_SEQ = #{GRP_SEQ, jdbcType=VARCHAR} , 
                   REQ_SEQ = #{REQ_SEQ, jdbcType=VARCHAR} , 
                   SORT_NO = #{SORT_NO, jdbcType=VARCHAR} , 
                   REQ_BND_SEQ = #{REQ_BND_SEQ, jdbcType=VARCHAR} , 
                   REQ_BND_NM = #{REQ_BND_NM, jdbcType=VARCHAR} , 
                   REQ_BND_STS = #{REQ_BND_STS, jdbcType=VARCHAR} , 
                   REQ_DEB = DECODE(#{REQ_DEB, jdbcType=VARCHAR},'1','Y','N') , 
                   REQ_BNK = DECODE(#{REQ_BNK, jdbcType=VARCHAR},'1','Y','N') , 
                   REQ_CARD = DECODE(#{REQ_CARD, jdbcType=VARCHAR},'1','Y','N') , 
                   BNK_NOTE = #{BNK_NOTE, jdbcType=VARCHAR} , 
                   CARD_NOTE = #{CARD_NOTE, jdbcType=VARCHAR} , 
                   BIZ_REQ_YN = #{BIZ_REQ_YN, jdbcType=VARCHAR} , 
                   REQ_PRT_YN = #{REQ_PRT_YN, jdbcType=VARCHAR} , 
                   PRT_YN = DECODE(#{PRT_YN, jdbcType=VARCHAR},'1','Y','N') , 
                   NOTE = #{NOTE, jdbcType=VARCHAR} ,
                   EDT_USR = #{OPERATOR, jdbcType=VARCHAR} , 
                   EDT_DT = SYSDATE,
                   
                   BNK_NOTE_TRM = #{BNK_NOTE_TRM, jdbcType=VARCHAR} , 
                   BNK_NOTE_ETC = #{BNK_NOTE_ETC, jdbcType=VARCHAR} , 
                   CARD_NOTE_TRM = #{CARD_NOTE_TRM, jdbcType=VARCHAR} , 
                   CARD_NOTE_ETC = #{CARD_NOTE_ETC, jdbcType=VARCHAR} ,
                   REQ_BAR = #{REQ_BAR, jdbcType=VARCHAR}
                    
               where rowid = chartorowid(#{ROW_ID, jdbcType=VARCHAR});      
   
   
                  if sql%rowcount=0 then
                  
                  SELECT NVL(MAX(DTL_SEQ),0) + 1
                     INTO V_DTL_SEQ
                     FROM TB_AC_AFFAIR_DTL
                    WHERE BRCH_ID = #{BRCH_ID, jdbcType=VARCHAR} 
                      AND AFF_SEQ = #{AFF_SEQ, jdbcType=VARCHAR};
                  
                  
                  INSERT INTO TB_AC_AFFAIR_DTL
                          (
                           BRCH_ID , 
                           AFF_SEQ , 
                           DTL_SEQ , 
                           GRP_CD , 
                           GRP_SEQ , 
                           REQ_SEQ , 
                           SORT_NO , 
                           REQ_BND_SEQ , 
                           REQ_BND_NM , 
                           REQ_BND_STS , 
                           REQ_DEB , 
                           REQ_BNK , 
                           REQ_CARD , 
                           BNK_NOTE , 
                           CARD_NOTE , 
                           BIZ_REQ_YN , 
                           REQ_PRT_YN , 
                           PRT_YN , 
                           CLOSE_YN , 
                           NOTE,
                           CRT_USR , 
                           CRT_DT , 
                           EDT_USR , 
                           EDT_DT,
                           BNK_NOTE_TRM,
                           BNK_NOTE_ETC,
                           CARD_NOTE_TRM,
                           CARD_NOTE_ETC,
                           REQ_BAR )
                   VALUES (
                           #{BRCH_ID, jdbcType=VARCHAR} , 
                           #{AFF_SEQ, jdbcType=VARCHAR} , 
                           V_DTL_SEQ , 
                           V_DTL_SEQ , 
                           1 , 
                           #{REQ_SEQ, jdbcType=VARCHAR} , 
                           #{SORT_NO, jdbcType=VARCHAR} , 
                           #{REQ_BND_SEQ, jdbcType=VARCHAR} , 
                           #{REQ_BND_NM, jdbcType=VARCHAR} , 
                           #{REQ_BND_STS, jdbcType=VARCHAR} , 
                           DECODE(#{REQ_DEB, jdbcType=VARCHAR},'1','Y','N') , 
                           DECODE(#{REQ_BNK, jdbcType=VARCHAR},'1','Y','N') , 
                           DECODE(#{REQ_CARD, jdbcType=VARCHAR},'1','Y','N') , 
                           #{BNK_NOTE, jdbcType=VARCHAR} , 
                           #{CARD_NOTE, jdbcType=VARCHAR} , 
                           #{BIZ_REQ_YN, jdbcType=VARCHAR}, 
                           #{REQ_PRT_YN, jdbcType=VARCHAR} , 
                           DECODE(#{PRT_YN, jdbcType=VARCHAR},'1','Y','N') , 
                           'N' , 
                           #{NOTE, jdbcType=VARCHAR} , 
                           #{OPERATOR, jdbcType=VARCHAR} , 
                           SYSDATE , 
                           #{OPERATOR, jdbcType=VARCHAR} , 
                           SYSDATE,
                           #{BNK_NOTE_TRM, jdbcType=VARCHAR} , 
                           #{BNK_NOTE_ETC, jdbcType=VARCHAR} , 
                           #{CARD_NOTE_TRM, jdbcType=VARCHAR}, 
                           #{CARD_NOTE_ETC, jdbcType=VARCHAR},
                           #{REQ_BAR, jdbcType=VARCHAR}
                             )   ;         

                     end if;
               END IF;
            exception
                when others then
                    raise_application_error(-20501,'TB_AC_AFFAIR_DTL save error : ' ||SQLERRM);
            end;
        
    </insert>


     <!-- 사건 사건디테일 전체 추가/수정 -->
     <insert   id="saveAffairDtlAll" parameterType="map" >
        DECLARE 
            V_DTL_SEQ NUMBER(5);
            V_CNT NUMBER(3);
        begin
            IF #{FLAG, jdbcType=VARCHAR} = 'D' THEN
                
                -- 내외근/입금요청있으면 삭제 불가
                BEGIN
                
	               SELECT COUNT(CNT)
	                 INTO V_CNT
	                 FROM (SELECT 1 AS CNT
			                  FROM TB_AC_AFFAIRCHRG_LST
			                 WHERE BRCH_ID = #{BRCH_ID, jdbcType=VARCHAR} 
			                   AND AFF_SEQ = #{AFF_SEQ, jdbcType=VARCHAR}
			                   AND BND_SEQ IN (#{REQ_BND_SEQ, jdbcType=VARCHAR}, #{BND_SEQ_1, jdbcType=VARCHAR}, #{BND_SEQ_2, jdbcType=VARCHAR})
			               UNION ALL
			               SELECT 1 AS CNT
			                  FROM TB_AC_AFFAIRPRS_LST
			                 WHERE BRCH_ID = #{BRCH_ID, jdbcType=VARCHAR} 
			                   AND AFF_SEQ = #{AFF_SEQ, jdbcType=VARCHAR}
			                   AND BND_SEQ IN (#{REQ_BND_SEQ, jdbcType=VARCHAR}, #{BND_SEQ_1, jdbcType=VARCHAR}, #{BND_SEQ_2, jdbcType=VARCHAR})
			               UNION ALL
			               SELECT 1 AS CNT
			                  FROM TB_AC_AFFAIROUT_LST
			                 WHERE BRCH_ID = #{BRCH_ID, jdbcType=VARCHAR} 
			                   AND AFF_SEQ = #{AFF_SEQ, jdbcType=VARCHAR}
			                   AND BND_SEQ IN (#{REQ_BND_SEQ, jdbcType=VARCHAR}, #{BND_SEQ_1, jdbcType=VARCHAR}, #{BND_SEQ_2, jdbcType=VARCHAR})
			               ) A;
                 
                    IF V_CNT > 0 THEN
                        raise_application_error(-20501,'해당 채권사는 '||#{REQ_BND_SEQ, jdbcType=VARCHAR} ||'/' || #{BND_NM_1, jdbcType=VARCHAR} ||'/'||#{BND_NM_2, jdbcType=VARCHAR}||'는 입금요청,내근,외근에 진행중인 항목이 있어 삭제 불가능 합니다.');
                    
                    ELSE
	                    BEGIN
	                    
		                    DELETE FROM TB_AC_AFFAIR_DTL
		                     WHERE BRCH_ID = #{BRCH_ID, jdbcType=VARCHAR} 
		                       AND AFF_SEQ = #{AFF_SEQ, jdbcType=VARCHAR}
		                       AND DTL_SEQ = #{DTL_SEQ, jdbcType=VARCHAR}
		                          ; 
		                          
		                    -- 삭제행은 로깅한다.
		                    INSERT INTO TB_AC_AFFAIR_DTL_LOG
		                    (BRCH_ID, AFF_SEQ, DTL_SEQ, LOG_SEQ, WRK_GBN, WRK_DT, WRK_USR)
		                    VALUES
		                    (#{BRCH_ID, jdbcType=VARCHAR} , #{AFF_SEQ, jdbcType=VARCHAR}, #{DTL_SEQ, jdbcType=VARCHAR}, 1, 'D', SYSDATE, #{OPERATOR, jdbcType=VARCHAR});
                        END;      
                            	                                              
                    
                    END IF;
                

                END;            
            ELSE         

            UPDATE TB_AC_AFFAIR_DTL
               SET        GRP_CD = #{GRP_CD, jdbcType=VARCHAR} , 
                   GRP_SEQ = NVL(#{GRP_SEQ, jdbcType=VARCHAR}, GRP_SEQ) , 
                   REQ_SEQ = NVL(#{REQ_SEQ, jdbcType=VARCHAR} , REQ_SEQ),
                   SORT_NO = NVL(#{SORT_NO, jdbcType=VARCHAR} , SORT_NO),
                   REQ_BND_SEQ = #{REQ_BND_SEQ, jdbcType=VARCHAR},
                   REQ_BND_NM = #{REQ_BND_NM, jdbcType=VARCHAR},
                   REQ_BND_STS = #{REQ_BND_STS, jdbcType=VARCHAR},  
                    REQ_PRS_NOTE = #{REQ_PRS_NOTE, jdbcType=VARCHAR},
                    
                    REQ_DEB = DECODE(#{REQ_DEB, jdbcType=VARCHAR},'1','Y','N') , 
                   REQ_BNK = DECODE(#{REQ_BNK, jdbcType=VARCHAR},'1','Y','N') , 
                   REQ_CARD = DECODE(#{REQ_CARD, jdbcType=VARCHAR},'1','Y','N') , 
                   BNK_NOTE = #{BNK_NOTE, jdbcType=VARCHAR},
                   CARD_NOTE = #{CARD_NOTE, jdbcType=VARCHAR},
                   BIZ_REQ_YN = #{BIZ_REQ_YN, jdbcType=VARCHAR},
                   REQ_PRT_YN = #{REQ_PRT_YN, jdbcType=VARCHAR},
                   BND_SEQ_1 =  #{BND_SEQ_1, jdbcType=VARCHAR}, 
                   BND_NM_1 = #{BND_NM_1, jdbcType=VARCHAR},
                   PRS_STS_1 = #{PRS_STS_1, jdbcType=VARCHAR},
                   PRS_NOTE_1 = #{PRS_NOTE_1, jdbcType=VARCHAR},
                   ACP_MTD_1 = #{ACP_MTD_1, jdbcType=VARCHAR},
                   BND_SEQ_2 = #{BND_SEQ_2, jdbcType=VARCHAR}, 
                   BND_NM_2 = #{BND_NM_2, jdbcType=VARCHAR},
                   PRS_STS_2 = #{PRS_STS_2, jdbcType=VARCHAR},
                   PRS_NOTE_2 = #{PRS_NOTE_2, jdbcType=VARCHAR},
                   ACP_MTD_2 = #{ACP_MTD_2, jdbcType=VARCHAR},
                   
                   ISU_DEB = DECODE(#{ISU_DEB, jdbcType=VARCHAR},'1','Y','N'), 
                   ISU_COC = DECODE(#{ISU_COC, jdbcType=VARCHAR},'1','Y','N'), 
                   ISU_BNK = DECODE(#{ISU_BNK, jdbcType=VARCHAR},'1','Y','N'), 
                   ISU_CARD = DECODE(#{ISU_CARD, jdbcType=VARCHAR},'1','Y','N') , 
                   ISU_CRDT = DECODE(#{ISU_CRDT, jdbcType=VARCHAR},'1','Y','N') , 
                   BNK_CHRG = #{BNK_CHRG, jdbcType=VARCHAR},
                   AGC_CHRG = #{AGC_CHRG, jdbcType=VARCHAR}, 
                   PRT_YN = DECODE(#{PRT_YN, jdbcType=VARCHAR},'1','Y','N') , 
                   CLOSE_YN = #{CLOSE_YN, jdbcType=VARCHAR},
                   NOTE = #{NOTE, jdbcType=VARCHAR},
                   NOTE2 = #{NOTE2, jdbcType=VARCHAR},
                   REQ_BAR = #{REQ_BAR, jdbcType=VARCHAR},
                   BAR_1 = #{BAR_1, jdbcType=VARCHAR},
                   BAR_2 = #{BAR_2, jdbcType=VARCHAR},
                   
                   EDT_USR = #{OPERATOR, jdbcType=VARCHAR} , 
                   EDT_DT = SYSDATE 
                 WHERE BRCH_ID = #{BRCH_ID, jdbcType=VARCHAR} 
                   AND AFF_SEQ = #{AFF_SEQ, jdbcType=VARCHAR}
                   AND DTL_SEQ = #{DTL_SEQ, jdbcType=VARCHAR};

    
                  if sql%rowcount=0 then
                  
                  begin
                      SELECT NVL(MAX(DTL_SEQ),0) + 1
                         INTO V_DTL_SEQ
                         FROM TB_AC_AFFAIR_DTL
                        WHERE BRCH_ID = #{BRCH_ID, jdbcType=VARCHAR} 
                          AND AFF_SEQ = #{AFF_SEQ, jdbcType=VARCHAR};
    
                      
                      INSERT INTO TB_AC_AFFAIR_DTL
                              (
                               BRCH_ID , 
                               AFF_SEQ , 
                               DTL_SEQ , 
                               GRP_CD , 
                               GRP_SEQ , 
                               REQ_SEQ , 
                               SORT_NO , 
                               REQ_BND_SEQ , 
                               REQ_BND_NM , 
                               REQ_BND_STS , 
                               REQ_PRS_NOTE,
                               REQ_DEB , 
                               REQ_BNK , 
                               REQ_CARD , 
                               BNK_NOTE , 
                               CARD_NOTE , 
                               BIZ_REQ_YN , 
                               REQ_PRT_YN , 
                               BND_SEQ_1 , 
                               BND_NM_1 , 
                               PRS_STS_1 , 
                               PRS_NOTE_1,
                               ACP_MTD_1,
                               BND_SEQ_2 , 
                               BND_NM_2 , 
                               PRS_STS_2 ,
                               PRS_NOTE_2, 
                               ACP_MTD_2,
                               ISU_DEB , 
                               ISU_COC , 
                               ISU_BNK , 
                               ISU_CARD , 
                               ISU_CRDT , 
                               BNK_CHRG , 
                               AGC_CHRG , 
                               PRT_YN , 
                               CLOSE_YN , 
                               NOTE,
                               NOTE2,
                               REQ_BAR,
                               BAR_1,
                               BAR_2,
                               CRT_USR , 
                               CRT_DT , 
                               EDT_USR , 
                               EDT_DT )
                       VALUES (
                               #{BRCH_ID, jdbcType=VARCHAR} , 
                               #{AFF_SEQ, jdbcType=VARCHAR} , 
                               V_DTL_SEQ , 
                               DECODE(#{GRP_CD, jdbcType=VARCHAR},'',V_DTL_SEQ,#{GRP_CD, jdbcType=VARCHAR}) , -- 값이 없으면 추가 있으면 일부매각, 매각
                               DECODE(#{GRP_SEQ, jdbcType=VARCHAR},'',1,#{GRP_SEQ, jdbcType=VARCHAR}) ,       -- 값이 없으면 추가 있으면 일부매각, 매각
                               #{REQ_SEQ, jdbcType=VARCHAR} , 
                               #{SORT_NO, jdbcType=VARCHAR} , 
                               #{REQ_BND_SEQ, jdbcType=VARCHAR},
                               #{REQ_BND_NM, jdbcType=VARCHAR} , 
                               #{REQ_BND_STS, jdbcType=VARCHAR},  
                               #{REQ_PRS_NOTE, jdbcType=VARCHAR} ,
                               
                               DECODE(#{REQ_DEB, jdbcType=VARCHAR},'1','Y','N') , 
                               DECODE(#{REQ_BNK, jdbcType=VARCHAR},'1','Y','N') , 
                               DECODE(#{REQ_CARD, jdbcType=VARCHAR},'1','Y','N') ,
                               #{BNK_NOTE, jdbcType=VARCHAR} , 
                               #{CARD_NOTE, jdbcType=VARCHAR} , 
                               #{BIZ_REQ_YN, jdbcType=VARCHAR} , 
                               #{REQ_PRT_YN, jdbcType=VARCHAR} , 
                               #{BND_SEQ_1, jdbcType=VARCHAR}, 
                               #{BND_NM_1, jdbcType=VARCHAR} , 
                               #{PRS_STS_1, jdbcType=VARCHAR} , 
                               #{PRS_NOTE_1, jdbcType=VARCHAR} ,
                               #{ACP_MTD_1, jdbcType=VARCHAR}, 
                               #{BND_SEQ_2, jdbcType=VARCHAR}, 
                               #{BND_NM_2, jdbcType=VARCHAR} , 
                               #{PRS_STS_2, jdbcType=VARCHAR} ,
                               #{PRS_NOTE_2, jdbcType=VARCHAR} ,  
                               #{ACP_MTD_2, jdbcType=VARCHAR},
                               DECODE(#{ISU_DEB, jdbcType=VARCHAR},'1','Y','N'), 
                               DECODE(#{ISU_COC, jdbcType=VARCHAR},'1','Y','N'), 
                               DECODE(#{ISU_BNK, jdbcType=VARCHAR},'1','Y','N') , 
                               DECODE(#{ISU_CARD, jdbcType=VARCHAR},'1','Y','N') , 
                               DECODE(#{ISU_CRDT, jdbcType=VARCHAR},'1','Y','N') , 
                               #{BNK_CHRG, jdbcType=VARCHAR} , 
                               #{AGC_CHRG, jdbcType=VARCHAR} , 
                               DECODE(#{PRT_YN, jdbcType=VARCHAR},'1','Y','N') , 
                               #{CLOSE_YN, jdbcType=VARCHAR} , 
                               #{NOTE, jdbcType=VARCHAR} ,
                               #{NOTE2, jdbcType=VARCHAR} ,
                               #{REQ_BAR, jdbcType=VARCHAR} ,
                               
                               #{BAR_1, jdbcType=VARCHAR} ,
                               #{BAR_2, jdbcType=VARCHAR} ,
                               
                               #{OPERATOR, jdbcType=VARCHAR} , 
                               SYSDATE , 
                               #{OPERATOR, jdbcType=VARCHAR} , 
                               SYSDATE )   ;  
                        end;             

                     end if;
                     
                     
                   -- 발급/완납/채무없음 내/외근에 진행중인게 있다면 모두 발급 처리 한다.
                   if  #{PRS_STS_1, jdbcType=VARCHAR} IN ('210', '320', '340') THEN
                   
                           UPDATE TB_AC_AFFAIRPRS_LST 
                              SET PRS_STS = #{PRS_STS_1, jdbcType=VARCHAR},
                                  EDT_USR = #{OPERATOR, jdbcType=VARCHAR} , 
                               EDT_DT = SYSDATE  
                            WHERE BRCH_ID = #{BRCH_ID, jdbcType=VARCHAR} 
                           AND AFF_SEQ = #{AFF_SEQ, jdbcType=VARCHAR}
                           AND DTL_SEQ = #{DTL_SEQ, jdbcType=VARCHAR} 
                           AND PRS_STEP = 1;
          
                           UPDATE TB_AC_AFFAIROUT_LST 
                              SET PRS_STS = #{PRS_STS_1, jdbcType=VARCHAR},
                                  EDT_USR = #{OPERATOR, jdbcType=VARCHAR} , 
                               EDT_DT = SYSDATE  
                            WHERE BRCH_ID = #{BRCH_ID, jdbcType=VARCHAR} 
                           AND AFF_SEQ = #{AFF_SEQ, jdbcType=VARCHAR}
                           AND DTL_SEQ = #{DTL_SEQ, jdbcType=VARCHAR} 
                           AND PRS_STEP = 1;          
                   
                    ELSIF #{PRS_STS_2, jdbcType=VARCHAR} IN ('210', '320', '340')  THEN                         
                         
                         UPDATE TB_AC_AFFAIRPRS_LST 
                              SET PRS_STS = #{PRS_STS_2, jdbcType=VARCHAR},
                                  EDT_USR = #{OPERATOR, jdbcType=VARCHAR} , 
                               EDT_DT = SYSDATE  
                            WHERE BRCH_ID = #{BRCH_ID, jdbcType=VARCHAR} 
                           AND AFF_SEQ = #{AFF_SEQ, jdbcType=VARCHAR}
                           AND DTL_SEQ = #{DTL_SEQ, jdbcType=VARCHAR} 
                           AND PRS_STEP = 2;     


                         UPDATE TB_AC_AFFAIROUT_LST 
                              SET PRS_STS = #{PRS_STS_2, jdbcType=VARCHAR},
                                  EDT_USR = #{OPERATOR, jdbcType=VARCHAR} , 
                               EDT_DT = SYSDATE  
                            WHERE BRCH_ID = #{BRCH_ID, jdbcType=VARCHAR} 
                           AND AFF_SEQ = #{AFF_SEQ, jdbcType=VARCHAR}
                           AND DTL_SEQ = #{DTL_SEQ, jdbcType=VARCHAR} 
                           AND PRS_STEP = 2;                                     
                   
                   END IF;
                     
                     
               END IF;
            exception
                when others then
                    raise_application_error(-20501,'TB_AC_AFFAIR_DTL save error : ' ||SQLERRM);
            end;
        
    </insert>
 
   <!-- 지점정보 삭제 -->
    <delete   id="deleteAffairDtl" parameterType="map" >
          DELETE FROM TB_AC_AFFAIR_DTL
       WHERE ROWID = chartorowid(#{ROW_ID, jdbcType=VARCHAR})    
    </delete>
 
 
  
  <!-- 사건지점팝업   조회 -->
    <select id="selectAffairSpotPopup" parameterType="map" resultType ="map">
         SELECT /* 사건지점팝업 */
               NVL(A.BRCH_ID,' ') AS BRCH_ID,
               NVL(A.BND_SEQ,'-99999') AS BND_SEQ,
               NVL(A.BND_NM,' ') AS BND_NM,
               NVL(B.SPT_SEQ,'-99999') AS SPT_SEQ,
               NVL(B.SPT_NM,' ') AS SPT_NM
           FROM TB_CC_BOND_LST A, TB_CC_BONDSPOT_LST B
          WHERE A.BRCH_ID = B.BRCH_ID
            AND A.BND_SEQ = B.BND_SEQ
            AND A.BRCH_ID = #{BRCH_ID, jdbcType=VARCHAR}
            AND (A.BND_NM LIKE '%' || #{BND_NM, jdbcType=VARCHAR} || '%' OR B.SPT_NM LIKE '%' || #{BND_NM, jdbcType=VARCHAR} || '%')
          ORDER BY A.BND_SEQ, B.SPT_SEQ

    </select>


   <!-- 사건 특이사항  조회 -->
    <select id="selectAffNoteOne" parameterType="map" resultType ="map">
        SELECT /* 사건 특이사항 */
                'N' AS FLAG,
                ROWIDTOCHAR(B.ROWID) AS ROW_ID,
                '0' AS CHK,
                #{OPERATOR, jdbcType=VARCHAR} AS OPERATOR,
            NVL(B.BRCH_ID,' ') AS  BRCH_ID,
            NVL(B.AFF_SEQ,'-99999') AS  AFF_SEQ,
            NVL(TO_CHAR(B.PRS_DT,'YYYYMMDD'),' ') AS PRS_DT ,
            NVL(B.PRS_SEQ, '-99999') AS PRS_SEQ,
            NVL(B.NOTE,' ') AS NOTE
          FROM TB_AC_AFFAIR_MST A, TB_AC_AFFNOTE_LST B
         WHERE A.BRCH_ID = B.BRCH_ID
           AND A.AFF_SEQ = B.AFF_SEQ
           AND A.BRCH_ID =  #{S_BRCH_ID, jdbcType=VARCHAR}
           AND A.AFF_SEQ = #{S_AFF_SEQ, jdbcType=VARCHAR}
         ORDER BY A.AFF_SEQ, B.PRS_DT
       
    </select>

   <!-- 사건 특이사항  조회 -->
    <!-- 
    <select id="selectAffNoteLst" parameterType="map" resultType ="map">
        SELECT /* 사건 특이사항 */
                'N' AS FLAG,
                ROWIDTOCHAR(B.ROWID) AS ROW_ID,
                '0' AS CHK,
                #{OPERATOR, jdbcType=VARCHAR} AS OPERATOR,
            NVL(B.BRCH_ID,' ') AS  BRCH_ID,
            NVL(B.AFF_SEQ,'-99999') AS  AFF_SEQ,
            NVL(TO_CHAR(B.PRS_DT,'YYYYMMDD'),' ') AS PRS_DT ,
            NVL(B.NOTE,' ') AS NOTE
          FROM TB_AC_AFFAIR_MST A, TB_AC_AFFNOTE_LST B, TB_CC_TIEUP_LST C
         WHERE A.BRCH_ID = B.BRCH_ID
           AND A.BRCH_ID = C.BRCH_ID
           AND A.AFF_SEQ = B.AFF_SEQ
           AND A.TUB_SEQ = C.TUB_SEQ
           AND A.BRCH_ID =  #{S_BRCH_ID, jdbcType=VARCHAR}
           AND (A.TUB_NM LIKE '%' || #{S_TUB_NM, jdbcType=VARCHAR} || '%' 
                OR A.CHG_NM LIKE '%' || #{S_TUB_NM, jdbcType=VARCHAR} || '%' 
                OR A.CLT_NM LIKE '%' || #{S_TUB_NM, jdbcType=VARCHAR} || '%'
                OR A.CLT_JMN LIKE '%' || #{S_TUB_NM, jdbcType=VARCHAR} || '%'
                OR A.CLT_TEL LIKE '%' || #{S_TUB_NM, jdbcType=VARCHAR} || '%'
                OR A.HNA_CHG_USR_NM LIKE '%' || #{S_TUB_NM, jdbcType=VARCHAR} || '%'
               OR A.TUB_TEL LIKE '%' || #{S_TUB_NM, jdbcType=VARCHAR} || '%'
               OR A.TUB_FAX LIKE '%' || #{S_TUB_NM, jdbcType=VARCHAR} || '%'
               OR C.RLT_NM LIKE '%' || #{S_TUB_NM, jdbcType=VARCHAR} || '%'   
               OR A.AFF_SEQ LIKE #{S_TUB_NM, jdbcType=VARCHAR} || '%'                
               )
           AND A.AFF_ST_DT BETWEEN TO_DATE(NVL(#{S_ST_DT, jdbcType=VARCHAR},'19000101')) AND TO_DATE(NVL(#{S_ED_DT, jdbcType=VARCHAR},'29991231')) + 0.99999
           AND A.AFF_PRS_STS LIKE  #{S_AFF_PRS_STS, jdbcType=VARCHAR} || '%'
         ORDER BY A.AFF_SEQ, B.PRS_DT
       
    </select>
     -->
    
    

     <!-- 사건 특이사항 추가/수정 -->
     <insert   id="saveAffNoteLst" parameterType="map" >

        begin
            IF #{FLAG, jdbcType=VARCHAR} = 'D' THEN
                DELETE FROM TB_AC_AFFNOTE_LST
                 WHERE ROWID = chartorowid(#{ROW_ID, jdbcType=VARCHAR}) ;              
            ELSE         

            UPDATE TB_AC_AFFNOTE_LST
               SET        NOTE = #{NOTE, jdbcType=VARCHAR} , 
                   PRS_DT = NVL(SUBSTR(#{PRS_DT, jdbcType=VARCHAR},1,8), TRUNC(SYSDATE)) , 
                   EDT_USR = #{OPERATOR, jdbcType=VARCHAR} , 
                   EDT_DT = SYSDATE 
               where rowid = chartorowid(#{ROW_ID, jdbcType=VARCHAR});  
    
   
   
                  if sql%rowcount=0 then
                  
                  
                  INSERT INTO TB_AC_AFFNOTE_LST
                          (
                           BRCH_ID , 
                           AFF_SEQ , 
                           PRS_DT , 
                           PRS_SEQ,
                           NOTE , 
                           CRT_USR , 
                           CRT_DT , 
                           EDT_USR , 
                           EDT_DT )
                   VALUES (
                           #{BRCH_ID, jdbcType=VARCHAR} , 
                           #{AFF_SEQ, jdbcType=VARCHAR} , 
                           NVL(SUBSTR(#{PRS_DT, jdbcType=VARCHAR},1,8), TRUNC(SYSDATE)) , 
                           (SELECT NVL(MAX(PRS_SEQ),0) + 1
                              FROM TB_AC_AFFNOTE_LST
                             WHERE BRCH_ID = #{BRCH_ID, jdbcType=VARCHAR}
                               AND AFF_SEQ = #{AFF_SEQ, jdbcType=VARCHAR}
                               AND PRS_DT = SUBSTR(#{PRS_DT, jdbcType=VARCHAR},1,8)
                           ),
                           #{NOTE, jdbcType=VARCHAR} , 
                           #{OPERATOR, jdbcType=VARCHAR} , 
                           SYSDATE , 
                           #{OPERATOR, jdbcType=VARCHAR} , 
                           SYSDATE );               

                     end if;
               END IF;
            exception
                when others then
                    raise_application_error(-20501,'TB_AC_AFFNOTE_LST save error : ' ||SQLERRM);
            end;
        
    </insert> 

   <!-- 사건 채권사별 수수료 조회 -->
    <select id="selectChrgAmt" parameterType="map" resultType ="map">

        SELECT /* 대행수수료, 은행수수료*/
               NVL(CASE 
                    WHEN B.ZONE_GBN = '1' THEN A.BAG_AGC_AMT
                    WHEN B.ZONE_GBN = '2' THEN A.ETC_AGC_AMT
                    ELSE NULL
               END,'-99999') AS AGC_AMT,
               CASE 
                    WHEN NVL(B.CHRG_AMT,0) > NVL(MAX(C.AMT),0) THEN NVL(B.CHRG_AMT,0)
                    ELSE NVL(MAX(C.AMT),0)
               END AS CHRG_AMT
          FROM TB_CC_TIEUP_LST A, TB_CC_BOND_LST B, 
               (SELECT BRCH_ID, BND_SEQ, PAY_AMT AS AMT
                  FROM TB_AC_AFFAIRCHRG_LST
                 WHERE BRCH_ID =  #{BRCH_ID, jdbcType=VARCHAR}
                   AND AFF_SEQ = #{AFF_SEQ, jdbcType=VARCHAR}
                   AND BND_SEQ = #{BND_SEQ, jdbcType=VARCHAR}
               UNION ALL
               SELECT BRCH_ID, BND_SEQ, CHRG_AMT AS AMT
                  FROM TB_AC_AFFAIRPRS_LST
                 WHERE BRCH_ID =  #{BRCH_ID, jdbcType=VARCHAR}
                   AND AFF_SEQ = #{AFF_SEQ, jdbcType=VARCHAR}
                   AND DTL_SEQ = #{DTL_SEQ, jdbcType=VARCHAR}
                   AND BND_SEQ = #{BND_SEQ, jdbcType=VARCHAR}
               UNION ALL
               SELECT BRCH_ID, BND_SEQ, CHRG_AMT AS AMT
                  FROM TB_AC_AFFAIROUT_LST
                 WHERE BRCH_ID =  #{BRCH_ID, jdbcType=VARCHAR}
                   AND AFF_SEQ = #{AFF_SEQ, jdbcType=VARCHAR}
                   AND DTL_SEQ = #{DTL_SEQ, jdbcType=VARCHAR}
                   AND BND_SEQ = #{BND_SEQ, jdbcType=VARCHAR}
               ) C
          WHERE B.BRCH_ID = A.BRCH_ID
           AND B.BRCH_ID = C.BRCH_ID (+)
           AND B.BND_SEQ = C.BND_SEQ (+)
           AND B.BRCH_ID =  #{BRCH_ID, jdbcType=VARCHAR}
           AND A.TUB_SEQ =  #{TUB_SEQ, jdbcType=VARCHAR}
           AND B.BND_SEQ =  #{BND_SEQ, jdbcType=VARCHAR}     
      GROUP BY B.ZONE_GBN, A.BAG_AGC_AMT, A.ETC_AGC_AMT, B.CHRG_AMT

    </select>


   <!-- 사건 조회 -->
    <select id="selectAffairSearch" parameterType="map" resultType ="map">
      SELECT /* 사건 조회 */
              NVL(A.BRCH_ID,' ') AS  BRCH_ID,
              NVL(A.AFF_SEQ,'-99999') AS  AFF_SEQ,
              NVL(A.CLT_NM,' ') AS  CLT_NM,
              NVL(A.CLT_TEL,' ') AS  CLT_TEL,
              NVL(A.CLT_JMN,' ') AS  CLT_JMN,
              NVL(TO_CHAR(A.AFF_ST_DT,'YYYYMMDD'),' ') AS AFF_ST_DT ,
              NVL(TO_CHAR(A.AFF_ED_DT,'YYYYMMDD'),' ') AS AFF_ED_DT ,
              NVL(TO_CHAR(A.AFF_ETC_ED_DT,'YYYYMMDD'),' ') AS AFF_ETC_ED_DT ,
              NVL(FC_CC_GET_CODENAME('AD02',A.AFF_PRS_STS),' ') AS AFF_PRS_STS,
              NVL(A.TUB_NM,' ') AS  TUB_NM,
              NVL(A.CHG_NM,' ') AS  CHG_NM,        
              NVL(B.CHG_TEL,' ') AS  CHG_TEL,
              DECODE(B.TEL_OPN_YN,'Y','O','X') AS  TEL_OPN_YN                                                 
        FROM TB_AC_AFFAIR_MST A, TB_CC_TIEUPCHG_LST B, TB_CC_TIEUP_LST C
       WHERE A.BRCH_ID = B.BRCH_ID(+)
         AND A.BRCH_ID = C.BRCH_ID(+)
         AND A.TUB_SEQ = B.TUB_SEQ(+)
         AND A.TUB_SEQ = C.TUB_SEQ(+)
         AND A.CHG_SEQ = B.CHG_SEQ(+)
         AND A.BRCH_ID =  #{S_BRCH_ID, jdbcType=VARCHAR}
         AND (A.TUB_NM LIKE '%' || #{S_CLT_NM, jdbcType=VARCHAR} || '%' 
              OR A.CHG_NM LIKE '%' || #{S_CLT_NM, jdbcType=VARCHAR} || '%' 
              OR A.CLT_NM LIKE '%' || #{S_CLT_NM, jdbcType=VARCHAR} || '%'
              OR A.CLT_JMN LIKE '%' || #{S_CLT_NM, jdbcType=VARCHAR} || '%'
              OR A.TUB_TEL LIKE '%' || #{S_CLT_NM, jdbcType=VARCHAR} || '%'
              OR A.TUB_FAX LIKE '%' || #{S_CLT_NM, jdbcType=VARCHAR} || '%'
              OR C.RLT_NM LIKE '%' || #{S_CLT_NM, jdbcType=VARCHAR} || '%'
             )
         AND A.AFF_ST_DT BETWEEN TO_DATE(NVL(#{S_ST_DT, jdbcType=VARCHAR},'19000101')) AND TO_DATE(NVL(#{S_ED_DT, jdbcType=VARCHAR},'29991231')) + 0.99999  
       ORDER BY AFF_SEQ DESC

    </select>


   <!-- 사건 조회 팝업 -->
    <select id="selectAffairPopSearch" parameterType="map" resultType ="map">
      SELECT /* 사건 팝업 조회 */
              NVL(A.BRCH_ID,' ') AS  BRCH_ID,
              NVL(A.AFF_SEQ,'-99999') AS  AFF_SEQ,
              NVL(A.CLT_NM,' ') AS  CLT_NM,
              NVL(CASE 
                   WHEN NVL(B.TEL_OPN_YN, 'Y') = 'Y' THEN B.CHG_TEL
                   ELSE '개인의뢰'
              END ,' ') AS  CHG_TEL,
              NVL(A.CLT_JMN,' ') AS  CLT_JMN,
              NVL(FC_CC_GET_USRNAME(A.BRCH_ID, A.HNA_CHG_USR),' ') AS  HNA_CHG_USR,
              NVL(TO_CHAR(A.AFF_ST_DT,'YYYYMMDD'),' ') AS AFF_ST_DT ,
              NVL(TO_CHAR(A.AFF_ED_DT,'YYYYMMDD'),' ') AS AFF_ED_DT ,
              NVL(TO_CHAR(A.AFF_ETC_ED_DT,'YYYYMMDD'),' ') AS AFF_ETC_ED_DT ,
              NVL(FC_CC_GET_CODENAME('AD02',A.AFF_PRS_STS),' ') AS AFF_PRS_STS,
              NVL(CASE 
                   WHEN NVL(B.TEL_OPN_YN, 'Y') = 'Y' THEN NVL(A.TUB_NM,' ')
                   ELSE '비공개'
              END ,' ') AS  TUB_NM,
              NVL(A.CHG_NM,' ') AS  CHG_NM,        
              NVL(B.CHG_TEL,' ') AS  CHG_TEL,
              DECODE(B.TEL_OPN_YN,'Y','O','X') AS  TEL_OPN_YN                                                 
        FROM TB_AC_AFFAIR_MST A, TB_CC_TIEUPCHG_LST B, TB_CC_TIEUP_LST C, TB_AC_AFFAIR_DTL D
       WHERE A.BRCH_ID = B.BRCH_ID(+)
         AND A.BRCH_ID = D.BRCH_ID(+)
         AND A.BRCH_ID = C.BRCH_ID(+)
         AND A.TUB_SEQ = B.TUB_SEQ(+)
         AND A.TUB_SEQ = C.TUB_SEQ(+)
         AND A.CHG_SEQ = B.CHG_SEQ(+)
         AND A.AFF_SEQ = D.AFF_SEQ(+)
         AND A.BRCH_ID =  #{S_BRCH_ID, jdbcType=VARCHAR}
         AND A.CLT_NM LIKE '%'|| #{S_CLT_NM, jdbcType=VARCHAR} || '%'
         AND A.CLT_JMN LIKE '%' || #{S_CLT_JMN, jdbcType=VARCHAR} || '%'
         AND (D.REQ_BAR(+) = #{S_BAR_CODE, jdbcType=VARCHAR} OR D.BAR_1(+) = #{S_BAR_CODE, jdbcType=VARCHAR} OR D.BAR_2(+) = #{S_BAR_CODE, jdbcType=VARCHAR})
         AND A.AFF_ST_DT BETWEEN TO_DATE(NVL(#{S_ST_DT, jdbcType=VARCHAR},'19000101')) AND TO_DATE(NVL(#{S_ED_DT, jdbcType=VARCHAR},'29991231')) + 0.99999 
         
       ORDER BY AFF_SEQ DESC

    </select>



   <!-- 삭제대상 사건 조회 -->
    <select id="selectDelAffairSearch" parameterType="map" resultType ="map">
      SELECT /* 삭제대상 사건 조회 */
              ROWIDTOCHAR(A.ROWID) AS ROW_ID,
              NVL(A.BRCH_ID,' ') AS  BRCH_ID,
              NVL(A.AFF_SEQ,'-99999') AS  AFF_SEQ,
              NVL(A.CLT_NM,' ') AS  CLT_NM,
              NVL(A.CLT_TEL,' ') AS  CLT_TEL,
              NVL(A.CLT_JMN,' ') AS  CLT_JMN,
              NVL(TO_CHAR(A.AFF_ST_DT,'YYYYMMDD'),' ') AS AFF_ST_DT ,
              NVL(TO_CHAR(A.AFF_ED_DT,'YYYYMMDD'),' ') AS AFF_ED_DT ,
              NVL(TO_CHAR(A.AFF_ETC_ED_DT,'YYYYMMDD'),' ') AS AFF_ETC_ED_DT ,
              NVL(FC_CC_GET_CODENAME('AD02',A.AFF_PRS_STS),' ') AS AFF_PRS_STS,
              NVL(A.TUB_NM,' ') AS  TUB_NM,
              NVL(A.CHG_NM,' ') AS  CHG_NM,        
              NVL(B.CHG_TEL,' ') AS  CHG_TEL,
              DECODE(B.TEL_OPN_YN,'Y','O','X') AS  TEL_OPN_YN                                                 
        FROM TB_AC_AFFAIR_MST A, TB_CC_TIEUPCHG_LST B, TB_CC_TIEUP_LST C
       WHERE A.BRCH_ID = B.BRCH_ID(+)
         AND A.BRCH_ID = C.BRCH_ID(+)
         AND A.TUB_SEQ = B.TUB_SEQ(+)
         AND A.TUB_SEQ = C.TUB_SEQ(+)
         AND A.CHG_SEQ = B.CHG_SEQ(+)
         AND NVL(A.AFF_PRS_STS, '10') IN ('10', '90')
         AND A.BRCH_ID =  #{S_BRCH_ID, jdbcType=VARCHAR}
         AND (A.TUB_NM LIKE '%' || #{S_CLT_NM, jdbcType=VARCHAR} || '%' 
              OR A.CHG_NM LIKE '%' || #{S_CLT_NM, jdbcType=VARCHAR} || '%' 
              OR A.CLT_NM LIKE '%' || #{S_CLT_NM, jdbcType=VARCHAR} || '%'
              OR A.CLT_JMN LIKE '%' || #{S_CLT_NM, jdbcType=VARCHAR} || '%'
              OR A.TUB_TEL LIKE '%' || #{S_CLT_NM, jdbcType=VARCHAR} || '%'
              OR A.TUB_FAX LIKE '%' || #{S_CLT_NM, jdbcType=VARCHAR} || '%'
              OR C.RLT_NM LIKE '%' || #{S_CLT_NM, jdbcType=VARCHAR} || '%'
             )
         AND A.AFF_ST_DT BETWEEN TO_DATE(NVL(#{S_ST_DT, jdbcType=VARCHAR},'19000101')) AND TO_DATE(NVL(#{S_ED_DT, jdbcType=VARCHAR},'29991231')) + 0.99999   
       ORDER BY AFF_SEQ DESC

    </select>

   <!-- 사건특이사항 조회 -->
    <select id="selectAffTieupNoteOne" parameterType="map" resultType ="map">
      SELECT /* 사건 특이사항 */
              NVL(A.AFF_SEQ,'-99999') AS  AFF_SEQ,
              NVL(B.NOTE_SEQ,'-99999') AS  NOTE_SEQ,
              NVL(B.JOB_GBN,' ') AS  JOB_GBN,
              NVL(FC_CC_GET_CODENAME('CC07',B.NOTE_GBN),' ') AS NOTE_GBN,
              NVL(B.NOTE_DESC,' ') AS  NOTE_DESC                                                 
        FROM TB_AC_AFFAIR_MST A, TB_CC_TIEUPNOTE_LST B
       WHERE A.BRCH_ID = B.BRCH_ID
         AND A.TUB_SEQ = B.TUB_SEQ
           AND A.BRCH_ID =  #{S_BRCH_ID, jdbcType=VARCHAR}
           AND A.AFF_SEQ = #{S_AFF_SEQ, jdbcType=VARCHAR}
           AND B.JOB_GBN = #{S_JOB_GBN, jdbcType=VARCHAR}
       ORDER BY NOTE_GBN

    </select> 
    


   <!-- 사건특이사항 조회 -->
    <!-- 
    <select id="selectAffTieupNoteLst" parameterType="map" resultType ="map">
      SELECT /* 사건 특이사항 */
              NVL(A.AFF_SEQ,'-99999') AS  AFF_SEQ,
              NVL(B.NOTE_SEQ,'-99999') AS  NOTE_SEQ,
              NVL(B.JOB_GBN,' ') AS  JOB_GBN,
              NVL(FC_CC_GET_CODENAME('CC07',B.NOTE_GBN),' ') AS NOTE_GBN,
              NVL(B.NOTE_DESC,' ') AS  NOTE_DESC                                                 
        FROM TB_AC_AFFAIR_MST A, TB_CC_TIEUPNOTE_LST B, TB_CC_TIEUP_LST C
       WHERE A.BRCH_ID = B.BRCH_ID
         AND A.BRCH_ID = C.BRCH_ID
         AND A.TUB_SEQ = B.TUB_SEQ
         AND A.TUB_SEQ = C.TUB_SEQ
         AND A.BRCH_ID =  #{S_BRCH_ID, jdbcType=VARCHAR}
         AND B.JOB_GBN =  #{S_JOB_GBN, jdbcType=VARCHAR}
           AND (A.TUB_NM LIKE '%' || #{S_TUB_NM, jdbcType=VARCHAR} || '%' 
                OR A.CHG_NM LIKE '%' || #{S_TUB_NM, jdbcType=VARCHAR} || '%' 
                OR A.CLT_NM LIKE '%' || #{S_TUB_NM, jdbcType=VARCHAR} || '%'
                OR A.CLT_JMN LIKE '%' || #{S_TUB_NM, jdbcType=VARCHAR} || '%'
                OR A.CLT_TEL LIKE '%' || #{S_TUB_NM, jdbcType=VARCHAR} || '%'
                OR A.HNA_CHG_USR_NM LIKE '%' || #{S_TUB_NM, jdbcType=VARCHAR} || '%'
               OR A.TUB_TEL LIKE '%' || #{S_TUB_NM, jdbcType=VARCHAR} || '%'
               OR A.TUB_FAX LIKE '%' || #{S_TUB_NM, jdbcType=VARCHAR} || '%'
               OR C.RLT_NM LIKE '%' || #{S_TUB_NM, jdbcType=VARCHAR} || '%'   
               OR A.AFF_SEQ LIKE #{S_TUB_NM, jdbcType=VARCHAR} || '%'                
               )
           AND A.AFF_ST_DT BETWEEN TO_DATE(NVL(#{S_ST_DT, jdbcType=VARCHAR},'19000101')) AND TO_DATE(NVL(#{S_ED_DT, jdbcType=VARCHAR},'29991231')) + 0.99999
           AND A.AFF_PRS_STS LIKE  #{S_AFF_PRS_STS, jdbcType=VARCHAR} || '%'
       ORDER BY NOTE_GBN

    </select> 
     -->
    

   <!-- 내근업무일지 Tree 조회 N -->
    <select id="selectAffPrsNotTree" parameterType="map" resultType ="map">
      SELECT  /* 내근업무일지 Tree 조회 N */
              'N' AS FLAG,
              ' ' AS ROW_ID,
              '0' AS CHK,
              #{OPERATOR, jdbcType=VARCHAR} AS OPERATOR,
             NVL(A.BRCH_ID, ' ') AS BRCH_ID,
             NVL(A.AFF_SEQ, '-99999') AS AFF_SEQ,
             NVL(B.DTL_SEQ, '-99999') AS DTL_SEQ,
             NVL(A.CLT_NM, ' ') AS CLT_NM,
             NVL(A.CLT_JMN, ' ') AS CLT_JMN,
             NVL(C.BND_SEQ, '-99999') AS BND_SEQ,
             NVL(C.BND_NM, ' ') AS BND_NM,
             NVL(FC_CC_GET_CODENAME('AD03',B.BND_STS), ' ') AS BND_STS_NM
        FROM TB_AC_AFFAIR_MST A, 
           (SELECT BRCH_ID,
                   AFF_SEQ,
                   DTL_SEQ,
                   B.SEQ AS PRS_STEP,
                   CASE 
                        WHEN B.SEQ = 1 THEN NVL(BND_SEQ_1, REQ_BND_SEQ)
                        WHEN B.SEQ = 2 THEN BND_SEQ_2 
                   END AS BND_SEQ,
                   CASE 
                        WHEN B.SEQ = 1 THEN NVL(BND_NM_1, REQ_BND_NM)
                        WHEN B.SEQ = 2 THEN BND_NM_2 
                   END AS BND_NM,  
                   NVL(TO_CHAR(CASE 
                        WHEN B.SEQ = 1 THEN NVL(BAR_1, REQ_BAR)
                        WHEN B.SEQ = 2 THEN BAR_2 
                   END), ' ') AS BAR_CODE,                      
                    CASE 
                        WHEN B.SEQ = 1 AND BND_SEQ_1 IS NULL AND PRS_STS_1 IS NULL THEN  REQ_BND_STS
                        WHEN B.SEQ = 1 AND (BND_SEQ_1 IS NOT NULL OR  PRS_STS_1 IS NOT NULL) THEN  PRS_STS_1
                        WHEN B.SEQ = 2 THEN PRS_STS_2 
                   END AS BND_STS               
             FROM TB_AC_AFFAIR_DTL A, COPYT B
            WHERE B.SEQ BETWEEN 1 AND 2    
           ) B, TB_CC_BOND_LST C
       WHERE A.BRCH_ID = B.BRCH_ID
         AND A.BRCH_ID = C.BRCH_ID
         AND A.AFF_SEQ = B.AFF_SEQ
         AND B.BND_SEQ = C.BND_SEQ
         AND (A.AFF_PRS_STS = '10' AND (NVL(BND_STS, '100') in ('100','200'))  -- 서류등록 상태이면 공백/발급진행
              OR 
              (B.BND_STS = '380' )  -- 발급예정은 무조건
             )
           AND A.BRCH_ID =  #{S_BRCH_ID, jdbcType=VARCHAR}
           AND B.BND_NM LIKE '%' || #{S_BND_NM, jdbcType=VARCHAR} || '%' 
           AND A.CLT_NM LIKE '%' || #{S_CLT_NM, jdbcType=VARCHAR} || '%'
           AND B.BAR_CODE LIKE  #{S_BAR_CODE, jdbcType=VARCHAR} || '%' 
          
          ORDER BY A.AFF_ST_DT DESC, A.AFF_SEQ DESC,  B.DTL_SEQ

    </select> 
    
   <!-- 내근업무일지 한건 조회 N -->
    <select id="selectAffPrsNotOne" parameterType="map" resultType ="map">
      SELECT 'N' AS FLAG,
              ' ' AS ROW_ID,
              '0' AS CHK,
              #{OPERATOR, jdbcType=VARCHAR} AS OPERATOR,
             NVL(A.BRCH_ID, ' ') AS BRCH_ID,
             NVL(A.AFF_SEQ, '-99999') AS AFF_SEQ,
             NVL(B.DTL_SEQ, '-99999') AS DTL_SEQ,
             '-99999' AS STS_SEQ,
             NVL(C.ACP_MTD, ' ') AS ACP_MTD,
             TO_CHAR(SYSDATE,'YYYYMMDD') AS ACP_DT,
             NVL(A.CLT_NM, ' ') AS CLT_NM,
             NVL(A.CLT_JMN, ' ') AS CLT_JMN,
             NVL(B.PRS_STEP,'-99999') AS PRS_STEP,
             NVL(C.BND_SEQ, '-99999') AS BND_SEQ,
             NVL(C.BND_NM, ' ') AS BND_NM,
             NVL(FC_CC_GET_CODENAME('AD03',B.BND_STS), ' ') AS BND_STS_NM,
             '-99999' AS SPT_SEQ,
             ' ' AS SPT_NM,
             NVL(C.BND_TEL, ' ') AS BND_TEL,
             NVL(C.BND_FAX, ' ') AS BND_FAX,
             NVL(C.BND_ZIP, ' ') AS BND_ZIP,
             NVL(C.BND_ADDR, ' ') AS BND_ADDR,
             NVL(C.CHRG_AMT, '-99999') AS CHRG_AMT,
             ' ' AS PRS_NOTE,
             ' ' AS REGS_NO,
             NVL(A.PRS_CHG_USR, ' ') AS PRS_CHG_USR,
             '10' AS PRS_STS,
             NVL(FC_CC_GET_CODENAME('AD02',A.AFF_PRS_STS),' ') AS AFF_PRS_STS_NM,
             ' ' AS ACP_PLC_GBN                              
        FROM TB_AC_AFFAIR_MST A, 
             (SELECT BRCH_ID,
                   AFF_SEQ,
                   DTL_SEQ,
                   B.SEQ AS PRS_STEP,
                   CASE 
                        WHEN B.SEQ = 1 THEN NVL(BND_SEQ_1, REQ_BND_SEQ)
                        WHEN B.SEQ = 2 THEN BND_SEQ_2 
                   END AS BND_SEQ,
                   CASE 
                        WHEN B.SEQ = 1 THEN NVL(BND_NM_1, REQ_BND_NM)
                        WHEN B.SEQ = 2 THEN BND_NM_2 
                   END AS BND_NM,                   
                    CASE 
                        WHEN B.SEQ = 1 AND BND_SEQ_1 IS NULL AND PRS_STS_1 IS NULL THEN  REQ_BND_STS
                        WHEN B.SEQ = 1 AND (BND_SEQ_1 IS NOT NULL OR  PRS_STS_1 IS NOT NULL) THEN  PRS_STS_1
                        WHEN B.SEQ = 2 THEN PRS_STS_2 
                   END AS BND_STS               
             FROM TB_AC_AFFAIR_DTL A, COPYT B
            WHERE B.SEQ BETWEEN 1 AND 2    
           ) B, TB_CC_BOND_LST C
       WHERE A.BRCH_ID = B.BRCH_ID
         AND A.BRCH_ID = C.BRCH_ID
         AND A.AFF_SEQ = B.AFF_SEQ
         AND B.BND_SEQ = C.BND_SEQ
         AND A.BRCH_ID =  #{S_BRCH_ID, jdbcType=VARCHAR}
         AND A.AFF_SEQ =  #{S_AFF_SEQ, jdbcType=VARCHAR}
         AND B.DTL_SEQ =  #{S_DTL_SEQ, jdbcType=VARCHAR}
         AND B.BND_SEQ =  #{S_BND_SEQ, jdbcType=VARCHAR}
    </select>     
    
    
    
   <!-- 내근업무일지 Tree 조회 Y -->
    <select id="selectAffPrsYesTree" parameterType="map" resultType ="map">
      SELECT  /* 내근업무일지 Tree 조회 Y */
              'N' AS FLAG,
              ROWIDTOCHAR(A.ROWID) AS ROW_ID,
              '0' AS CHK,
              #{OPERATOR, jdbcType=VARCHAR} AS OPERATOR,
             NVL(A.BRCH_ID, ' ') AS BRCH_ID,
             NVL(A.AFF_SEQ, '-99999') AS AFF_SEQ,
             NVL(A.DTL_SEQ, '-99999') AS DTL_SEQ,
             NVL(A.STS_SEQ, '-99999') AS STS_SEQ,
             NVL(A.ACP_MTD, ' ') AS ACP_MTD,
             NVL(TO_CHAR(A.ACP_DT,'YYYYMMDD'), ' ') AS ACP_DT,
             NVL(A.CLT_NM, ' ') AS CLT_NM,
             NVL(A.CLT_JMN, ' ') AS CLT_JMN,
             NVL(A.PRS_STEP,'-99999') AS PRS_STEP,
             NVL(A.BND_SEQ, '-99999') AS BND_SEQ,
             NVL(A.BND_NM, ' ') AS BND_NM,
             NVL(A.SPT_SEQ, '-99999') AS SPT_SEQ,
             NVL(A.SPT_NM, ' ') AS SPT_NM,
             NVL(A.BND_TEL, ' ') AS BND_TEL,
             NVL(A.BND_FAX, ' ') AS BND_FAX,
             NVL(A.BND_ZIP, ' ') AS BND_ZIP,
             NVL(A.BND_ADDR, ' ') AS BND_ADDR,
             NVL(A.CHRG_AMT, '-99999') AS CHRG_AMT,
             NVL(A.PRS_STS, ' ') AS PRS_STS,
               NVL(A.PRS_NOTE, ' ') AS PRS_NOTE,
             NVL(A.REGS_NO, ' ') AS REGS_NO,
             NVL(A.PRS_CHG_USR, ' ') AS PRS_CHG_USR ,
             NVL(A.ACP_PLC_GBN, ' ') AS ACP_PLC_GBN             
        FROM TB_AC_AFFAIRPRS_LST A
       WHERE A.BRCH_ID =  #{S_BRCH_ID, jdbcType=VARCHAR}
           AND (A.BND_NM LIKE '%' || #{S_CLT_NM, jdbcType=VARCHAR} || '%' OR A.SPT_NM LIKE '%' || #{S_CLT_NM, jdbcType=VARCHAR} || '%' OR A.CLT_NM LIKE '%' || #{S_CLT_NM, jdbcType=VARCHAR} || '%')
           AND A.ACP_MTD LIKE  #{S_ACP_MTD, jdbcType=VARCHAR} || '%'
           AND NVL(A.PRS_STS, ' ') LIKE  #{S_PRS_STS, jdbcType=VARCHAR} || '%'
           AND A.ACP_DT BETWEEN TO_DATE(NVL(#{S_ST_DT, jdbcType=VARCHAR},'19000101')) AND TO_DATE(NVL(#{S_ED_DT, jdbcType=VARCHAR},'29991231')) + 0.99999
         ORDER BY ACP_DT DESC, A.AFF_SEQ DESC,  A.DTL_SEQ, A.STS_SEQ

    </select>     
    
    
    <!-- 내근업무일지 한건 조회 Y -->
    <select id="selectAffPrsYesOne" parameterType="map" resultType ="map">
      SELECT 'N' AS FLAG,
              ROWIDTOCHAR(A.ROWID) AS ROW_ID,
              '0' AS CHK,
              #{OPERATOR, jdbcType=VARCHAR} AS OPERATOR,
             NVL(A.BRCH_ID, ' ') AS BRCH_ID,
             NVL(A.AFF_SEQ, '-99999') AS AFF_SEQ,
             NVL(A.DTL_SEQ, '-99999') AS DTL_SEQ,
             NVL(A.STS_SEQ, '-99999') AS STS_SEQ,
             NVL(A.ACP_MTD, ' ') AS ACP_MTD,
             NVL(TO_CHAR(A.ACP_DT,'YYYYMMDD'), ' ') AS ACP_DT,
             NVL(A.CLT_NM, ' ') AS CLT_NM,
             NVL(A.CLT_JMN, ' ') AS CLT_JMN,
             NVL(A.PRS_STEP,'-99999') AS PRS_STEP,
             NVL(A.BND_SEQ, '-99999') AS BND_SEQ,
             NVL(A.BND_NM, ' ') AS BND_NM,
             NVL(A.SPT_SEQ, '-99999') AS SPT_SEQ,
             NVL(A.SPT_NM, ' ') AS SPT_NM,
             NVL(A.BND_TEL, ' ') AS BND_TEL,
             NVL(A.BND_FAX, ' ') AS BND_FAX,
             NVL(A.BND_ZIP, ' ') AS BND_ZIP,
             NVL(A.BND_ADDR, ' ') AS BND_ADDR,
             NVL(A.CHRG_AMT, '-99999') AS CHRG_AMT,
             NVL(A.PRS_STS, ' ') AS PRS_STS,
               NVL(A.PRS_NOTE, ' ') AS PRS_NOTE,
             NVL(A.REGS_NO, ' ') AS REGS_NO,
             NVL(A.PRS_CHG_USR, ' ') AS PRS_CHG_USR ,
             NVL(A.ACP_PLC_GBN, ' ') AS ACP_PLC_GBN             
        FROM TB_AC_AFFAIRPRS_LST A
       WHERE A.BRCH_ID =  #{S_BRCH_ID, jdbcType=VARCHAR}
         AND A.AFF_SEQ =  #{S_AFF_SEQ, jdbcType=VARCHAR}
         AND A.DTL_SEQ =  #{S_DTL_SEQ, jdbcType=VARCHAR}
         AND A.STS_SEQ =  #{S_STS_SEQ, jdbcType=VARCHAR}
    </select>        
    
     <!-- 사건 내근  추가/수정 -->
     <insert   id="saveAffairPrsLst" parameterType="map" >

          DECLARE 
                V_BND_NM VARCHAR2(100);
                V_NOTE_YN VARCHAR2(1);
                V_STS_SEQ NUMBER(7);
          begin
            IF #{FLAG, jdbcType=VARCHAR} = 'D' THEN
                DELETE FROM TB_AC_AFFAIRPRS_LST
                 WHERE ROWID = chartorowid(#{ROW_ID, jdbcType=VARCHAR}) ;              
            ELSE   

                -- 기존채권사 명칭이랑 비교
                BEGIN
                    SELECT BND_NM
                      INTO V_BND_NM
                      FROM TB_AC_AFFAIRPRS_LST
                     where STS_SEQ = #{STS_SEQ, jdbcType=VARCHAR}
                       and DTL_SEQ = #{DTL_SEQ, jdbcType=VARCHAR}
                       and BRCH_ID = #{BRCH_ID, jdbcType=VARCHAR}
                       and AFF_SEQ = #{AFF_SEQ, jdbcType=VARCHAR};      
                 exception
                    WHEN NO_DATA_FOUND THEN
                       V_BND_NM := NULL;
                    when others then
                        raise_application_error(-20501,'채권사명칭 비교 오류 save error : ' ||SQLERRM);
                 end; 


                UPDATE TB_AC_AFFAIRPRS_LST
                   SET ACP_DT = #{ACP_DT, jdbcType=VARCHAR} , 
                       ACP_MTD = #{ACP_MTD, jdbcType=VARCHAR} , 
                       CLT_NM = #{CLT_NM, jdbcType=VARCHAR} , 
                       CLT_JMN = #{CLT_JMN, jdbcType=VARCHAR} , 
                       PRS_STEP = #{PRS_STEP, jdbcType=VARCHAR} , 
                       BND_SEQ = #{BND_SEQ, jdbcType=VARCHAR} , 
                       BND_NM = #{BND_NM, jdbcType=VARCHAR} , 
                       BND_TEL = #{BND_TEL, jdbcType=VARCHAR} , 
                       BND_FAX = #{BND_FAX, jdbcType=VARCHAR} , 
                       BND_ADDR = #{BND_ADDR, jdbcType=VARCHAR} , 
                       BND_ZIP = #{BND_ZIP, jdbcType=VARCHAR} , 
                       CHRG_AMT = #{CHRG_AMT, jdbcType=VARCHAR} , 
                       PRS_CHG_USR = #{PRS_CHG_USR, jdbcType=VARCHAR} , 
                       SPT_SEQ = #{SPT_SEQ, jdbcType=VARCHAR} , 
                       SPT_NM = #{SPT_NM, jdbcType=VARCHAR} , 
                       REGS_NO = #{REGS_NO, jdbcType=VARCHAR} , 
                       PRS_STS = #{PRS_STS, jdbcType=VARCHAR} , 
                       PRS_NOTE = #{PRS_NOTE, jdbcType=VARCHAR} , 
                       SORT_NO = #{SORT_NO, jdbcType=VARCHAR} , 
                       RMT_BNK_NM = #{RMT_BNK_NM, jdbcType=VARCHAR} , 
                       ACP_PLC_GBN = #{ACP_PLC_GBN, jdbcType=VARCHAR} , 
                       EDT_USR = #{OPERATOR, jdbcType=VARCHAR} , 
                       EDT_DT = SYSDATE             
                 where STS_SEQ = #{STS_SEQ, jdbcType=VARCHAR}
                   and DTL_SEQ = #{DTL_SEQ, jdbcType=VARCHAR}
                   and BRCH_ID = #{BRCH_ID, jdbcType=VARCHAR}
                   and AFF_SEQ = #{AFF_SEQ, jdbcType=VARCHAR};
        
                      if sql%rowcount=0 then
                      
                      BEGIN
                          SELECT NVL(MAX(STS_SEQ),0) + 1 
                            INTO V_STS_SEQ
                            FROM TB_AC_AFFAIRPRS_LST 
                           WHERE BRCH_ID = #{BRCH_ID, jdbcType=VARCHAR}
                             AND AFF_SEQ =  #{AFF_SEQ, jdbcType=VARCHAR} 
                             AND DTL_SEQ = #{DTL_SEQ, jdbcType=VARCHAR};
                      
                          
                          INSERT INTO TB_AC_AFFAIRPRS_LST
                                  (
                                   BRCH_ID , 
                                   AFF_SEQ , 
                                   DTL_SEQ , 
                                   STS_SEQ , 
                                   ACP_DT , 
                                   ACP_MTD , 
                                   CLT_NM , 
                                   CLT_JMN , 
                                   PRS_STEP , 
                                   BND_SEQ , 
                                   BND_NM , 
                                   BND_TEL , 
                                   BND_FAX , 
                                   BND_ADDR , 
                                   BND_ZIP , 
                                   CHRG_AMT , 
                                   PRS_CHG_USR , 
                                   SPT_SEQ , 
                                   SPT_NM , 
                                   REGS_NO , 
                                   PRS_STS , 
                                   PRS_NOTE , 
                                   SORT_NO , 
                                   RMT_BNK_NM ,
                                   ACP_PLC_GBN, 
                                   CRT_USR , 
                                   CRT_DT , 
                                   EDT_USR , 
                                   EDT_DT)
                           VALUES (
                                   #{BRCH_ID, jdbcType=VARCHAR} , 
                                   #{AFF_SEQ, jdbcType=VARCHAR} , 
                                   #{DTL_SEQ, jdbcType=VARCHAR} , 
                                   V_STS_SEQ,
                                   #{ACP_DT, jdbcType=VARCHAR} , 
                                   #{ACP_MTD, jdbcType=VARCHAR} , 
                                   #{CLT_NM, jdbcType=VARCHAR} , 
                                   #{CLT_JMN, jdbcType=VARCHAR} , 
                                   #{PRS_STEP, jdbcType=VARCHAR} , 
                                   #{BND_SEQ, jdbcType=VARCHAR} , 
                                   #{BND_NM, jdbcType=VARCHAR} , 
                                   #{BND_TEL, jdbcType=VARCHAR} , 
                                   #{BND_FAX, jdbcType=VARCHAR} , 
                                   #{BND_ADDR, jdbcType=VARCHAR} , 
                                   #{BND_ZIP, jdbcType=VARCHAR} , 
                                   #{CHRG_AMT, jdbcType=VARCHAR} , 
                                   #{PRS_CHG_USR, jdbcType=VARCHAR} , 
                                   #{SPT_SEQ, jdbcType=VARCHAR} , 
                                   #{SPT_NM, jdbcType=VARCHAR} , 
                                   #{REGS_NO, jdbcType=VARCHAR} , 
                                   #{PRS_STS, jdbcType=VARCHAR} , 
                                   #{PRS_NOTE, jdbcType=VARCHAR} , 
                                   #{SORT_NO, jdbcType=VARCHAR} , 
                                   #{RMT_BNK_NM, jdbcType=VARCHAR} , 
                                   #{ACP_PLC_GBN, jdbcType=VARCHAR} ,
                                   #{OPERATOR, jdbcType=VARCHAR} , 
                                   SYSDATE , 
                                   #{OPERATOR, jdbcType=VARCHAR} , 
                                   SYSDATE );  
                           
                           
                                   V_NOTE_YN := 'Y';
                           
                           
                           END;          
                      ELSE
                        
                        V_NOTE_YN := 'N';
                      
                      end if;
            
            
                    -- 추가모드이고 특이사항이 있으면 사건진행 특이사항에 첫행 넣는다.
                    IF V_NOTE_YN = 'Y' AND #{PRS_NOTE, jdbcType=VARCHAR} IS NOT NULL THEN

                      INSERT INTO TB_AC_AFFAIRPRSNOTE_LST
                              (
                               BRCH_ID , 
                               AFF_SEQ , 
                               DTL_SEQ , 
                               STS_SEQ , 
                               PRS_SEQ,
                               PRS_DT , 
                               NOTE , 
                               CRT_USR , 
                               CRT_DT , 
                               EDT_USR , 
                               EDT_DT )
                       VALUES (
                               #{BRCH_ID, jdbcType=VARCHAR} , 
                               #{AFF_SEQ, jdbcType=VARCHAR} , 
                               #{DTL_SEQ, jdbcType=VARCHAR} , 
                               V_STS_SEQ , 
                               1,                           
                               #{ACP_DT, jdbcType=VARCHAR} , 
                               #{PRS_NOTE, jdbcType=VARCHAR} , 
                               #{OPERATOR, jdbcType=VARCHAR} , 
                               SYSDATE , 
                               #{OPERATOR, jdbcType=VARCHAR} , 
                               SYSDATE );   

                    END IF;
            
            
            
            END IF;
            
 
            
             
             IF NVL(V_BND_NM, ' ') != #{BND_NM, jdbcType=VARCHAR}  THEN 
               
                -- 사건디테일
                UPDATE TB_AC_AFFAIR_DTL 
                   SET BND_SEQ_1 = DECODE(#{PRS_STEP, jdbcType=VARCHAR},'1', #{BND_SEQ, jdbcType=VARCHAR}, BND_SEQ_1),     -- 의뢰채권사만 있고 진행1이 없을 경우 넣기 
                       BND_SEQ_2 = DECODE(#{PRS_STEP, jdbcType=VARCHAR},'2', #{BND_SEQ, jdbcType=VARCHAR}, BND_SEQ_2),     
                       BND_NM_1 = DECODE(#{PRS_STEP, jdbcType=VARCHAR},'1', #{BND_NM, jdbcType=VARCHAR}, BND_NM_1),     -- 의뢰채권사만 있고 진행1이 없을 경우 넣기 
                       BND_NM_2 = DECODE(#{PRS_STEP, jdbcType=VARCHAR},'2', #{BND_NM, jdbcType=VARCHAR}, BND_NM_2),    
                       EDT_USR = #{OPERATOR, jdbcType=VARCHAR} , 
                       EDT_DT = SYSDATE 
                WHERE BRCH_ID = #{BRCH_ID, jdbcType=VARCHAR} 
                  AND AFF_SEQ = #{AFF_SEQ, jdbcType=VARCHAR} 
                  AND DTL_SEQ = #{DTL_SEQ, jdbcType=VARCHAR}
                ;
                
                  
           END IF;
                
    

           -- 고객정보 갱신 여기 있는게 최종 정보니깐 무조건 갱신한다.
           UPDATE TB_AC_AFFAIR_MST
              SET CLT_NM = #{CLT_NM, jdbcType=VARCHAR} , 
                  CLT_JMN = #{CLT_JMN, jdbcType=VARCHAR} , 
                  EDT_USR = #{OPERATOR, jdbcType=VARCHAR} , 
                  EDT_DT = SYSDATE                    
            WHERE BRCH_ID = #{BRCH_ID, jdbcType=VARCHAR} 
              AND AFF_SEQ = #{AFF_SEQ, jdbcType=VARCHAR};
              
              
            -- 사건진행이면 사건진행현황에도 사건진행 갱신
            IF  #{PRS_STS, jdbcType=VARCHAR} = '200' THEN
                 UPDATE TB_AC_AFFAIR_DTL 
                   SET PRS_STS_1 = DECODE(#{PRS_STEP, jdbcType=VARCHAR},'1', #{PRS_STS, jdbcType=VARCHAR}, PRS_STS_1),     
                       PRS_STS_2 = DECODE(#{PRS_STEP, jdbcType=VARCHAR},'2', #{PRS_STS, jdbcType=VARCHAR}, PRS_STS_2),     
                       EDT_USR = #{OPERATOR, jdbcType=VARCHAR} , 
                       EDT_DT = SYSDATE 
                WHERE BRCH_ID = #{BRCH_ID, jdbcType=VARCHAR} 
                  AND AFF_SEQ = #{AFF_SEQ, jdbcType=VARCHAR} 
                  AND DTL_SEQ = #{DTL_SEQ, jdbcType=VARCHAR}
                ;           
            
            END IF; 
                  

            exception
                when others then
                    raise_application_error(-20501,'TB_AC_AFFAIRPRS_LST save error : ' ||SQLERRM);
            end;
        
    </insert> 

   <!-- 내근업무일지 삭제 -->
    <delete   id="deleteAffairPrsLst" parameterType="map" >
          DECLARE
                V_BRCH_ID VARCHAR2(3);
                V_AFF_SEQ NUMBER(10);
                V_DTL_SEQ NUMBER(5);
                V_BND_SEQ NUMBER(5);
          
          BEGIN
             
             BEGIN
	             SELECT BRCH_ID,
	                    AFF_SEQ,
	                    DTL_SEQ,
	                    BND_SEQ
	               INTO V_BRCH_ID,
	                    V_AFF_SEQ,
	                    V_DTL_SEQ,
	                    V_BND_SEQ
	               FROM TB_AC_AFFAIRPRS_LST
	              WHERE ROWID = chartorowid(#{ROW_ID, jdbcType=VARCHAR});
             exception
                    WHEN NO_DATA_FOUND THEN
                       raise_application_error(-20501,'취소할 사건 상세정보 누락');
                    when others then
                        raise_application_error(-20501,'취소할 사건 상세정보 누락 save error : ' ||SQLERRM);
             end; 

             -- 사건진행에서 수수료, 채권사 상태 초기화 
            UPDATE TB_AC_AFFAIR_DTL
               SET PRS_STS_1 = (CASE WHEN BND_SEQ_1 = V_BND_SEQ THEN NULL ELSE PRS_STS_1 END),
                   PRS_STS_2 = (CASE WHEN BND_SEQ_2 = V_BND_SEQ THEN NULL ELSE PRS_STS_2 END),
                   BNK_CHRG = NULL,
                   AGC_CHRG = NULL,
                   EDT_USR = #{OPERATOR, jdbcType=VARCHAR} , 
                    EDT_DT = SYSDATE                    
	          WHERE BRCH_ID = V_BRCH_ID
	            AND AFF_SEQ = V_AFF_SEQ
	            AND DTL_SEQ = V_DTL_SEQ;  


            -- 발급진행 특이사항 삭제                
             DELETE FROM TB_AC_AFFAIRPRSNOTE_LST A
              WHERE (BRCH_ID, AFF_SEQ, DTL_SEQ, STS_SEQ) IN 
                 (SELECT BRCH_ID, AFF_SEQ, DTL_SEQ, STS_SEQ
                    FROM TB_AC_AFFAIRPRS_LST
                   WHERE ROWID = chartorowid(#{ROW_ID, jdbcType=VARCHAR})   
                 );
                 
                

             -- 내근 진행 삭제 
             DELETE FROM TB_AC_AFFAIRPRS_LST
              WHERE ROWID = chartorowid(#{ROW_ID, jdbcType=VARCHAR});   
        exception
            when others then
                raise_application_error(-20501,'TB_AC_AFFAIRPRS_LST save error : ' ||SQLERRM);
        end;  
   
    </delete>
 





   <!-- 내근업무일지 채권사지점 -->
    <select id="selectAffPrsSpotLst" parameterType="map" resultType ="map">
      SELECT /* 채권사 지점 */
             NVL(A.BRCH_ID, ' ') AS BRCH_ID,             
             NVL(C.BND_SEQ, '-99999') AS BND_SEQ,
             NVL(C.SPT_SEQ, '-99999') AS SPT_SEQ,
             NVL(C.SPT_NM, ' ') AS SPT_NM,
             NVL(C.ACP_MTD, ' ') AS ACP_MTD,
             NVL(C.SPT_TEL, ' ') AS SPT_TEL,
             NVL(C.SPT_FAX, ' ') AS SPT_FAX    
        FROM TB_AC_AFFAIR_MST A,
             (SELECT BRCH_ID,
                   AFF_SEQ,
                   DTL_SEQ,
                   B.SEQ AS PRS_STEP,
                   CASE 
                        WHEN B.SEQ = 1 THEN NVL(BND_SEQ_1, REQ_BND_SEQ)
                        WHEN B.SEQ = 2 THEN BND_SEQ_2 
                   END AS BND_SEQ,
                   CASE 
                        WHEN B.SEQ = 1 THEN NVL(BND_NM_1, REQ_BND_NM)
                        WHEN B.SEQ = 2 THEN BND_NM_2 
                   END AS BND_NM,                   
                    CASE 
                        WHEN B.SEQ = 1 AND BND_SEQ_1 IS NULL AND PRS_STS_1 IS NULL THEN  REQ_BND_STS
                        WHEN B.SEQ = 1 AND (BND_SEQ_1 IS NOT NULL OR  PRS_STS_1 IS NOT NULL) THEN  PRS_STS_1
                        WHEN B.SEQ = 2 THEN PRS_STS_2 
                   END AS BND_STS               
             FROM TB_AC_AFFAIR_DTL A, COPYT B
            WHERE B.SEQ BETWEEN 1 AND 2    
           ) B,  TB_CC_BONDSPOT_LST C
       WHERE A.BRCH_ID = B.BRCH_ID
         AND A.BRCH_ID = C.BRCH_ID
         AND B.BND_SEQ = C.BND_SEQ
         AND A.AFF_SEQ = B.AFF_SEQ
         AND A.BRCH_ID =  #{S_BRCH_ID, jdbcType=VARCHAR}
         AND A.AFF_SEQ =  #{S_AFF_SEQ, jdbcType=VARCHAR}
         AND B.DTL_SEQ =  #{S_DTL_SEQ, jdbcType=VARCHAR}
         AND B.BND_SEQ =  #{S_BND_SEQ, jdbcType=VARCHAR}
        GROUP BY NVL(A.BRCH_ID, ' ') ,   
             NVL(C.BND_SEQ, '-99999') ,
             NVL(C.SPT_SEQ, '-99999') ,
             NVL(C.SPT_NM, ' ') ,
             NVL(C.ACP_MTD, ' ') ,
             NVL(C.SPT_TEL, ' ') ,
             NVL(C.SPT_FAX, ' ') 
       ORDER BY  NVL(C.BND_SEQ, '-99999') ,
             NVL(C.SPT_SEQ, '-99999') 

    </select> 
    
   <!-- 내근특이사항 조회 -->
    <select id="selectAffPrsNoteLst" parameterType="map" resultType ="map">
      SELECT 'N' AS FLAG,
              ROWIDTOCHAR(B.ROWID) AS ROW_ID,
              '0' AS CHK,
              #{OPERATOR, jdbcType=VARCHAR} AS OPERATOR,
             NVL(A.BRCH_ID, ' ') AS BRCH_ID,
             NVL(A.AFF_SEQ, '-99999') AS AFF_SEQ,
             NVL(A.DTL_SEQ, '-99999') AS DTL_SEQ,
             NVL(A.STS_SEQ, '-99999') AS STS_SEQ,
             NVL(B.PRS_SEQ, '-99999') AS PRS_SEQ,
             NVL(TO_CHAR(B.PRS_DT,'YYYYMMDD'), ' ') AS PRS_DT,
             B.EDT_USR AS USR_ID,
             NVL(FC_CC_GET_USRNAME(B.BRCH_ID, B.EDT_USR), ' ') AS USR_NM  ,
             NVL(B.NOTE, ' ') AS NOTE
        FROM TB_AC_AFFAIRPRS_LST A, TB_AC_AFFAIRPRSNOTE_LST B
       WHERE A.BRCH_ID = B.BRCH_ID
         AND A.AFF_SEQ = B.AFF_SEQ
         AND A.DTL_SEQ = B.DTL_SEQ
         AND A.STS_SEQ = B.STS_SEQ
         AND A.BRCH_ID =  #{S_BRCH_ID, jdbcType=VARCHAR}
         AND A.AFF_SEQ =  #{S_AFF_SEQ, jdbcType=VARCHAR}
         AND A.DTL_SEQ =  #{S_DTL_SEQ, jdbcType=VARCHAR}
         AND A.STS_SEQ =  #{S_STS_SEQ, jdbcType=VARCHAR}
         ORDER BY A.AFF_SEQ,  A.DTL_SEQ, B.STS_SEQ, B.PRS_DT, B.PRS_SEQ

    </select>     
       

   <!-- 내근특이사항 팝업 조회 -->
    <select id="selectAffPrsNotePop" parameterType="map" resultType ="map">
      SELECT NVL(TO_CHAR(B.PRS_DT,'YYYYMMDD'), ' ') AS PRS_DT,
             NVL(B.NOTE, ' ') AS NOTE
        FROM TB_AC_AFFAIRPRS_LST A, TB_AC_AFFAIRPRSNOTE_LST B
       WHERE A.BRCH_ID = B.BRCH_ID
         AND A.AFF_SEQ = B.AFF_SEQ
         AND A.DTL_SEQ = B.DTL_SEQ
         AND A.STS_SEQ = B.STS_SEQ
         AND A.BRCH_ID =  #{S_BRCH_ID, jdbcType=VARCHAR}
         AND A.AFF_SEQ =  #{S_AFF_SEQ, jdbcType=VARCHAR}
         AND A.BND_SEQ =  #{S_BND_SEQ, jdbcType=VARCHAR}
         ORDER BY  B.PRS_DT, B.PRS_SEQ

    </select>           
    

     <!-- 사건 발급진행내역 추가/수정 -->
     <insert   id="saveAffairPrsNoteLst" parameterType="map" >

        begin
            IF #{FLAG, jdbcType=VARCHAR} = 'D' THEN
                DELETE FROM TB_AC_AFFAIRPRSNOTE_LST
                 WHERE ROWID = chartorowid(#{ROW_ID, jdbcType=VARCHAR}) ;              
            ELSE         

            UPDATE TB_AC_AFFAIRPRSNOTE_LST
               SET PRS_DT = NVL(SUBSTR(#{PRS_DT, jdbcType=VARCHAR},1,8), TRUNC(SYSDATE)) ,
                   NOTE = #{NOTE, jdbcType=VARCHAR} , 
                   EDT_USR = #{OPERATOR, jdbcType=VARCHAR} , 
                   EDT_DT = SYSDATE 
             where rowid = chartorowid(#{ROW_ID, jdbcType=VARCHAR}); 
    
                  if sql%rowcount=0 then
                  
                  
                  INSERT INTO TB_AC_AFFAIRPRSNOTE_LST
                          (
                           BRCH_ID , 
                           AFF_SEQ , 
                           DTL_SEQ , 
                           STS_SEQ , 
                           PRS_SEQ,
                           PRS_DT , 
                           NOTE , 
                           CRT_USR , 
                           CRT_DT , 
                           EDT_USR , 
                           EDT_DT )
                   VALUES (
                           #{BRCH_ID, jdbcType=VARCHAR} , 
                           #{AFF_SEQ, jdbcType=VARCHAR} , 
                           #{DTL_SEQ, jdbcType=VARCHAR} , 
                           #{STS_SEQ, jdbcType=VARCHAR} , 
                           (SELECT NVL(MAX(PRS_SEQ),0) + 1
                              FROM TB_AC_AFFAIRPRSNOTE_LST
                             WHERE BRCH_ID = #{BRCH_ID, jdbcType=VARCHAR}
                               AND AFF_SEQ = #{AFF_SEQ, jdbcType=VARCHAR}
                               AND DTL_SEQ = #{DTL_SEQ, jdbcType=VARCHAR}
                               AND STS_SEQ = #{STS_SEQ, jdbcType=VARCHAR}
                           ),                           
                           SUBSTR(#{PRS_DT, jdbcType=VARCHAR}, 1, 8) , 
                           #{NOTE, jdbcType=VARCHAR} , 
                           #{OPERATOR, jdbcType=VARCHAR} , 
                           SYSDATE , 
                           #{OPERATOR, jdbcType=VARCHAR} , 
                           SYSDATE );      

                     end if;
               END IF;
            exception
                when others then
                    raise_application_error(-20501,'TB_AC_AFFAIRPRSNOTE_LST save error : ' ||SQLERRM);
            end;
        
    </insert> 

   <!-- 접수지연내역 조회 -->
    <select id="selectAffDelayLst" parameterType="map" resultType ="map" >
      SELECT 'N' AS FLAG,
              ROWIDTOCHAR(A.ROWID) AS ROW_ID,
              '0' AS CHK,
              #{OPERATOR, jdbcType=VARCHAR} AS OPERATOR,
             NVL(A.BRCH_ID, ' ') AS BRCH_ID,
             NVL(A.AFF_SEQ, '-99999') AS AFF_SEQ,
             NVL(A.DTL_SEQ, '-99999') AS DTL_SEQ,
             NVL(A.STS_SEQ, '-99999') AS STS_SEQ,
             NVL(TO_CHAR(A.ACP_DT,'YYYYMMDD'), ' ') AS ACP_DT,
             NVL(A.CLT_NM, ' ') AS CLT_NM,
             NVL(A.BND_NM, ' ') AS BND_NM,
             NVL(A.ACP_MTD, ' ') AS ACP_MTD    
        FROM TB_AC_AFFAIRPRS_LST A
       WHERE A.BRCH_ID =  #{S_BRCH_ID, jdbcType=VARCHAR}
           AND A.ACP_MTD LIKE  #{S_ACP_MTD, jdbcType=VARCHAR} || '%'
           AND (SYSDATE - ACP_DT >= 3)  -- 3일 이하는 다 보여짐
           AND NVL(PRS_STS,'100') = '100'
         ORDER BY A.ACP_DT,  A.CLT_NM, A.BND_NM

    </select> 


   <!-- 외근업무일지 조회 N -->
    <select id="selectAffOutNotLst" parameterType="map" resultType ="map">
      SELECT 'N' AS FLAG,
              ' ' AS ROW_ID,
              '0' AS CHK,
              #{OPERATOR, jdbcType=VARCHAR} AS OPERATOR,
             NVL(A.BRCH_ID, ' ') AS BRCH_ID,
             NVL(A.AFF_SEQ, '-99999') AS AFF_SEQ,
             NVL(B.DTL_SEQ, '-99999') AS DTL_SEQ,
             '-99999' AS STS_SEQ,
             ' ' AS ACP_DT,
             ' ' AS OUT_CHG_USR,
             NVL(A.CLT_NM, ' ') AS CLT_NM,
             NVL(A.CLT_JMN, ' ') AS CLT_JMN,
             NVL(B.PRS_STEP,'-99999') AS PRS_STEP,
             NVL(C.BND_SEQ, '-99999') AS BND_SEQ,
             NVL(C.BND_NM, ' ') AS BND_NM,
             '0' AS OSU_BNK,
             '0' AS OSU_CARD,
             '0' AS OSU_CEX,
             '0' AS OSU_BEX,
             NVL(C.CHRG_AMT, '-99999') AS CHRG_AMT,
             NVL(A.PRS_CHG_USR, ' ') AS PRS_CHG_USR,
             '10' AS PRS_STS,
             ' ' AS PRS_NOTE,
             ' ' AS ISU_EXP_DT,
             '-99999' AS SORT_NO,
             NVL(A.AFF_PRS_STS,' ') AS AFF_PRS_STS,
             NVL(FC_CC_GET_CODENAME('AD02',A.AFF_PRS_STS),' ') AS AFF_PRS_STS_NM,
             '접수' AS BTN              
        FROM TB_AC_AFFAIR_MST A, 
        (SELECT BRCH_ID,
                 AFF_SEQ,
                 DTL_SEQ,
                 B.SEQ AS PRS_STEP,
                 CASE 
                      WHEN B.SEQ = 1 THEN NVL(BND_SEQ_1, REQ_BND_SEQ)
                      WHEN B.SEQ = 2 THEN BND_SEQ_2 
                 END AS BND_SEQ,
                 CASE 
                      WHEN B.SEQ = 1 THEN NVL(BND_NM_1, REQ_BND_NM)
                      WHEN B.SEQ = 2 THEN BND_NM_2 
                 END AS BND_NM,                 
                  CASE 
                        WHEN B.SEQ = 1 AND BND_SEQ_1 IS NULL AND PRS_STS_1 IS NULL THEN  REQ_BND_STS
                        WHEN B.SEQ = 1 AND (BND_SEQ_1 IS NOT NULL OR  PRS_STS_1 IS NOT NULL) THEN  PRS_STS_1
                        WHEN B.SEQ = 2 THEN PRS_STS_2 
                 END AS BND_STS 
           FROM TB_AC_AFFAIR_DTL A, COPYT B
          WHERE B.SEQ BETWEEN 1 AND 2    
        ) B, TB_CC_BOND_LST C
       WHERE A.BRCH_ID = B.BRCH_ID
         AND A.BRCH_ID = C.BRCH_ID
         AND A.AFF_SEQ = B.AFF_SEQ
         AND B.BND_SEQ = C.BND_SEQ
         AND (A.AFF_PRS_STS = '10' AND (NVL(BND_STS, '100') in ('100','200'))  -- 서류등록 상태이면 공백/발급진행
              OR 
              (B.BND_STS = '380' )  -- 발급예정은 무조건
             )
           AND A.BRCH_ID =  #{S_BRCH_ID, jdbcType=VARCHAR}
           AND B.BND_NM LIKE  #{S_BND_NM, jdbcType=VARCHAR} || '%' 
           AND A.CLT_NM LIKE  #{S_CLT_NM, jdbcType=VARCHAR} || '%'
         ORDER BY A.AFF_ST_DT DESC, A.AFF_SEQ DESC,  B.DTL_SEQ, B.PRS_STEP

    </select> 
    
   <!-- 외근업무일지 조회 Y -->
    <select id="selectAffOutYesLst" parameterType="map" resultType ="map">
      SELECT 'N' AS FLAG,
              ROWIDTOCHAR(A.ROWID) AS ROW_ID,
              '0' AS CHK,
              #{OPERATOR, jdbcType=VARCHAR} AS OPERATOR,
             NVL(A.BRCH_ID, ' ') AS BRCH_ID,
             NVL(A.AFF_SEQ, '-99999') AS AFF_SEQ,
             NVL(A.DTL_SEQ, '-99999') AS DTL_SEQ,
             NVL(A.STS_SEQ, '-99999') AS STS_SEQ,
             NVL(TO_CHAR(A.ACP_DT,'YYYYMMDD'),' ') AS ACP_DT,
             NVL(A.OUT_CHG_USR,' ') AS OUT_CHG_USR,
             NVL(A.CLT_NM, ' ') AS CLT_NM,
             NVL(A.CLT_JMN, ' ') AS CLT_JMN,
             NVL(A.PRS_STEP,'-99999') AS PRS_STEP,
             NVL(A.BND_SEQ, '-99999') AS BND_SEQ,
             NVL(A.BND_NM, ' ') AS BND_NM,
             decode(A.OSU_BNK,'Y',1,0) AS OSU_BNK,
             decode(A.OSU_CARD,'Y',1,0) AS OSU_CARD,
             decode(A.OSU_CEX,'Y',1,0) AS OSU_CEX,
             decode(A.OSU_BEX,'Y',1,0) AS OSU_BEX,
             NVL(A.CHRG_AMT, '-99999') AS CHRG_AMT,
             NVL(A.PRS_CHG_USR, ' ') AS PRS_CHG_USR,
             NVL(A.PRS_STS, ' ') AS PRS_STS,
             NVL(A.PRS_NOTE, ' ') AS PRS_NOTE,
             NVL(TO_CHAR(A.ISU_EXP_DT,'YYYYMMDD'), ' ') AS ISU_EXP_DT,
             NVL(A.SORT_NO, '-99999') AS SORT_NO,
             '취소' AS BTN          
        FROM TB_AC_AFFAIROUT_LST A
       WHERE A.BRCH_ID =  #{S_BRCH_ID, jdbcType=VARCHAR}
           AND A.OUT_CHG_USR =  #{S_PRS_CHG_USR, jdbcType=VARCHAR}
           AND A.ACP_DT BETWEEN  #{S_ACP_DT, jdbcType=VARCHAR} AND TO_DATE(#{S_ACP_DT, jdbcType=VARCHAR}) + 0.99999
         ORDER BY SORT_NO

    </select>   


     <!-- 사건 외근  추가/수정 -->
     <insert   id="saveAffairOutLst" parameterType="map" >
     DECLARE
        V_AGC_CHRG NUMBER(10);
        V_BND_NM VARCHAR2(100);
                
        
        begin
            IF #{FLAG, jdbcType=VARCHAR} = 'D' THEN
                DELETE FROM TB_AC_AFFAIROUT_LST
                 WHERE ROWID = chartorowid(#{ROW_ID, jdbcType=VARCHAR}) ;              
            ELSE         

                -- 기존채권사 명칭이랑 비교
                BEGIN
                    SELECT BND_NM
                      INTO V_BND_NM
                      FROM TB_AC_AFFAIRPRS_LST
                     where STS_SEQ = #{STS_SEQ, jdbcType=VARCHAR}
                       and DTL_SEQ = #{DTL_SEQ, jdbcType=VARCHAR}
                       and BRCH_ID = #{BRCH_ID, jdbcType=VARCHAR}
                       and AFF_SEQ = #{AFF_SEQ, jdbcType=VARCHAR};      
                 exception
                    WHEN NO_DATA_FOUND THEN
                       V_BND_NM := NULL;
                    when others then
                        raise_application_error(-20501,'채권사명칭 비교 오류 save error : ' ||SQLERRM);
                 end; 


            UPDATE TB_AC_AFFAIROUT_LST
               SET ACP_DT = #{ACP_DT, jdbcType=VARCHAR} , 
                   OUT_CHG_USR = #{OUT_CHG_USR, jdbcType=VARCHAR} , 
                   CLT_NM = #{CLT_NM, jdbcType=VARCHAR} , 
                   CLT_JMN = #{CLT_JMN, jdbcType=VARCHAR} , 
                   PRS_STEP = #{PRS_STEP, jdbcType=VARCHAR} , 
                   BND_SEQ = #{BND_SEQ, jdbcType=VARCHAR} , 
                   BND_NM = #{BND_NM, jdbcType=VARCHAR} , 
                   OSU_BNK = DECODE(#{OSU_BNK, jdbcType=VARCHAR},'1','Y','N')  , 
                   OSU_CARD = DECODE(#{OSU_CARD, jdbcType=VARCHAR},'1','Y','N')  , 
                   OSU_CEX = DECODE(#{OSU_CEX, jdbcType=VARCHAR},'1','Y','N')  , 
                   OSU_BEX = DECODE(#{OSU_BEX, jdbcType=VARCHAR},'1','Y','N')  , 
                   CHRG_AMT = #{CHRG_AMT, jdbcType=VARCHAR} , 
                   PRS_CHG_USR = #{PRS_CHG_USR, jdbcType=VARCHAR} , 
                   PRS_STS = #{PRS_STS, jdbcType=VARCHAR} , 
                   PRS_NOTE = #{PRS_NOTE, jdbcType=VARCHAR} , 
                   ISU_EXP_DT = #{ISU_EXP_DT, jdbcType=VARCHAR} , 
                   SORT_NO = #{SORT_NO, jdbcType=VARCHAR} , 
                   EDT_USR = #{OPERATOR, jdbcType=VARCHAR} , 
                   EDT_DT = SYSDATE 
             where STS_SEQ = #{STS_SEQ, jdbcType=VARCHAR}
               and DTL_SEQ = #{DTL_SEQ, jdbcType=VARCHAR} 
               and BRCH_ID = #{BRCH_ID, jdbcType=VARCHAR} 
               and AFF_SEQ = #{AFF_SEQ, jdbcType=VARCHAR};
    
                  if sql%rowcount=0 then
                  

                  INSERT INTO TB_AC_AFFAIROUT_LST
                          (
                           BRCH_ID , 
                           AFF_SEQ , 
                           DTL_SEQ , 
                           STS_SEQ , 
                           ACP_DT , 
                           OUT_CHG_USR , 
                           CLT_NM , 
                           CLT_JMN , 
                           PRS_STEP , 
                           BND_SEQ , 
                           BND_NM , 
                           OSU_BNK , 
                           OSU_CARD , 
                           OSU_CEX , 
                           OSU_BEX , 
                           CHRG_AMT , 
                           PRS_CHG_USR , 
                           PRS_STS , 
                           PRS_NOTE , 
                           ISU_EXP_DT , 
                           SORT_NO , 
                           CRT_USR , 
                           CRT_DT , 
                           EDT_USR , 
                           EDT_DT )
                   VALUES (
                           #{BRCH_ID, jdbcType=VARCHAR} , 
                           #{AFF_SEQ, jdbcType=VARCHAR} , 
                           #{DTL_SEQ, jdbcType=VARCHAR} , 
                           (SELECT NVL(MAX(STS_SEQ),0) + 1 
                              FROM TB_AC_AFFAIROUT_LST 
                             WHERE BRCH_ID = #{BRCH_ID, jdbcType=VARCHAR}
                               AND AFF_SEQ =  #{AFF_SEQ, jdbcType=VARCHAR} 
                               AND DTL_SEQ = #{DTL_SEQ, jdbcType=VARCHAR}
                           ),
                           #{ACP_DT, jdbcType=VARCHAR} , 
                           #{OUT_CHG_USR, jdbcType=VARCHAR} , 
                           #{CLT_NM, jdbcType=VARCHAR} , 
                           #{CLT_JMN, jdbcType=VARCHAR} , 
                           #{PRS_STEP, jdbcType=VARCHAR} , 
                           #{BND_SEQ, jdbcType=VARCHAR} , 
                           #{BND_NM, jdbcType=VARCHAR} , 
                           DECODE(#{OSU_BNK, jdbcType=VARCHAR},'1','Y','N') , 
                           DECODE(#{OSU_CARD, jdbcType=VARCHAR},'1','Y','N') , 
                           DECODE(#{OSU_CEX, jdbcType=VARCHAR},'1','Y','N') , 
                           DECODE(#{OSU_BEX, jdbcType=VARCHAR},'1','Y','N') ,
                           #{CHRG_AMT, jdbcType=VARCHAR} , 
                           #{PRS_CHG_USR, jdbcType=VARCHAR} , 
                           #{PRS_STS, jdbcType=VARCHAR} , 
                           #{PRS_NOTE, jdbcType=VARCHAR} , 
                           #{ISU_EXP_DT, jdbcType=VARCHAR} , 
                           NVL(#{SORT_NO, jdbcType=VARCHAR},(SELECT NVL(MAX(SORT_NO),0) + 1 
                              FROM TB_AC_AFFAIROUT_LST 
                             WHERE BRCH_ID = #{BRCH_ID, jdbcType=VARCHAR}
                               AND OUT_CHG_USR = #{OUT_CHG_USR, jdbcType=VARCHAR}
                               AND ACP_DT = #{ACP_DT, jdbcType=VARCHAR}
                           )) , 
                           #{OPERATOR, jdbcType=VARCHAR} , 
                           SYSDATE , 
                           #{OPERATOR, jdbcType=VARCHAR} , 
                           SYSDATE );
                  
                     end if;
                     
                     
            
                     IF NVL(V_BND_NM, ' ') != #{BND_NM, jdbcType=VARCHAR}  THEN 
                       
                        -- 사건디테일
                        UPDATE TB_AC_AFFAIR_DTL 
                           SET BND_SEQ_1 = DECODE(#{PRS_STEP, jdbcType=VARCHAR},'1', #{BND_SEQ, jdbcType=VARCHAR}, BND_SEQ_1),     -- 의뢰채권사만 있고 진행1이 없을 경우 넣기 
                               BND_SEQ_2 = DECODE(#{PRS_STEP, jdbcType=VARCHAR},'2', #{BND_SEQ, jdbcType=VARCHAR}, BND_SEQ_2),     
                               BND_NM_1 = DECODE(#{PRS_STEP, jdbcType=VARCHAR},'1', #{BND_NM, jdbcType=VARCHAR}, BND_NM_1),     -- 의뢰채권사만 있고 진행1이 없을 경우 넣기 
                               BND_NM_2 = DECODE(#{PRS_STEP, jdbcType=VARCHAR},'2', #{BND_NM, jdbcType=VARCHAR}, BND_NM_2),    
                               EDT_USR = #{OPERATOR, jdbcType=VARCHAR} , 
                               EDT_DT = SYSDATE 
                        WHERE BRCH_ID = #{BRCH_ID, jdbcType=VARCHAR} 
                          AND AFF_SEQ = #{AFF_SEQ, jdbcType=VARCHAR} 
                          AND DTL_SEQ = #{DTL_SEQ, jdbcType=VARCHAR}
                        ;
                        
                          
                   END IF;            
            
            
            
                     -- 사건진행이면 사건진행현황에도 사건진행 갱신
                    IF  #{PRS_STS, jdbcType=VARCHAR} = '200' THEN
                         UPDATE TB_AC_AFFAIR_DTL 
                           SET PRS_STS_1 = DECODE(#{PRS_STEP, jdbcType=VARCHAR},'1', #{PRS_STS, jdbcType=VARCHAR}, PRS_STS_1),     
                               PRS_STS_2 = DECODE(#{PRS_STEP, jdbcType=VARCHAR},'2', #{PRS_STS, jdbcType=VARCHAR}, PRS_STS_2),     
                               EDT_USR = #{OPERATOR, jdbcType=VARCHAR} , 
                               EDT_DT = SYSDATE 
                        WHERE BRCH_ID = #{BRCH_ID, jdbcType=VARCHAR} 
                          AND AFF_SEQ = #{AFF_SEQ, jdbcType=VARCHAR} 
                          AND DTL_SEQ = #{DTL_SEQ, jdbcType=VARCHAR}
                        ;           
                    
                    END IF;            
            
            
            END IF;
                     
            exception
                when others then
                    raise_application_error(-20501,'TB_AC_AFFAIROUT_LST save error : ' ||SQLERRM);
            end;
        
    </insert> 


 


   <!-- 외근업무일지 삭제 -->
    <delete   id="deleteAffairOutLst" parameterType="map" >
          DECLARE
                V_BRCH_ID VARCHAR2(3);
                V_AFF_SEQ NUMBER(10);
                V_DTL_SEQ NUMBER(10);
                V_BND_SEQ NUMBER(10);          
         
         BEGIN 
             BEGIN
                 SELECT BRCH_ID,
                        AFF_SEQ,
                        DTL_SEQ,
                        BND_SEQ
                   INTO V_BRCH_ID,
                        V_AFF_SEQ,
                        V_DTL_SEQ,
                        V_BND_SEQ
                   FROM TB_AC_AFFAIROUT_LST
                  WHERE ROWID = chartorowid(#{ROW_ID, jdbcType=VARCHAR});
             exception
                    WHEN NO_DATA_FOUND THEN
                       raise_application_error(-20501,'취소할 사건 상세정보 누락');
                    when others then
                        raise_application_error(-20501,'취소할 사건 상세정보 누락 save error : ' ||SQLERRM);
             end; 

             -- 사건진행에서 수수료, 채권사 상태 초기화 
            UPDATE TB_AC_AFFAIR_DTL
               SET PRS_STS_1 = (CASE WHEN BND_SEQ_1 = V_BND_SEQ THEN NULL ELSE PRS_STS_1 END),
                   PRS_STS_2 = (CASE WHEN BND_SEQ_2 = V_BND_SEQ THEN NULL ELSE PRS_STS_2 END),
                   BNK_CHRG = NULL,
                   AGC_CHRG = NULL,
                   EDT_USR = #{OPERATOR, jdbcType=VARCHAR} , 
                    EDT_DT = SYSDATE                    
              WHERE BRCH_ID = V_BRCH_ID
                AND AFF_SEQ = V_AFF_SEQ
                AND DTL_SEQ = V_DTL_SEQ;  

             DELETE FROM TB_AC_AFFAIROUT_LST
          WHERE ROWID = chartorowid(#{ROW_ID, jdbcType=VARCHAR});   
        exception
            when others then
                raise_application_error(-20501,'TB_AC_AFFAIROUT_LST save error : ' ||SQLERRM);
        end;  
   
    </delete>

   <!-- 외근직특이사항 조회 -->
    <select id="selectUserOutNote" parameterType="map" resultType ="map" >
        SELECT NVL(A.OUT_NOTE, ' ') AS OUT_NOTE  
          FROM TB_CC_USER_LST A
         WHERE A.BRCH_ID =  #{S_BRCH_ID, jdbcType=VARCHAR}
           AND A.USR_NM =  #{S_USR_NM, jdbcType=VARCHAR}

    </select> 

   <!-- 외근방문순서 조회 -->
    <select id="selectUserBondLst" parameterType="map" resultType ="map" >
        SELECT NVL(C.BND_NM, ' ') AS BND_NM, 
               NVL(B.NOTE,' ') AS NOTE   
          FROM TB_CC_USER_LST A, TB_CC_USERBOND_LST B, TB_CC_BOND_LST C
         WHERE A.BRCH_ID = B.BRCH_ID
           AND A.BRCH_ID = C.BRCH_ID
           AND A.USR_ID = B.USR_ID
           AND B.BND_SEQ = C.BND_SEQ
           AND A.BRCH_ID =  #{S_BRCH_ID, jdbcType=VARCHAR}
           AND A.USR_NM =  #{S_USR_NM, jdbcType=VARCHAR}
         GROUP BY B.SORT_NO, NVL(C.BND_NM, ' '), NVL(B.NOTE,' ') 
         ORDER BY B.SORT_NO

    </select> 

   <!-- 사건진행팝업 조회 -->
    <select id="selectAffairPrsPop" parameterType="map" resultType ="map" >
      SELECT 
            NVL(A.BRCH_ID,' ') AS  BRCH_ID,
            NVL(A.AFF_SEQ,'-99999') AS  AFF_SEQ,
            NVL(A.DTL_SEQ,'-99999') AS  DTL_SEQ,
            NVL(A.GBN,'-99999') AS  GBN,
            NVL(A.ACP_DT,' ') AS  ACP_DT,
            NVL(A.BND_NM,' ') AS  BND_NM,
            NVL(A.SPT_NM,' ') AS  SPT_NM,   
            NVL(A.ACP_MTD,' ') AS  ACP_MTD,   
            NVL(A.PRS_STS,' ') AS  PRS_STS,   
            NVL(A.PRS_NOTE,' ') AS  PRS_NOTE
        FROM (SELECT BRCH_ID,
                     AFF_SEQ,
                     DTL_SEQ,
                     '내근' AS GBN,
                     TO_CHAR(ACP_DT,'YYYY-MM-DD') AS ACP_DT,
                     BND_NM,
                     SPT_NM,
                     NVL(FC_CC_GET_CODENAME('AC09',A.ACP_MTD),' ') AS ACP_MTD,
                     NVL(FC_CC_GET_CODENAME('AD04',A.PRS_STS),' ') AS PRS_STS,
                     PRS_NOTE
                FROM TB_AC_AFFAIRPRS_LST A
              UNION ALL
              SELECT BRCH_ID,
                     AFF_SEQ,
                     DTL_SEQ,
                     '외근' AS GBN,
                     TO_CHAR(ACP_DT,'YYYY-MM-DD') AS ACP_DT,
                     BND_NM,
                     ' ' AS SPT_NM,
                     ' ' AS ACP_MTD,
                     NVL(FC_CC_GET_CODENAME('AD04',A.PRS_STS),' ') AS PRS_STS,
                     PRS_NOTE
                FROM TB_AC_AFFAIROUT_LST A
         ) A
       WHERE A.BRCH_ID =  #{S_BRCH_ID, jdbcType=VARCHAR}
         AND A.AFF_SEQ =  #{S_AFF_SEQ, jdbcType=VARCHAR}     
         AND A.DTL_SEQ =  #{S_DTL_SEQ, jdbcType=VARCHAR}  
     ORDER BY GBN, ACP_DT 

    </select> 

   <!-- 내근업무일지 등기 조회 -->
    <select id="selectRegsNo" parameterType="map" resultType ="map">
      SELECT 'N' AS FLAG,
              ROWIDTOCHAR(A.ROWID) AS ROW_ID,
               '0' AS CHK,
              #{OPERATOR, jdbcType=VARCHAR} AS OPERATOR,
             NVL(A.BRCH_ID, ' ') AS BRCH_ID,
             NVL(A.AFF_SEQ, '-99999') AS AFF_SEQ,
             NVL(A.DTL_SEQ, '-99999') AS DTL_SEQ,
             NVL(A.STS_SEQ, '-99999') AS STS_SEQ,
             NVL(FC_CC_GET_CODENAME('AC09',A.ACP_MTD), ' ') AS ACP_MTD,
             NVL(TO_CHAR(A.ACP_DT,'YYYYMMDD'), ' ') AS ACP_DT,
             NVL(A.CLT_NM, ' ') AS CLT_NM,
             NVL(A.BND_NM, ' ') AS BND_NM,
             NVL(A.REGS_NO, ' ') AS REGS_NO,
             '추척' AS BTN 
        FROM TB_AC_AFFAIRPRS_LST A
       WHERE A.BRCH_ID =  #{S_BRCH_ID, jdbcType=VARCHAR}
           AND A.BND_NM LIKE '%' || #{S_BND_NM, jdbcType=VARCHAR} || '%' 
           AND NVL(A.REGS_NO, ' ') LIKE '%' || #{S_REGS_NO, jdbcType=VARCHAR} || '%'
           AND A.ACP_DT BETWEEN  #{S_ACP_DT, jdbcType=VARCHAR} AND TO_DATE(#{S_ACP_DT, jdbcType=VARCHAR}) + 0.99999
           AND A.ACP_MTD IN ('D','DR')
         ORDER BY A.AFF_SEQ,  A.DTL_SEQ, A.STS_SEQ

    </select>   
     
     <!-- 사건 등기수정 -->
    <insert   id="saveRegsNo" parameterType="map" >

            UPDATE TB_AC_AFFAIRPRS_LST
               SET REGS_NO = #{REGS_NO, jdbcType=VARCHAR} , 
                   EDT_USR = #{OPERATOR, jdbcType=VARCHAR} , 
                   EDT_DT = SYSDATE 
             where STS_SEQ = #{STS_SEQ, jdbcType=VARCHAR}
               and DTL_SEQ = #{DTL_SEQ, jdbcType=VARCHAR}
               and BRCH_ID = #{BRCH_ID, jdbcType=VARCHAR}
               and AFF_SEQ = #{AFF_SEQ, jdbcType=VARCHAR}
    </insert> 
    
    
  <!-- 제휴사 사건진행보고서  조회 -->
    <select id="selectAffairCloseLst" parameterType="map" resultType ="map">
        SELECT BRCH_ID,
               TUB_SEQ,
               TUB_NM,
               SIN_NM,
               SIN_TEL,
               HNA_CHG_USR_NM,
               DOC_CARY,
               '진행보고서출력' AS BTN
          FROM (SELECT DISTINCT NVL(A.BRCH_ID,' ') AS BRCH_ID,
                       NVL(A.TUB_SEQ,'-99999') AS TUB_SEQ,
                        NVL(A.TUB_NM,' ') AS TUB_NM,
                       NVL(A.SIN_NM,' ') AS SIN_NM,
                       NVL(A.SIN_TEL,' ') AS SIN_TEL,
                       NVL(FC_CC_GET_USRNAME(A.BRCH_ID, A.HNA_CHG_USR),' ') AS HNA_CHG_USR_NM,
                       NVL(FC_CC_GET_CODENAME('AC05',A.DOC_CARY),' ') AS DOC_CARY                                            
                 FROM TB_CC_TIEUP_LST A, TB_AC_AFFAIR_MST B
                WHERE A.BRCH_ID = B.BRCH_ID
                  AND A.TUB_SEQ = B.TUB_SEQ
                  AND B.AFF_ED_DT BETWEEN #{S_ED_DT, jdbcType=VARCHAR} AND TO_DATE(#{S_ED_DT, jdbcType=VARCHAR}) + 0.99999
               ) A
         WHERE 1=1
           AND A.BRCH_ID =  #{S_BRCH_ID, jdbcType=VARCHAR}
           AND (A.TUB_SEQ LIKE  #{S_TUB_NM, jdbcType=VARCHAR} || '%' 
                OR A.TUB_NM LIKE '%' || #{S_TUB_NM, jdbcType=VARCHAR} || '%'
                OR A.SIN_NM LIKE '%' || #{S_TUB_NM, jdbcType=VARCHAR} || '%'
                OR A.HNA_CHG_USR_NM LIKE '%' || #{S_TUB_NM, jdbcType=VARCHAR} || '%'
               )
       ORDER BY TUB_SEQ
          
    </select>    


   <!-- 청구예정 리스트  조회 -->
    <select id="selectAskNotMst" parameterType="map" resultType ="map">
      SELECT /* 청구예정리스트 */
             'N' AS FLAG,
              ' ' AS ROW_ID,
              '0' AS CHK,
              #{OPERATOR, jdbcType=VARCHAR} AS OPERATOR,
             NVL(A.BRCH_ID,' ') AS BRCH_ID,
             NVL(A.TUB_SEQ,'-99999') AS TUB_SEQ,
             TO_NUMBER(A.TUB_SEQ || TO_CHAR(A.ASK_EXP_DT, 'YYYYMMDD'))   AS ASK_SEQ,
             #{S_CUR_DT, jdbcType=VARCHAR} AS ASK_DT,
             NVL(A.TUB_NM,' ') AS TUB_NM,
             NVL(C.SIN_NM,' ') AS SIN_NM,
             NVL(C.UNP_AMT,'-99999') AS UNP_AMT,
             -- 부가세별도, 부가세포함, 대행료부가세별도, 대행료부가세포함
             
             -- 공급가
             NVL(NVL(CASE
                  WHEN C.BIL_GBN = 'ALLY' THEN TRUNC(SUM(B.OCC_AMT) )  -- 부가세별도
                  WHEN C.BIL_GBN = 'ALLN' THEN TRUNC(SUM(B.OCC_AMT) * 10 / 11 )  -- 부가세포함이면 부가세를 뺀 금액이 공급가 이다.
                  WHEN C.BIL_GBN = 'AGCY' THEN TRUNC(SUM(B.AGC_CHRG) )  -- 대행료부가세별도
                  WHEN C.BIL_GBN = 'AGCN' THEN TRUNC(SUM(B.AGC_CHRG) * 10 / 11 )  -- 대행료부가세별도
                  ELSE SUM(B.OCC_AMT)
             END,0),'-99999') AS  OCC_AMT, 
             
             -- 부가세 
             NVL(NVL(CASE
                  WHEN C.BIL_GBN = 'ALLY' THEN SUM(B.OCC_AMT) / 10  -- 부가세별도
                  WHEN C.BIL_GBN = 'ALLN' THEN TRUNC(SUM(B.OCC_AMT) / 11)  -- 부가세포함
                  WHEN C.BIL_GBN = 'AGCY' THEN SUM(B.AGC_CHRG) / 10  -- 대행료부가세별도
                  WHEN C.BIL_GBN = 'AGCN' THEN TRUNC(SUM(B.AGC_CHRG) / 11)  -- 대행료부가세포함
                  ELSE 0
             END,0),'-99999') AS  VAT_AMT, 
             
             NVL(C.UNP_AMT,0) 
             + NVL(CASE
                  WHEN C.BIL_GBN = 'ALLY' THEN TRUNC(SUM(B.OCC_AMT) )  -- 부가세별도
                  WHEN C.BIL_GBN = 'ALLN' THEN TRUNC(SUM(B.OCC_AMT) * 10 / 11 )  -- 부가세포함이면 부가세를 뺀 금액이 공급가 이다.
                  WHEN C.BIL_GBN = 'AGCY' THEN TRUNC(SUM(B.AGC_CHRG) )  -- 대행료부가세별도
                  WHEN C.BIL_GBN = 'AGCN' THEN TRUNC(SUM(B.AGC_CHRG) * 10 / 11 )  -- 대행료부가세별도
                  ELSE SUM(B.OCC_AMT)
             END,0)
             + NVL(CASE
                  WHEN C.BIL_GBN = 'ALLY' THEN SUM(B.OCC_AMT) / 10  -- 부가세별도
                  WHEN C.BIL_GBN = 'ALLN' THEN TRUNC(SUM(B.OCC_AMT) / 11)  -- 부가세포함
                  WHEN C.BIL_GBN = 'AGCY' THEN SUM(B.AGC_CHRG) / 10  -- 대행료부가세별도
                  WHEN C.BIL_GBN = 'AGCN' THEN TRUNC(SUM(B.AGC_CHRG) / 11)  -- 대행료부가세포함
                  ELSE 0
             END,0) AS  ASK_AMT, 
             NVL((SELECT TO_CHAR(MAX(ASK_DT), 'YYYYMMDD')
                FROM TB_AC_TIEUPASK_MST
               WHERE BRCH_ID = A.BRCH_ID
                 AND TUB_SEQ = A.TUB_SEQ
                 AND TO_DATE( #{S_CUR_DT, jdbcType=VARCHAR}) > ASK_DT 
             ), ' ') AS LST_ASK_DT,
             NVL(FC_CC_GET_CODENAME('AC05', C.DOC_CARY),' ')   AS DOC_CARY,
             NVL(TO_CHAR(NVL(C.LST_DEAL_DT, TO_DATE('20000101')) + 1 ,'YYYYMMDD'),' ')  AS BAS_ST_DT,
             NVL(TO_CHAR(TO_DATE(#{S_CUR_DT, jdbcType=VARCHAR}),'YYYYMMDD'),' ')   AS BAS_ED_DT,
             NVL(TO_CHAR(A.ASK_EXP_DT, 'YYYYMMDD'),' ') AS ASK_EXP_DT,
             NVL(A.HNA_CHG_USR,' ') AS HNA_CHG_USR ,
             NVL(C.SIN_GBN,' ') AS SIN_GBN                   
        FROM TB_AC_AFFAIR_MST A,
             (SELECT BRCH_ID, AFF_SEQ,
                     SUM(BNK_CHRG) AS BNK_CHRG,
                     SUM(AGC_CHRG) AS AGC_CHRG,
                     NVL(SUM(BNK_CHRG),0) + NVL(SUM(AGC_CHRG),0) AS OCC_AMT               
                FROM TB_AC_AFFAIR_DTL
               GROUP BY BRCH_ID, AFF_SEQ
             ) B, TB_CC_TIEUP_LST C, TB_CC_USER_LST D
       WHERE A.BRCH_ID = B.BRCH_ID
         AND A.BRCH_ID = C.BRCH_ID
         AND A.BRCH_ID = D.BRCH_ID
         AND A.AFF_SEQ = B.AFF_SEQ
         AND A.TUB_SEQ = C.TUB_SEQ
         AND A.HNA_CHG_USR = D.USR_ID
         AND A.BRCH_ID =  #{S_BRCH_ID, jdbcType=VARCHAR}
         AND D.DEPT_CD LIKE #{S_DEPT_CD, jdbcType=VARCHAR} || '%'
           AND (C.TUB_SEQ LIKE  #{S_TUB_NM, jdbcType=VARCHAR} || '%' 
                OR C.TUB_NM LIKE '%' || #{S_TUB_NM, jdbcType=VARCHAR} || '%'
                OR C.SIN_NM LIKE '%' || #{S_TUB_NM, jdbcType=VARCHAR} || '%'
               )
           AND NVL(A.DOC_CARY, ' ') LIKE #{S_DOC_CARY, jdbcType=VARCHAR} || '%'    
           AND ((#{S_DT_GBN, jdbcType=VARCHAR}  = 'N' AND A.ASK_EXP_DT BETWEEN #{S_CUR_DT, jdbcType=VARCHAR} AND TO_DATE(#{S_CUR_DT, jdbcType=VARCHAR}) + 0.99999  AND C.SIN_GBN = 'DA')  -- 당일(기간)
               OR (#{S_DT_GBN, jdbcType=VARCHAR}  = 'T' AND A.ASK_EXP_DT >= #{S_CUR_DT, jdbcType=VARCHAR} AND C.SIN_GBN = 'DA') -- 전체(기간)
               OR (#{S_DT_GBN, jdbcType=VARCHAR}  = 'A' AND 1=1)  -- 상시(전체) 
               OR (#{S_DT_GBN, jdbcType=VARCHAR}  = 'Z' AND C.SIN_GBN = 'CO')  -- 건별
               )
         AND A.AFF_PRS_STS IN ('20', '25') -- 서류마감, 추가마감 
      GROUP BY A.BRCH_ID,
             A.TUB_SEQ,
             A.TUB_NM,
             C.BIL_GBN,
             C.SIN_NM,
             C.UNP_AMT,
             C.LST_DEAL_DT,
             A.ASK_EXP_DT,
             C.DOC_CARY,
             A.HNA_CHG_USR,
             C.SIN_GBN
      ORDER BY A.TUB_SEQ

    </select>
 
    <!-- 청구예정 상세  조회 -->
    <select id="selectAskNotDtl" parameterType="map" resultType ="map">
      SELECT /* 청구예정상세 */
             'N' AS FLAG,
              ' ' AS ROW_ID,
              '0' AS CHK,
              #{OPERATOR, jdbcType=VARCHAR} AS OPERATOR,
             NVL(A.BRCH_ID,' ') AS BRCH_ID,
             NVL(A.TUB_SEQ,'-99999') AS TUB_SEQ,
             TO_NUMBER(A.TUB_SEQ || TO_CHAR(A.ASK_EXP_DT, 'YYYYMMDD'))   AS ASK_SEQ,
             NVL(A.AFF_SEQ,'-99999') AS AFF_SEQ,
             NVL(SUM(B.BNK_CHRG), '-99999') AS BNK_CHRG,
             NVL(SUM(B.AGC_CHRG), '-99999') AS AGC_CHRG,
             NVL(NVL(SUM(B.BNK_CHRG), 0) + NVL(SUM(B.AGC_CHRG),0),'-99999') AS OCC_AMT,
             NVL(A.CLT_NM, ' ') AS CLT_NM,
             NVL(A.CLT_JMN, ' ') AS CLT_JMN,
             NVL(FC_CC_GET_CODENAME('AD02', A.AFF_PRS_STS),' ')   AS AFF_PRS_STS,
             NVL(TO_CHAR(A.ASK_EXP_DT, 'YYYYMMDD'),' ') AS ASK_EXP_DT 
          FROM TB_AC_AFFAIR_MST A,
             (SELECT BRCH_ID, AFF_SEQ,
                     SUM(BNK_CHRG) AS BNK_CHRG,
                     SUM(AGC_CHRG) AS AGC_CHRG               
                FROM TB_AC_AFFAIR_DTL
               GROUP BY BRCH_ID, AFF_SEQ
             ) B, TB_CC_TIEUP_LST C, TB_CC_USER_LST D
       WHERE A.BRCH_ID = B.BRCH_ID
         AND A.BRCH_ID = C.BRCH_ID
         AND A.BRCH_ID = D.BRCH_ID
         AND A.AFF_SEQ = B.AFF_SEQ
         AND A.TUB_SEQ = C.TUB_SEQ
         AND A.HNA_CHG_USR = D.USR_ID
         AND A.BRCH_ID =  #{S_BRCH_ID, jdbcType=VARCHAR}
         AND D.DEPT_CD LIKE #{S_DEPT_CD, jdbcType=VARCHAR} || '%'
           AND (C.TUB_SEQ LIKE  #{S_TUB_NM, jdbcType=VARCHAR} || '%' 
                OR C.TUB_NM LIKE '%' || #{S_TUB_NM, jdbcType=VARCHAR} || '%'
                OR C.SIN_NM LIKE '%' || #{S_TUB_NM, jdbcType=VARCHAR} || '%'
               )
           AND NVL(A.DOC_CARY, ' ') LIKE #{S_DOC_CARY, jdbcType=VARCHAR} || '%'    
           AND ((#{S_DT_GBN, jdbcType=VARCHAR}  = 'N' AND A.ASK_EXP_DT BETWEEN #{S_CUR_DT, jdbcType=VARCHAR} AND TO_DATE(#{S_CUR_DT, jdbcType=VARCHAR}) + 0.99999  AND C.SIN_GBN = 'DA')  -- 당일(기간)
               OR (#{S_DT_GBN, jdbcType=VARCHAR}  = 'T' AND A.ASK_EXP_DT >= #{S_CUR_DT, jdbcType=VARCHAR} AND C.SIN_GBN = 'DA') -- 전체(기간)
               OR (#{S_DT_GBN, jdbcType=VARCHAR}  = 'A' AND 1=1)  -- 상시(전체) 
               OR (#{S_DT_GBN, jdbcType=VARCHAR}  = 'Z' AND C.SIN_GBN = 'CO')  -- 건별
               )
         AND A.AFF_PRS_STS IN ('20', '25') -- 서류마감, 추가마감 
         
      GROUP BY NVL(A.BRCH_ID,' '),
             A.TUB_SEQ,
             NVL(A.AFF_SEQ,'-99999'),
             NVL(A.CLT_NM, ' '),
             NVL(A.CLT_JMN, ' '),
             NVL(FC_CC_GET_CODENAME('AD02', A.AFF_PRS_STS),' '),
             A.ASK_EXP_DT
      ORDER BY NVL(A.AFF_SEQ,'-99999')

    </select>
 
 
    <!-- 청구누락 리스트  조회 -->
    <select id="selectAskOmsMst" parameterType="map" resultType ="map">
      SELECT /* 청구누락리스트 */
             'N' AS FLAG,
              ' ' AS ROW_ID,
              '0' AS CHK,
              #{OPERATOR, jdbcType=VARCHAR} AS OPERATOR,
             NVL(A.BRCH_ID,' ') AS BRCH_ID,
             NVL(A.TUB_SEQ,'-99999') AS TUB_SEQ,
             TO_NUMBER(A.TUB_SEQ || TO_CHAR(A.ASK_EXP_DT, 'YYYYMMDD'))   AS ASK_SEQ,
             #{S_CUR_DT, jdbcType=VARCHAR} AS ASK_DT,
             NVL(A.TUB_NM,' ') AS TUB_NM,
             NVL(C.SIN_NM,' ') AS SIN_NM,
             NVL(C.UNP_AMT,'-99999') AS UNP_AMT,
             -- 부가세별도, 부가세포함, 대행료부가세별도, 대행료부가세포함
             
             -- 공급가
             NVL(NVL(CASE
                  WHEN C.BIL_GBN = 'ALLY' THEN TRUNC(SUM(B.OCC_AMT) )  -- 부가세별도
                  WHEN C.BIL_GBN = 'ALLN' THEN TRUNC(SUM(B.OCC_AMT) * 10 / 11 )  -- 부가세포함이면 부가세를 뺀 금액이 공급가 이다.
                  WHEN C.BIL_GBN = 'AGCY' THEN TRUNC(SUM(B.AGC_CHRG) )  -- 대행료부가세별도
                  WHEN C.BIL_GBN = 'AGCN' THEN TRUNC(SUM(B.AGC_CHRG) * 10 / 11 )  -- 대행료부가세별도
                  ELSE SUM(B.OCC_AMT)
             END,0),'-99999') AS  OCC_AMT, 
             
             -- 부가세 
             NVL(NVL(CASE
                  WHEN C.BIL_GBN = 'ALLY' THEN SUM(B.OCC_AMT) / 10  -- 부가세별도
                  WHEN C.BIL_GBN = 'ALLN' THEN TRUNC(SUM(B.OCC_AMT) / 11)  -- 부가세포함
                  WHEN C.BIL_GBN = 'AGCY' THEN SUM(B.AGC_CHRG) / 10  -- 대행료부가세별도
                  WHEN C.BIL_GBN = 'AGCN' THEN TRUNC(SUM(B.AGC_CHRG) / 11)  -- 대행료부가세포함
                  ELSE 0
             END,0),'-99999') AS  VAT_AMT, 
             
             NVL(C.UNP_AMT,0) 
             + NVL(CASE
                  WHEN C.BIL_GBN = 'ALLY' THEN TRUNC(SUM(B.OCC_AMT) )  -- 부가세별도
                  WHEN C.BIL_GBN = 'ALLN' THEN TRUNC(SUM(B.OCC_AMT) * 10 / 11 )  -- 부가세포함이면 부가세를 뺀 금액이 공급가 이다.
                  WHEN C.BIL_GBN = 'AGCY' THEN TRUNC(SUM(B.AGC_CHRG) )  -- 대행료부가세별도
                  WHEN C.BIL_GBN = 'AGCN' THEN TRUNC(SUM(B.AGC_CHRG) * 10 / 11 )  -- 대행료부가세별도
                  ELSE SUM(B.OCC_AMT)
             END,0)
             + NVL(CASE
                  WHEN C.BIL_GBN = 'ALLY' THEN SUM(B.OCC_AMT) / 10  -- 부가세별도
                  WHEN C.BIL_GBN = 'ALLN' THEN TRUNC(SUM(B.OCC_AMT) / 11)  -- 부가세포함
                  WHEN C.BIL_GBN = 'AGCY' THEN SUM(B.AGC_CHRG) / 10  -- 대행료부가세별도
                  WHEN C.BIL_GBN = 'AGCN' THEN TRUNC(SUM(B.AGC_CHRG) / 11)  -- 대행료부가세포함
                  ELSE 0
             END,0) AS  ASK_AMT, 
             NVL(TO_CHAR(A.ASK_EXP_DT, 'YYYYMMDD'),' ') AS ASK_EXP_DT, 
             NVL(FC_CC_GET_CODENAME('AC05', C.DOC_CARY),' ')   AS DOC_CARY,
             NVL(A.HNA_CHG_USR,' ') AS HNA_CHG_USR,
             NVL(C.SIN_GBN,' ') AS SIN_GBN   
        FROM TB_AC_AFFAIR_MST A,
             (SELECT BRCH_ID, AFF_SEQ,
                     SUM(BNK_CHRG) AS BNK_CHRG,
                     SUM(AGC_CHRG) AS AGC_CHRG,
                     NVL(SUM(BNK_CHRG),0) + NVL(SUM(AGC_CHRG),0) AS OCC_AMT                 
                FROM TB_AC_AFFAIR_DTL
               GROUP BY BRCH_ID, AFF_SEQ
             ) B, TB_CC_TIEUP_LST C, TB_CC_USER_LST D
       WHERE A.BRCH_ID = B.BRCH_ID
         AND A.BRCH_ID = C.BRCH_ID
         AND A.BRCH_ID = D.BRCH_ID
         AND A.AFF_SEQ = B.AFF_SEQ
         AND A.TUB_SEQ = C.TUB_SEQ
         AND A.HNA_CHG_USR = D.USR_ID
         AND A.BRCH_ID =  #{S_BRCH_ID, jdbcType=VARCHAR}
         AND D.DEPT_CD LIKE #{S_DEPT_CD, jdbcType=VARCHAR} || '%'
         AND (C.TUB_SEQ LIKE  #{S_TUB_NM, jdbcType=VARCHAR} || '%' 
               OR C.TUB_NM LIKE '%' || #{S_TUB_NM, jdbcType=VARCHAR} || '%'
               OR C.SIN_NM LIKE '%' || #{S_TUB_NM, jdbcType=VARCHAR} || '%'
             )
         AND NVL(A.DOC_CARY, ' ') LIKE #{S_DOC_CARY, jdbcType=VARCHAR} || '%'    
         AND A.AFF_PRS_STS IN ('20', '25') -- 서류마감, 추가마감 
         AND #{S_CUR_DT, jdbcType=VARCHAR} > A.ASK_EXP_DT   -- 이미 지나버린거 
      GROUP BY A.BRCH_ID,
             A.TUB_SEQ,
             A.TUB_NM,
             C.BIL_GBN,
             C.SIN_NM,
             C.UNP_AMT,
             C.LST_DEAL_DT,
             A.ASK_EXP_DT,
             C.DOC_CARY,
             A.HNA_CHG_USR,
             C.SIN_GBN
      ORDER BY A.TUB_SEQ

    </select>
 
 
     <!-- 청구누락 상세  조회 -->
    <select id="selectAskOmsDtl" parameterType="map" resultType ="map">
      SELECT /* 청구누락상세 */
             'N' AS FLAG,
              ' ' AS ROW_ID,
              '0' AS CHK,
              #{OPERATOR, jdbcType=VARCHAR} AS OPERATOR,
             NVL(A.BRCH_ID,' ') AS BRCH_ID,
             NVL(A.TUB_SEQ,'-99999') AS TUB_SEQ,
             TO_NUMBER(A.TUB_SEQ || TO_CHAR(A.ASK_EXP_DT, 'YYYYMMDD'))   AS ASK_SEQ,
             NVL(A.AFF_SEQ,'-99999') AS AFF_SEQ,
             NVL(SUM(B.BNK_CHRG), '-99999') AS BNK_CHRG,
             NVL(SUM(B.AGC_CHRG), '-99999') AS AGC_CHRG,
             NVL(NVL(SUM(B.BNK_CHRG), 0) + NVL(SUM(B.AGC_CHRG),0),'-99999') AS OCC_AMT,
             NVL(A.CLT_NM, ' ') AS CLT_NM,
             NVL(A.CLT_JMN, ' ') AS CLT_JMN,
             NVL(FC_CC_GET_CODENAME('AD02', A.AFF_PRS_STS),' ')   AS AFF_PRS_STS,
             NVL(TO_CHAR(A.ASK_EXP_DT, 'YYYYMMDD'),' ') AS ASK_EXP_DT 
          FROM TB_AC_AFFAIR_MST A,
             (SELECT BRCH_ID, AFF_SEQ,
                     SUM(BNK_CHRG) AS BNK_CHRG,
                     SUM(AGC_CHRG) AS AGC_CHRG               
                FROM TB_AC_AFFAIR_DTL
               GROUP BY BRCH_ID, AFF_SEQ
             ) B, TB_CC_TIEUP_LST C, TB_CC_USER_LST D
       WHERE A.BRCH_ID = B.BRCH_ID
         AND A.BRCH_ID = C.BRCH_ID
         AND A.BRCH_ID = D.BRCH_ID
         AND A.AFF_SEQ = B.AFF_SEQ
         AND A.TUB_SEQ = C.TUB_SEQ
         AND A.HNA_CHG_USR = D.USR_ID
         AND A.BRCH_ID =  #{S_BRCH_ID, jdbcType=VARCHAR}
         AND D.DEPT_CD LIKE #{S_DEPT_CD, jdbcType=VARCHAR} || '%'
           AND (C.TUB_SEQ LIKE  #{S_TUB_NM, jdbcType=VARCHAR} || '%' 
                OR C.TUB_NM LIKE '%' || #{S_TUB_NM, jdbcType=VARCHAR} || '%'
                OR C.SIN_NM LIKE '%' || #{S_TUB_NM, jdbcType=VARCHAR} || '%'
               )
           AND NVL(A.DOC_CARY, ' ') LIKE #{S_DOC_CARY, jdbcType=VARCHAR} || '%'    
         AND A.AFF_PRS_STS IN ('20', '25') -- 서류마감, 추가마감 
         AND #{S_CUR_DT, jdbcType=VARCHAR} > A.ASK_EXP_DT   -- 이미 지나버린거 
       
      GROUP BY NVL(A.BRCH_ID,' '),
             A.TUB_SEQ,
             NVL(A.AFF_SEQ,'-99999'),
             NVL(A.CLT_NM, ' '),
             NVL(A.CLT_JMN, ' '),
             NVL(FC_CC_GET_CODENAME('AD02', A.AFF_PRS_STS),' '),
             A.ASK_EXP_DT
      ORDER BY NVL(A.AFF_SEQ,'-99999')

    </select>
 
 
 
    <!-- 청구 리스트  조회 -->
    <select id="selectAskYesMst" parameterType="map" resultType ="map">
      SELECT /*청구목록*/ 
             'N' AS FLAG,
              ROWIDTOCHAR(A.ROWID) AS ROW_ID,
               '0' AS CHK,
              #{OPERATOR, jdbcType=VARCHAR} AS OPERATOR,
             NVL(A.BRCH_ID,' ') AS BRCH_ID, 
             NVL(A.TUB_SEQ,'-99999') AS TUB_SEQ, 
             NVL(A.ASK_SEQ,'-99999') AS ASK_SEQ, 
             NVL(TO_CHAR(A.ASK_DT,'YYYYMMDD'),' ') AS ASK_DT, 
             NVL(A.TUB_NM,' ') AS TUB_NM, 
             NVL(A.SIN_NM,' ') AS SIN_NM, 
             NVL(TO_CHAR(A.BAS_ST_DT,'YYYYMMDD'),' ') AS BAS_ST_DT, 
             NVL(TO_CHAR(A.BAS_ED_DT,'YYYYMMDD'),' ') AS BAS_ED_DT, 
             NVL(A.UNP_AMT,'-99999') AS UNP_AMT, 
             NVL(A.OCC_AMT,'-99999') AS OCC_AMT, 
             NVL(A.VAT_AMT,'-99999') AS VAT_AMT, 
             NVL(A.ASK_AMT,'-99999') AS ASK_AMT,
             NVL((SELECT TO_CHAR(MAX(ASK_DT), 'YYYYMMDD')
                FROM TB_AC_TIEUPASK_MST
               WHERE BRCH_ID = A.BRCH_ID
                 AND TUB_SEQ = A.TUB_SEQ
                 AND A.ASK_DT > ASK_DT 
             ), ' ') AS LST_ASK_DT,
             (SELECT 'Y' FROM TB_AC_TIEUPPAY_LST
               WHERE BRCH_ID = A.BRCH_ID
                 AND TUB_SEQ = A.TUB_SEQ
                 AND ASK_SEQ = A.ASK_SEQ
                 AND ROWNUM = 1
             ) AS PAY_YN  -- 입금이 한건이라도 있으면 청구 취소 불가             
        FROM TB_AC_TIEUPASK_MST A, TB_CC_TIEUP_LST B, TB_CC_USER_LST D
       WHERE A.BRCH_ID = B.BRCH_ID
         AND A.BRCH_ID = D.BRCH_ID
         AND A.TUB_SEQ = B.TUB_SEQ
         AND A.HNA_CHG_USR = D.USR_ID
         AND A.BRCH_ID =  #{S_BRCH_ID, jdbcType=VARCHAR}
         AND D.DEPT_CD LIKE #{S_DEPT_CD, jdbcType=VARCHAR} || '%'
         AND A.USE_YN LIKE #{S_USE_YN, jdbcType=VARCHAR} || '%'
         AND (B.TUB_SEQ LIKE  #{S_TUB_NM, jdbcType=VARCHAR} || '%' 
              OR B.TUB_NM LIKE '%' || #{S_TUB_NM, jdbcType=VARCHAR} || '%'
              OR B.SIN_NM LIKE '%' || #{S_TUB_NM, jdbcType=VARCHAR} || '%'
             )
         AND A.ASK_DT BETWEEN TO_DATE(NVL(#{S_ST_DT, jdbcType=VARCHAR},'19000101')) AND TO_DATE(NVL(#{S_ED_DT, jdbcType=VARCHAR},'29991231')) + 0.99999
      ORDER BY A.ASK_DT DESC, A.TUB_SEQ, A.ASK_SEQ   

    </select>
 

    <!-- 청구리스트 상세  조회 -->
    <select id="selectAskYesDtl" parameterType="map" resultType ="map">
      SELECT /* 청구리스트 상세 */
             NVL(A.BRCH_ID,' ') AS BRCH_ID,
             NVL(A.TUB_SEQ,'-99999') AS TUB_SEQ,
             NVL(C.ASK_SEQ,'-99999') AS ASK_SEQ,
             NVL(A.AFF_SEQ,'-99999') AS AFF_SEQ,
             NVL(SUM(B.BNK_CHRG), '-99999') AS BNK_CHRG,
             NVL(SUM(B.AGC_CHRG), '-99999') AS AGC_CHRG,
             NVL(NVL(SUM(B.BNK_CHRG), 0) + NVL(SUM(B.AGC_CHRG),0),'-99999') AS OCC_AMT,
             NVL(A.CLT_NM, ' ') AS CLT_NM,
             NVL(A.CLT_JMN, ' ') AS CLT_JMN,
             NVL(FC_CC_GET_CODENAME('AD02', A.AFF_PRS_STS),' ')   AS AFF_PRS_STS,
             NVL(TO_CHAR(A.ASK_EXP_DT, 'YYYYMMDD'),' ') AS ASK_EXP_DT 
          FROM TB_AC_AFFAIR_MST A,
             (SELECT BRCH_ID, AFF_SEQ,
                     SUM(BNK_CHRG) AS BNK_CHRG,
                     SUM(AGC_CHRG) AS AGC_CHRG               
                FROM TB_AC_AFFAIR_DTL
               GROUP BY BRCH_ID, AFF_SEQ
             ) B, TB_AC_TIEUPASK_DTL C
       WHERE A.BRCH_ID = B.BRCH_ID
         AND A.BRCH_ID = C.BRCH_ID
         AND A.AFF_SEQ = B.AFF_SEQ
         AND A.AFF_SEQ = C.AFF_SEQ
         AND A.TUB_SEQ = C.TUB_SEQ
         AND A.BRCH_ID =  #{S_BRCH_ID, jdbcType=VARCHAR}
         AND A.TUB_SEQ =  #{S_TUB_SEQ, jdbcType=VARCHAR}
         AND C.ASK_SEQ =  #{S_ASK_SEQ, jdbcType=VARCHAR}

      GROUP BY NVL(A.BRCH_ID,' '),
             NVL(A.TUB_SEQ,'-99999'),
             NVL(C.ASK_SEQ,'-99999'),
             NVL(A.AFF_SEQ,'-99999'),
             NVL(A.CLT_NM, ' '),
             NVL(A.CLT_JMN, ' '),
             NVL(FC_CC_GET_CODENAME('AD02', A.AFF_PRS_STS),' '),
             NVL(TO_CHAR(A.ASK_EXP_DT, 'YYYYMMDD'),' ')         

      ORDER BY NVL(A.AFF_SEQ,'-99999')

    </select>
 
    <!-- 비용청구 코드채 번 -->
    <select id="selectAskSeq" parameterType="map" resultType ="map">
       SELECT /* 비용청구 채번 */
              NVL(MAX(ASK_SEQ),0) + 1 AS ASK_SEQ
         FROM TB_AC_TIEUPASK_MST
        where BRCH_ID = #{S_BRCH_ID, jdbcType=VARCHAR} 
         AND TUB_SEQ = #{S_TUB_SEQ, jdbcType=VARCHAR}                      
    </select>
 
 
 
      <!-- 사건 종료 -->
     <insert   id="closeTieupAsk" parameterType="map" >

       UPDATE TB_AC_AFFAIR_MST
          SET AFF_PRS_STS = '50' , 
             EDT_USR = #{OPERATOR, jdbcType=VARCHAR} , 
             EDT_DT = SYSDATE 
       where BRCH_ID = #{BRCH_ID, jdbcType=VARCHAR} 
         AND AFF_SEQ = #{AFF_SEQ, jdbcType=VARCHAR} 
         
    </insert> 
 
 
       <!-- 비용청구 마스터  -->
     <insert   id="saveTieupAskMst" parameterType="map" >

        begin          
         
         -- 동일 제휴사의 기존꺼는 종료
         UPDATE TB_AC_TIEUPASK_MST
            SET USE_YN = 'N'
          WHERE BRCH_ID = #{BRCH_ID, jdbcType=VARCHAR}
            AND TUB_SEQ = #{TUB_SEQ, jdbcType=VARCHAR}
            AND USE_YN = 'Y';
         
         INSERT INTO TB_AC_TIEUPASK_MST
                 (
                  BRCH_ID , 
                  TUB_SEQ ,
                  ASK_SEQ, 
                  ASK_DT , 
                  TUB_NM , 
                  SIN_NM , 
                  BAS_ST_DT , 
                  BAS_ED_DT , 
                  UNP_AMT , 
                  OCC_AMT , 
                  VAT_AMT , 
                  ASK_AMT , 
                  NOTE , 
                  HNA_CHG_USR,
                  USE_YN,
                  CRT_USR , 
                  CRT_DT , 
                  EDT_USR , 
                  EDT_DT,
                  SIN_GBN )
          VALUES (
                  #{BRCH_ID, jdbcType=VARCHAR} , 
                  #{TUB_SEQ, jdbcType=VARCHAR} , 
                  #{ASK_SEQ, jdbcType=VARCHAR} , 
                  #{ASK_DT, jdbcType=VARCHAR} , 
                  #{TUB_NM, jdbcType=VARCHAR} , 
                  #{SIN_NM, jdbcType=VARCHAR} , 
                  #{BAS_ST_DT, jdbcType=VARCHAR} , 
                  #{BAS_ED_DT, jdbcType=VARCHAR} , 
                  #{UNP_AMT, jdbcType=VARCHAR} , 
                  #{OCC_AMT, jdbcType=VARCHAR} , 
                  #{VAT_AMT, jdbcType=VARCHAR} , 
                  #{ASK_AMT, jdbcType=VARCHAR} , 
                  #{NOTE, jdbcType=VARCHAR} , 
                  #{HNA_CHG_USR, jdbcType=VARCHAR} , 
                  'Y',
                  #{OPERATOR, jdbcType=VARCHAR} , 
                  SYSDATE , 
                  #{OPERATOR, jdbcType=VARCHAR} , 
                  SYSDATE,
                  #{SIN_GBN, jdbcType=VARCHAR} );
           
           -- 비용청구시 제휴사 미수금 합계 증가
           UPDATE TB_CC_TIEUP_LST
              SET UNP_AMT = #{ASK_AMT, jdbcType=VARCHAR},
                  EDT_USR = #{OPERATOR, jdbcType=VARCHAR} , 
                  EDT_DT = SYSDATE               
               WHERE BRCH_ID = #{BRCH_ID, jdbcType=VARCHAR}
                 AND TUB_SEQ = #{TUB_SEQ, jdbcType=VARCHAR};
            
            
            exception
                when others then
                    raise_application_error(-20501,'TB_AC_TIEUPASK_MST save error : ' ||SQLERRM);
            end; 
   
    </insert> 
 
        <!-- 비용청구 디테일  -->
     <insert   id="saveTieupAskDtl" parameterType="map" >
        begin
   
         INSERT INTO TB_AC_TIEUPASK_DTL
                 (
                  BRCH_ID , 
                  TUB_SEQ ,
                  ASK_SEQ, 
                  AFF_SEQ , 
                  CRT_USR , 
                  CRT_DT , 
                  EDT_USR , 
                  EDT_DT )
          VALUES (
                  #{BRCH_ID, jdbcType=VARCHAR} , 
                  #{TUB_SEQ, jdbcType=VARCHAR} ,
                  #{ASK_SEQ, jdbcType=VARCHAR} ,  
                  #{AFF_SEQ, jdbcType=VARCHAR} , 
                  #{OPERATOR, jdbcType=VARCHAR} , 
                  SYSDATE , 
                  #{OPERATOR, jdbcType=VARCHAR} , 
                  SYSDATE );
                  
         -- 관련 사건은 비용청구로 상태 변경          
          UPDATE TB_AC_AFFAIR_MST
             SET AFF_PRS_STS = '30' , 
                EDT_USR = #{OPERATOR, jdbcType=VARCHAR} , 
                EDT_DT = SYSDATE 
          where BRCH_ID = #{BRCH_ID, jdbcType=VARCHAR} 
            AND AFF_SEQ = #{AFF_SEQ, jdbcType=VARCHAR};                   
         
            exception
                when others then
                    raise_application_error(-20501,'TB_AC_TIEUPASK_DTL save error : ' ||SQLERRM);
            end;

    </insert> 
  
  
         <!-- 청구취소  -->
     <insert   id="deleteTieupAskMst" parameterType="map" >
        begin
   
         -- 제휴사 미수금을 다시 감소하기 
           UPDATE TB_CC_TIEUP_LST
              SET UNP_AMT = NVL(UNP_AMT,0) - NVL(#{OCC_AMT, jdbcType=VARCHAR},0) - NVL(#{VAT_AMT, jdbcType=VARCHAR},0),
                  EDT_USR = #{OPERATOR, jdbcType=VARCHAR} , 
                  EDT_DT = SYSDATE               
               WHERE BRCH_ID = #{BRCH_ID, jdbcType=VARCHAR}
                 AND TUB_SEQ = #{TUB_SEQ, jdbcType=VARCHAR};
                 
                 
          -- 관련 사건은 마감 상태 변경          
          UPDATE TB_AC_AFFAIR_MST
             SET AFF_PRS_STS = '20' , 
                EDT_USR = #{OPERATOR, jdbcType=VARCHAR} , 
                EDT_DT = SYSDATE 
          where (BRCH_ID, AFF_SEQ) IN (SELECT BRCH_ID, AFF_SEQ
                                         FROM TB_AC_TIEUPASK_DTL
                                        WHERE BRCH_ID = #{BRCH_ID, jdbcType=VARCHAR}
                                          AND TUB_SEQ = #{TUB_SEQ, jdbcType=VARCHAR}
                                          AND ASK_SEQ = #{ASK_SEQ, jdbcType=VARCHAR}
                                       );             
         
         -- 청구상세 삭제
         DELETE FROM TB_AC_TIEUPASK_DTL
           WHERE   BRCH_ID = #{BRCH_ID, jdbcType=VARCHAR}
               AND TUB_SEQ = #{TUB_SEQ, jdbcType=VARCHAR}
               AND ASK_SEQ = #{ASK_SEQ, jdbcType=VARCHAR};
               
         -- 청구마스터 삭제
         DELETE FROM TB_AC_TIEUPASK_MST
           WHERE   BRCH_ID = #{BRCH_ID, jdbcType=VARCHAR}
               AND TUB_SEQ = #{TUB_SEQ, jdbcType=VARCHAR}
               AND ASK_SEQ = #{ASK_SEQ, jdbcType=VARCHAR};
               
        -- 기존 종료된 청구 살리기
         UPDATE TB_AC_TIEUPASK_MST
            SET USE_YN = 'Y'
          WHERE BRCH_ID = #{BRCH_ID, jdbcType=VARCHAR}
            AND TUB_SEQ = #{TUB_SEQ, jdbcType=VARCHAR}
            AND ASK_SEQ = (SELECT MAX(ASK_SEQ)
                             FROM TB_AC_TIEUPASK_MST
                            WHERE BRCH_ID = #{BRCH_ID, jdbcType=VARCHAR}
                              AND TUB_SEQ = #{TUB_SEQ, jdbcType=VARCHAR}
                          );
         
            exception
                when others then
                    raise_application_error(-20501,'TB_AC_TIEUPASK_MST DELETE error : ' ||SQLERRM);
            end;

    </insert>  

    <!-- 입금내역  조회 -->
    <select id="selectPayLst" parameterType="map" resultType ="map">
        SELECT /*입금내역*/ 
               'N' AS FLAG,
                ROWIDTOCHAR(A.ROWID) AS ROW_ID,
                 '0' AS CHK,
                #{OPERATOR, jdbcType=VARCHAR} AS OPERATOR,
               NVL(A.BRCH_ID,' ') AS BRCH_ID, 
               NVL(TO_CHAR(A.PAY_DT,'YYYYMMDD'),' ') AS PAY_DT, 
               NVL(A.PAY_SEQ,'-99999') AS PAY_SEQ, 
               NVL(A.BANK_GBN,' ') AS BANK_GBN, 
               NVL(FC_CC_GET_CODENAME('AD16', A.BANK_GBN),' ') AS BANK_GBN_NM, 
               NVL(A.PAY_AMT,'-99999') AS PAY_AMT, 
               NVL(A.PAY_NOTE,' ') AS PAY_NOTE, 
               NVL(A.SIN_GBN,' ') AS SIN_GBN, 
               NVL(FC_CC_GET_CODENAME('AD15', NVL(A.SIN_GBN,'10')),' ') AS SIN_GBN_NM
          FROM TB_AC_PAY_LST A
         WHERE A.BRCH_ID =  #{S_BRCH_ID, jdbcType=VARCHAR}
           AND NVL(A.PAY_NOTE, ' ') LIKE '%' || #{S_PAY_NOTE, jdbcType=VARCHAR} || '%'
           AND A.PAY_DT BETWEEN #{S_PAY_ST_DT, jdbcType=VARCHAR} AND TO_DATE(#{S_PAY_ED_DT, jdbcType=VARCHAR}) + 0.99999
           AND A.BANK_GBN LIKE #{S_BANK_GBN, jdbcType=VARCHAR} || '%'
           AND INSTR(#{S_SIN_GBN, jdbcType=VARCHAR}, NVL(A.SIN_GBN, ' ') ) > 0
           AND A.PAY_HNDL_GBN = 'Y' -- 입금등록만 나옴 
        ORDER BY A.PAY_DT DESC, A.PAY_SEQ  

 

    </select>
    
    
     <!-- 입금내역 한건  조회 -->
    <select id="selectPayOne" parameterType="map" resultType ="map">
        SELECT /*입금내역 한건 */ 
               'N' AS FLAG,
                ROWIDTOCHAR(A.ROWID) AS ROW_ID,
                 '0' AS CHK,
                #{OPERATOR, jdbcType=VARCHAR} AS OPERATOR,
               NVL(A.BRCH_ID,' ') AS BRCH_ID, 
               NVL(TO_CHAR(A.PAY_DT,'YYYYMMDD'),' ') AS PAY_DT, 
               NVL(A.PAY_SEQ,'-99999') AS PAY_SEQ, 
               NVL(A.BANK_GBN,' ') AS BANK_GBN, 
               NVL(A.PAY_AMT,'-99999') AS PAY_AMT, 
               NVL(A.PAY_NOTE,' ') AS PAY_NOTE, 
               NVL(A.SIN_GBN,' ') AS SIN_GBN, 
               NVL(FC_CC_GET_CODENAME('AD15', NVL(A.SIN_GBN,'10')),' ') AS SIN_GBN_NM
          FROM TB_AC_PAY_LST A
         WHERE A.BRCH_ID =  #{S_BRCH_ID, jdbcType=VARCHAR}
           AND A.PAY_SEQ =  #{S_PAY_SEQ, jdbcType=VARCHAR}

 

    </select>   
    
        <!-- 입금확인불가   조회 -->
    <select id="selectPayCheckLst" parameterType="map" resultType ="map">
        SELECT /*입금확인불가*/ 
               NVL(A.BRCH_ID,' ') AS BRCH_ID, 
               NVL(TO_CHAR(A.PAY_DT,'YYYYMMDD'),' ') AS PAY_DT, 
               NVL(A.PAY_SEQ,'-99999') AS PAY_SEQ, 
               NVL(A.BANK_GBN,' ') AS BANK_GBN, 
               NVL(FC_CC_GET_CODENAME('AD16', A.BANK_GBN),' ') AS BANK_GBN_NM,
               NVL(A.PAY_AMT,'-99999') AS PAY_AMT, 
               NVL(A.PAY_NOTE,' ') AS PAY_NOTE
           FROM TB_AC_PAY_LST A
         WHERE A.BRCH_ID =  #{S_BRCH_ID, jdbcType=VARCHAR}
           AND NVL(A.PAY_NOTE, ' ') LIKE '%' || #{S_PAY_NOTE, jdbcType=VARCHAR} || '%'
           AND A.PAY_AMT BETWEEN NVL(#{S_ST_AMT, jdbcType=VARCHAR}, 0) AND NVL(#{S_ED_AMT, jdbcType=VARCHAR}, 99999999) 
           AND A.PAY_DT BETWEEN TO_DATE(NVL(#{S_ST_DT, jdbcType=VARCHAR},'19000101')) AND TO_DATE(NVL(#{S_ED_DT, jdbcType=VARCHAR},'29991231')) + 0.99999
           AND A.BANK_GBN LIKE #{S_BANK_GBN, jdbcType=VARCHAR} || '%'     
           AND A.PAY_HNDL_GBN = 'N' -- 입금확인불가  
        ORDER BY A.PAY_DT DESC, A.PAY_SEQ  

 

    </select>
    
     <!-- 입금정보 추가/수정 -->
     <insert   id="savePayLst" parameterType="map" >

        begin
            IF #{FLAG, jdbcType=VARCHAR} = 'D' THEN
                DELETE FROM TB_AC_PAY_LST
                 WHERE ROWID = chartorowid(#{ROW_ID, jdbcType=VARCHAR}) ;              
            ELSE         
         
            UPDATE TB_AC_PAY_LST
               SET PAY_DT = #{PAY_DT, jdbcType=VARCHAR} , 
                   BANK_GBN = #{BANK_GBN, jdbcType=VARCHAR} , 
                   PAY_AMT = #{PAY_AMT, jdbcType=VARCHAR} , 
                   PAY_NOTE = #{PAY_NOTE, jdbcType=VARCHAR} , 
                   EDT_USR = #{OPERATOR, jdbcType=VARCHAR} , 
                   EDT_DT = SYSDATE 
               where rowid = chartorowid(#{ROW_ID, jdbcType=VARCHAR});      
   
   
                  if sql%rowcount=0 then
                  
               INSERT INTO TB_AC_PAY_LST
                       (
                        BRCH_ID , 
                        PAY_SEQ , 
                        PAY_DT , 
                        BANK_GBN , 
                        PAY_AMT , 
                        PAY_NOTE , 
                        PAY_HNDL_GBN , 
                        CRT_USR , 
                        CRT_DT , 
                        EDT_USR , 
                        EDT_DT )
                VALUES (
                        #{BRCH_ID, jdbcType=VARCHAR} , 
                        (SELECT NVL(MAX(PAY_SEQ),0) + 1 FROM TB_AC_PAY_LST WHERE BRCH_ID =  #{BRCH_ID, jdbcType=VARCHAR}),
                        #{PAY_DT, jdbcType=VARCHAR} , 
                        #{BANK_GBN, jdbcType=VARCHAR} , 
                        #{PAY_AMT, jdbcType=VARCHAR} , 
                        #{PAY_NOTE, jdbcType=VARCHAR} , 
                        'Y' , 
                        #{OPERATOR, jdbcType=VARCHAR} , 
                        SYSDATE , 
                        #{OPERATOR, jdbcType=VARCHAR} , 
                        SYSDATE );            

                     end if;
               END IF;
            exception
                when others then
                    raise_application_error(-20501,'TB_AC_PAY_LST save error : ' ||SQLERRM);
            end;
        
    </insert>    
    
    
      <!-- 입금정보 삭제 -->
     <delete   id="deletePayLst" parameterType="map" >

        begin
                DELETE FROM TB_AC_PAY_LST
                 WHERE ROWID = chartorowid(#{ROW_ID, jdbcType=VARCHAR}) ;              
            
            exception
                when others then
                    raise_application_error(-20501,'TB_AC_PAY_LST delete error : ' ||SQLERRM);
            end;
        
    </delete>       
    
     <!-- 입금확인 불가  -->
     <insert   id="savePayNot" parameterType="map" >

            UPDATE TB_AC_PAY_LST
            SET PAY_HNDL_GBN = 'N' , 
                EDT_USR = #{OPERATOR, jdbcType=VARCHAR} , 
                EDT_DT = SYSDATE 
            where rowid = chartorowid(#{ROW_ID, jdbcType=VARCHAR})    
   
    </insert>    


    <!-- 제휴사 입금대상  조회 -->
    <select id="selectPayNotLst" parameterType="map" resultType ="map">
      SELECT /* 입금대상*/
             'N' AS FLAG,
              ' ' AS ROW_ID,
               '0' AS CHK,
              #{OPERATOR, jdbcType=VARCHAR} AS OPERATOR,
             NVL(A.BRCH_ID,' ') AS BRCH_ID,
             NVL(A.TUB_SEQ,'-99999') AS TUB_SEQ,
             NVL(A.ASK_SEQ,'-99999') AS ASK_SEQ,
             NVL(TO_CHAR(A.ASK_DT,'YYYYMMDD'),' ') AS ASK_DT,
             #{S_PAY_SEQ, jdbcType=VARCHAR} AS PAY_SEQ,
             #{S_PAY_DT, jdbcType=VARCHAR} AS TUB_PAY_DT,
             ' ' AS PAY_GBN, -- 전액_일부입금
             '20' AS SIN_GBN, -- 결재유무(결재중)
             #{S_PAY_NOTE, jdbcType=VARCHAR} AS PAY_NOTE,
             NVL(A.TUB_NM,' ') AS TUB_NM,
             NVL(A.SIN_NM,' ') AS SIN_NM,
             NVL((SELECT TO_CHAR(MAX(ASK_DT), 'YYYYMMDD')
                FROM TB_AC_TIEUPASK_MST
               WHERE BRCH_ID = A.BRCH_ID
                 AND TUB_SEQ = A.TUB_SEQ
                 AND A.ASK_DT > ASK_DT 
             ), ' ') AS LST_ASK_DT,
             NVL(A.ASK_AMT,0) - NVL(D.PAY_AMT,0) AS ASK_AMT,
             NVL(TO_NUMBER(#{S_PAY_AMT, jdbcType=VARCHAR}),0)  - NVL(D.PAY_CHK_AMT,0) AS CHK_AMT, -- 입금체크용금액
             '-99999' AS PAY_AMT,
             '건별' AS GUN_BTN             
        FROM TB_AC_TIEUPASK_MST A, TB_CC_TIEUP_LST B, TB_CC_TIEUPCHG_LST C,
             (SELECT BRCH_ID,
                     TUB_SEQ,
                     ASK_SEQ,
                     NVL(SUM(CASE WHEN PAY_SEQ = #{S_PAY_SEQ, jdbcType=VARCHAR} THEN PAY_AMT END), 0) AS PAY_CHK_AMT,  -- 나누는 이유는 청구건에 대해서 입금이 여러번 발생하면 입금순번으로 할수가 없다 
                     NVL(SUM(PAY_AMT), 0) AS PAY_AMT
                FROM TB_AC_TIEUPPAY_LST
               GROUP BY BRCH_ID,
                        TUB_SEQ,
                        ASK_SEQ
             ) D          
       WHERE A.BRCH_ID = B.BRCH_ID
         AND A.BRCH_ID = C.BRCH_ID
         AND A.BRCH_ID = D.BRCH_ID(+)
         AND A.TUB_SEQ = B.TUB_SEQ
         AND A.TUB_SEQ = C.TUB_SEQ
         AND A.TUB_SEQ = D.TUB_SEQ(+)
         AND A.ASK_SEQ = D.ASK_SEQ(+) 
         AND NVL(A.USE_YN,'N') = 'Y'
         AND NVL(A.ASK_AMT,0) !=  NVL(D.PAY_AMT,0)  -- 입금다된거는 패스 
         AND A.BRCH_ID =  #{S_BRCH_ID, jdbcType=VARCHAR}
         AND (A.TUB_NM LIKE '%' || #{S_PAY_NOTE, jdbcType=VARCHAR} || '%'
              OR A.SIN_NM LIKE '%' || #{S_PAY_NOTE, jdbcType=VARCHAR} || '%'
              OR C.CHG_NM LIKE '%' || #{S_PAY_NOTE, jdbcType=VARCHAR} || '%'
             )
       GROUP BY A.BRCH_ID,
             A.TUB_SEQ,
             A.ASK_SEQ,
             A.ASK_DT,
             A.TUB_NM,
             A.SIN_NM,
             B.LST_DEAL_DT,
             A.ASK_AMT,
             D.PAY_AMT,
             D.PAY_CHK_AMT
       ORDER BY A.ASK_DT DESC


 

    </select>


    <!-- 제휴사 미수전체  조회 -->
    <select id="selectPayNotLstAll" parameterType="map" resultType ="map">
      SELECT /* 미수전체*/
             'N' AS FLAG,
              ' ' AS ROW_ID,
               '0' AS CHK,
              #{OPERATOR, jdbcType=VARCHAR} AS OPERATOR,
             NVL(A.BRCH_ID,' ') AS BRCH_ID,
             NVL(A.TUB_SEQ,'-99999') AS TUB_SEQ,
             NVL(A.ASK_SEQ,'-99999') AS ASK_SEQ,
             NVL(TO_CHAR(A.ASK_DT,'YYYYMMDD'),' ') AS ASK_DT,
             #{S_PAY_SEQ, jdbcType=VARCHAR} AS PAY_SEQ,
             #{S_PAY_DT, jdbcType=VARCHAR} AS TUB_PAY_DT,
             ' ' AS PAY_GBN, -- 전액_일부입금
             '20' AS SIN_GBN, -- 결재유무(결재중)
             #{S_PAY_NOTE, jdbcType=VARCHAR} AS PAY_NOTE,
             NVL(A.TUB_NM,' ') AS TUB_NM,
             NVL(A.SIN_NM,' ') AS SIN_NM,
             NVL((SELECT TO_CHAR(MAX(ASK_DT), 'YYYYMMDD')
                FROM TB_AC_TIEUPASK_MST
               WHERE BRCH_ID = A.BRCH_ID
                 AND TUB_SEQ = A.TUB_SEQ
                 AND A.ASK_DT > ASK_DT 
             ), ' ') AS LST_ASK_DT,
             NVL(A.ASK_AMT,0) - NVL(D.PAY_AMT,0) AS ASK_AMT,
             NVL(TO_NUMBER(#{S_PAY_AMT, jdbcType=VARCHAR}),0)  - NVL(D.PAY_CHK_AMT,0) AS CHK_AMT, -- 입금체크용금액
             '-99999' AS PAY_AMT,
             '건별' AS GUN_BTN             
        FROM TB_AC_TIEUPASK_MST A, TB_CC_TIEUP_LST B, TB_CC_TIEUPCHG_LST C,
             (SELECT BRCH_ID,
                     TUB_SEQ,
                     ASK_SEQ,
                     NVL(SUM(CASE WHEN PAY_SEQ = #{S_PAY_SEQ, jdbcType=VARCHAR} THEN PAY_AMT END), 0) AS PAY_CHK_AMT,  -- 나누는 이유는 청구건에 대해서 입금이 여러번 발생하면 입금순번으로 할수가 없다 
                     NVL(SUM(PAY_AMT), 0) AS PAY_AMT
                FROM TB_AC_TIEUPPAY_LST
               GROUP BY BRCH_ID,
                        TUB_SEQ,
                        ASK_SEQ
             ) D          
       WHERE A.BRCH_ID = B.BRCH_ID
         AND A.BRCH_ID = C.BRCH_ID
         AND A.BRCH_ID = D.BRCH_ID(+)
         AND A.TUB_SEQ = B.TUB_SEQ
         AND A.TUB_SEQ = C.TUB_SEQ
         AND A.TUB_SEQ = D.TUB_SEQ(+)
         AND A.ASK_SEQ = D.ASK_SEQ(+) 
         AND NVL(A.USE_YN,'N') = 'Y'
         AND NVL(A.ASK_AMT,0) !=  NVL(D.PAY_AMT,0)  -- 입금다된거는 패스 
         AND A.BRCH_ID =  #{S_BRCH_ID, jdbcType=VARCHAR}
         AND NVL(B.UNP_AMT,0) != 0
       GROUP BY A.BRCH_ID,
             A.TUB_SEQ,
             A.ASK_SEQ,
             A.ASK_DT,
             A.TUB_NM,
             A.SIN_NM,
             B.LST_DEAL_DT,
             A.ASK_AMT,
             D.PAY_AMT,
             D.PAY_CHK_AMT
       ORDER BY A.ASK_DT DESC


 

    </select>


    <!-- 제휴사 입금현황  조회 -->
    <select id="selectTubPaySum" parameterType="map" resultType ="map">
      SELECT /* 입금현황*/
             TO_CHAR(TO_DATE(#{S_PAY_DT, jdbcType=VARCHAR}),'YYYY-MM-DD') AS PAY_DT,
             #{S_PAY_AMT, jdbcType=VARCHAR} AS PAY_AMT, 
             NVL(SUM(PAY_AMT),'-99999') AS TUB_PAY_AMT
        FROM TB_AC_TIEUPPAY_LST A      
       WHERE A.BRCH_ID =  #{S_BRCH_ID, jdbcType=VARCHAR}
         AND A.PAY_SEQ =  #{S_PAY_SEQ, jdbcType=VARCHAR}
    </select>


  
      <!-- 결재요청  조회 -->
    <select id="selectPaySinLst" parameterType="map" resultType ="map">

        SELECT /* 결재요청 조회*/
               'N' AS FLAG,
                ROWIDTOCHAR(A.ROWID) AS ROW_ID,
                 '0' AS CHK,
                #{OPERATOR, jdbcType=VARCHAR} AS OPERATOR,
               NVL(A.BRCH_ID,' ') AS BRCH_ID,
               NVL(A.TUB_SEQ,'-99999') AS TUB_SEQ,
               
               NVL(A.TUB_PAY_SEQ,'-99999') AS TUB_PAY_SEQ,
               NVL(A.ASK_SEQ,'-99999') AS ASK_SEQ,
               NVL(TO_CHAR(A.ASK_DT,'YYYYMMDD'),' ') AS ASK_DT,
               NVL(TO_CHAR(A.TUB_PAY_DT,'YYYYMMDD'),' ') AS TUB_PAY_DT,
               NVL(A.PAY_SEQ,'-99999') AS PAY_SEQ,
               
               NVL(B.TUB_NM,' ') AS TUB_NM,
               NVL(B.SIN_NM,' ') AS SIN_NM,
               NVL(A.PAY_AMT,'-99999') AS PAY_AMT,
               NVL(A.PAY_GBN,' ') AS PAY_GBN, 
               NVL(FC_CC_GET_CODENAME('AD14', A.PAY_GBN),' ') AS PAY_GBN_NM,               
               NVL(A.SIN_GBN,' ') AS SIN_GBN, 
               NVL(FC_CC_GET_CODENAME('AD15', A.SIN_GBN),' ') AS SIN_GBN_NM
          FROM TB_AC_TIEUPPAY_LST A, TB_CC_TIEUP_LST B, TB_AC_PAY_LST C
         WHERE A.BRCH_ID = B.BRCH_ID
           AND A.BRCH_ID = C.BRCH_ID
           AND A.TUB_SEQ = B.TUB_SEQ
           AND A.PAY_SEQ = C.PAY_SEQ
           AND A.BRCH_ID =  #{S_BRCH_ID, jdbcType=VARCHAR}
           AND C.PAY_SEQ = #{S_PAY_SEQ, jdbcType=VARCHAR}
           AND A.SIN_GBN = '20'  
         ORDER BY A.TUB_PAY_DT DESC, A.PAY_SEQ, B.TUB_SEQ


    </select>

 
      <!-- 결재처리  조회 -->
    <select id="selectPayYesLst" parameterType="map" resultType ="map">

        SELECT /*입금내역*/ 
               'N' AS FLAG,
                ' ' AS ROW_ID,
                 '0' AS CHK,
                #{OPERATOR, jdbcType=VARCHAR} AS OPERATOR,
               NVL(A.BRCH_ID,' ') AS BRCH_ID, 
               NVL(TO_CHAR(A.PAY_DT,'YYYYMMDD'),' ') AS PAY_DT, 
               NVL(A.PAY_SEQ,'-99999') AS PAY_SEQ, 
               NVL(A.BANK_GBN,' ') AS BANK_GBN, 
               NVL(FC_CC_GET_CODENAME('AD16', A.BANK_GBN),' ') AS BANK_GBN_NM, 
               NVL(A.PAY_AMT,'-99999') AS PAY_AMT, 
               NVL(A.PAY_NOTE,' ') AS PAY_NOTE, 
               NVL(A.SIN_GBN,' ') AS SIN_GBN, 
               NVL(FC_CC_GET_CODENAME('AD15', NVL(A.SIN_GBN,'10')),' ') AS SIN_GBN_NM
          FROM TB_AC_PAY_LST A, TB_AC_TIEUPPAY_LST B
         WHERE A.BRCH_ID = B.BRCH_ID
           AND A.PAY_SEQ = B.PAY_SEQ
           AND B.SIN_GBN = '30'
           AND A.BRCH_ID =  #{S_BRCH_ID, jdbcType=VARCHAR}
           AND NVL(A.PAY_NOTE, ' ') LIKE '%' || #{S_PAY_NOTE, jdbcType=VARCHAR} || '%'
           AND A.PAY_AMT BETWEEN NVL(#{S_ST_AMT, jdbcType=VARCHAR}, 0) AND NVL(#{S_ED_AMT, jdbcType=VARCHAR}, 99999999) 
           AND A.PAY_DT BETWEEN TO_DATE(NVL(#{S_ST_DT, jdbcType=VARCHAR},'19000101')) AND TO_DATE(NVL(#{S_ED_DT, jdbcType=VARCHAR},'29991231')) + 0.99999
           AND A.BANK_GBN LIKE #{S_BANK_GBN, jdbcType=VARCHAR} || '%'
           AND A.PAY_HNDL_GBN = 'Y' -- 입금등록만 나옴
        GROUP BY A.BRCH_ID , 
               A.PAY_DT , 
               A.PAY_SEQ, 
               A.BANK_GBN, 
               A.BANK_GBN, 
               A.PAY_AMT, 
               A.PAY_NOTE, 
               A.SIN_GBN , 
               A.SIN_GBN
        ORDER BY A.PAY_DT DESC, A.PAY_SEQ  


    </select>
    

      <!-- 결재처리 상세 조회 -->
    <select id="selectPayYesDtl" parameterType="map" resultType ="map">

        SELECT /* 결재처리 상세 조회*/
               'N' AS FLAG,
                ROWIDTOCHAR(A.ROWID) AS ROW_ID,
                 '0' AS CHK,
                #{OPERATOR, jdbcType=VARCHAR} AS OPERATOR,
               NVL(A.BRCH_ID,' ') AS BRCH_ID,
               NVL(A.TUB_SEQ,'-99999') AS TUB_SEQ,
               
               NVL(A.TUB_PAY_SEQ,'-99999') AS TUB_PAY_SEQ,
               NVL(A.ASK_SEQ,'-99999') AS ASK_SEQ,
               NVL(TO_CHAR(A.ASK_DT,'YYYYMMDD'),' ') AS ASK_DT,
               NVL(TO_CHAR(A.TUB_PAY_DT,'YYYYMMDD'),' ') AS TUB_PAY_DT,
               NVL(A.PAY_SEQ,'-99999') AS PAY_SEQ,
               
               NVL(B.TUB_NM,' ') AS TUB_NM,
               NVL(B.SIN_NM,' ') AS SIN_NM,
               NVL(A.PAY_AMT,'-99999') AS PAY_AMT,
               NVL(A.PAY_GBN,' ') AS PAY_GBN, 
               NVL(FC_CC_GET_CODENAME('AD14', A.PAY_GBN),' ') AS PAY_GBN_NM,               
               NVL(A.SIN_GBN,' ') AS SIN_GBN, 
               NVL(FC_CC_GET_CODENAME('AD15', A.SIN_GBN),' ') AS SIN_GBN_NM,
               NVL(TO_CHAR(A.EDT_DT,'YYYYMMDD'),' ') AS EDT_DT
          FROM TB_AC_TIEUPPAY_LST A, TB_CC_TIEUP_LST B, TB_AC_PAY_LST C
         WHERE A.BRCH_ID = B.BRCH_ID
           AND A.BRCH_ID = C.BRCH_ID
           AND A.TUB_SEQ = B.TUB_SEQ
           AND A.PAY_SEQ = C.PAY_SEQ
           AND A.BRCH_ID =  #{S_BRCH_ID, jdbcType=VARCHAR}
           AND C.PAY_SEQ = #{S_PAY_SEQ, jdbcType=VARCHAR}
           AND A.SIN_GBN = '30'  
         ORDER BY A.TUB_PAY_DT DESC, A.PAY_SEQ, B.TUB_SEQ


    </select>




    
     <!-- 제휴사 입금 저장   -->
     <insert   id="saveTieupPayLst" parameterType="map" >

        begin

         INSERT INTO TB_AC_TIEUPPAY_LST
                 (
                  BRCH_ID , 
                  TUB_SEQ , 
                  TUB_PAY_SEQ,
                  ASK_SEQ,
                  ASK_DT , 
                  TUB_PAY_DT , 
                  PAY_SEQ , 
                  ASK_AMT , 
                  PAY_AMT , 
                  PAY_GBN , 
                  SIN_GBN , 
                  PAY_NOTE,
                  CRT_USR , 
                  CRT_DT , 
                  EDT_USR , 
                  EDT_DT )
          VALUES (
                  #{BRCH_ID, jdbcType=VARCHAR} , 
                  #{TUB_SEQ, jdbcType=VARCHAR} , 
                  (SELECT NVL(MAX(TUB_PAY_SEQ),0) + 1 
                     FROM TB_AC_TIEUPPAY_LST
                    WHERE BRCH_ID = #{BRCH_ID, jdbcType=VARCHAR}
                      AND TUB_SEQ = #{TUB_SEQ, jdbcType=VARCHAR}
                  ),
                  #{ASK_SEQ, jdbcType=VARCHAR} , 
                  #{ASK_DT, jdbcType=VARCHAR} , 
                  #{TUB_PAY_DT, jdbcType=VARCHAR} , 
                  #{PAY_SEQ, jdbcType=VARCHAR} , 
                  #{ASK_AMT, jdbcType=VARCHAR} , 
                  #{PAY_AMT, jdbcType=VARCHAR} , 
                  #{PAY_GBN, jdbcType=VARCHAR} , 
                  #{SIN_GBN, jdbcType=VARCHAR} , 
                  #{PAY_NOTE, jdbcType=VARCHAR} ,
                  #{OPERATOR, jdbcType=VARCHAR} , 
                  SYSDATE , 
                  #{OPERATOR, jdbcType=VARCHAR} , 
                  SYSDATE )  ;
                  
           -- 입금정보에도 갱신함
           UPDATE TB_AC_PAY_LST
              SET SIN_GBN = '20'
             WHERE BRCH_ID = #{BRCH_ID, jdbcType=VARCHAR}
               AND PAY_SEQ =   #{PAY_SEQ, jdbcType=VARCHAR};     
                  
           
            exception
                when others then
                    raise_application_error(-20501,'TB_AC_TIEUPPAY_LST save error : ' ||SQLERRM);
            end;   
    </insert>    

     <!-- 결제요청 취소  -->
     <insert   id="deleteTieupPayLst" parameterType="map" >
         DECLARE
            V_CNT NUMBER(5);
         BEGIN
         

             -- 결재요청 취소는 걍 삭제이다.
             DELETE TB_AC_TIEUPPAY_LST
              WHERE BRCH_ID = #{BRCH_ID, jdbcType=VARCHAR}
                AND TUB_SEQ =   #{TUB_SEQ, jdbcType=VARCHAR}
                AND TUB_PAY_SEQ =   #{TUB_PAY_SEQ, jdbcType=VARCHAR};
              
            -- 결재관련 데이터가 없으면 입금도 등록으로 바꾸기
            SELECT COUNT(*)
              INTO V_CNT
              FROM TB_AC_TIEUPPAY_LST
             WHERE BRCH_ID = #{BRCH_ID, jdbcType=VARCHAR}
               AND PAY_SEQ =   #{PAY_SEQ, jdbcType=VARCHAR};
              
            IF V_CNT = 0 THEN
               UPDATE TB_AC_PAY_LST
                  SET SIN_GBN = '10'
                 WHERE BRCH_ID = #{BRCH_ID, jdbcType=VARCHAR}
                   AND PAY_SEQ =   #{PAY_SEQ, jdbcType=VARCHAR};              
            
            END IF;    
    
                exception
                when others then
                    raise_application_error(-20501,'TB_AC_TIEUPPAY_LST save error : ' ||SQLERRM);
            end; 
    
    </insert>    

     <!-- 결제처리  -->
     <insert   id="closeTieupPayLst" parameterType="map" >
      declare
        v_tub_pay_dt date;
        V_SIN_GBN VARCHAR2(4);
        
      begin
         
         -- 결재처리 
         UPDATE TB_AC_TIEUPPAY_LST
            SET SIN_GBN = '30',
               EDT_USR = #{OPERATOR, jdbcType=VARCHAR} , 
               EDT_DT = SYSDATE             
         WHERE BRCH_ID = #{BRCH_ID, jdbcType=VARCHAR}
           AND TUB_SEQ =   #{TUB_SEQ, jdbcType=VARCHAR}
           AND TUB_PAY_SEQ =   #{TUB_PAY_SEQ, jdbcType=VARCHAR};

        -- 입금액이랑 결재액이랑 같으면 입금은 결재처리
         begin
           SELECT CASE 
                       WHEN A.PAY_AMT = SUM(B.PAY_AMT) THEN '30'
                       ELSE '20'
                  END 
             INTO V_SIN_GBN
             FROM TB_AC_PAY_LST A, TB_AC_TIEUPPAY_LST B
            WHERE A.BRCH_ID = B.BRCH_ID
              AND A.PAY_SEQ = B.PAY_SEQ 
              AND B.SIN_GBN = '30'
              AND A.BRCH_ID = #{BRCH_ID, jdbcType=VARCHAR}
              AND A.PAY_SEQ =   #{PAY_SEQ, jdbcType=VARCHAR}
            GROUP BY A.PAY_AMT;
        
         exception
            WHEN NO_DATA_FOUND THEN
               V_SIN_GBN := '20';
            when others then
                raise_application_error(-20501,'입금액 비교 오류 save error : ' ||SQLERRM);
         end;
         
         
         UPDATE TB_AC_PAY_LST
            SET SIN_GBN = V_SIN_GBN
          WHERE BRCH_ID =  #{BRCH_ID, jdbcType=VARCHAR}
            AND PAY_SEQ =  #{PAY_SEQ, jdbcType=VARCHAR};
         
         
         -- 한건만 결재되더라도 최종거래일, 사건도 모두 입금으로 처리한다.
         -- 왜냐면 청구건이 합해서 오므로 어떤게 일부 결재인지 나눌수 없다.
               
         begin
             select /*최종거래일*/
               tub_pay_dt
               into v_tub_pay_dt
               from TB_AC_TIEUPPAY_LST
              WHERE BRCH_ID = #{BRCH_ID, jdbcType=VARCHAR}
                AND TUB_SEQ =   #{TUB_SEQ, jdbcType=VARCHAR}
                AND TUB_PAY_SEQ =   #{TUB_PAY_SEQ, jdbcType=VARCHAR};
                    
         exception
            WHEN NO_DATA_FOUND THEN
               v_tub_pay_dt := NULL;
            when others then
                raise_application_error(-20501,'제휴사 최종거래일 오류 save error : ' ||SQLERRM);
         end;              
         
         
       -- 관련 사건도진행상태도  다 입금완료 상태로 변경
       -- 동일 제휴사에 청구가 여러번 되면 마지막 청구를 사용하므로 거기의 청구상세에는 모든게 있지 않다 그래서 걍 청구 상태인거 다 입금완료 침 
     UPDATE TB_AC_AFFAIR_MST
        SET AFF_PRS_STS = '40',
            TUB_PAY_SEQ =  #{TUB_PAY_SEQ, jdbcType=VARCHAR},
            EDT_USR = #{OPERATOR, jdbcType=VARCHAR} , 
            EDT_DT = SYSDATE   
      WHERE (BRCH_ID, AFF_SEQ) IN 
            (SELECT A.BRCH_ID, A.AFF_SEQ
               FROM TB_AC_TIEUPASK_DTL A, TB_AC_TIEUPPAY_LST B, TB_AC_AFFAIR_MST C
              WHERE A.BRCH_ID = B.BRCH_ID
                AND A.BRCH_ID = C.BRCH_ID
                AND A.TUB_SEQ = B.TUB_SEQ
                AND A.ASK_SEQ = B.ASK_SEQ
                AND A.AFF_SEQ = C.AFF_SEQ
                AND C.AFF_PRS_STS = '30' 
                AND B.BRCH_ID = #{BRCH_ID, jdbcType=VARCHAR}
                AND B.TUB_SEQ =   #{TUB_SEQ, jdbcType=VARCHAR}
                AND B.TUB_PAY_SEQ =  #{TUB_PAY_SEQ, jdbcType=VARCHAR}
            );
            
       -- 제휴사 정보에  최근거래일 갱신
       UPDATE TB_CC_TIEUP_LST
          SET LST_DEAL_DT = NVL(v_tub_pay_dt, LST_DEAL_DT) ,
              LBF_DEAL_DT = NVL(LST_DEAL_DT, LBF_DEAL_DT),  -- 이전거래일(최근거래일 변경되면 이것을 처리한다.) 
              EDT_USR = #{OPERATOR, jdbcType=VARCHAR} , 
              EDT_DT = SYSDATE               
           WHERE BRCH_ID = #{BRCH_ID, jdbcType=VARCHAR}
             AND TUB_SEQ =   #{TUB_SEQ, jdbcType=VARCHAR};
                                     
       exception
           when others then
               raise_application_error(-20501,'TB_AC_TIEUPPAY_LST save error : ' ||SQLERRM);
       end;               
   
    </insert>   

     <!-- 결제취소  -->
     <insert   id="cancelTieupPayLst" parameterType="map" >

      begin
         
         -- 결재요청으로 바꿈  
         UPDATE TB_AC_TIEUPPAY_LST
            SET SIN_GBN = '20',
               EDT_USR = #{OPERATOR, jdbcType=VARCHAR} , 
               EDT_DT = SYSDATE             
         WHERE BRCH_ID = #{BRCH_ID, jdbcType=VARCHAR}
           AND TUB_SEQ =   #{TUB_SEQ, jdbcType=VARCHAR}
           AND TUB_PAY_SEQ =   #{TUB_PAY_SEQ, jdbcType=VARCHAR};


         -- 결재요청으로 바꾸기 
         UPDATE TB_AC_PAY_LST
            SET SIN_GBN = '20'
          WHERE BRCH_ID =  #{BRCH_ID, jdbcType=VARCHAR}
            AND PAY_SEQ =  #{PAY_SEQ, jdbcType=VARCHAR};
         
         
       -- 관련 사건도진행상태도  청구로 전환
     UPDATE TB_AC_AFFAIR_MST
        SET AFF_PRS_STS = '30',
            EDT_USR = #{OPERATOR, jdbcType=VARCHAR} , 
            EDT_DT = SYSDATE   
      WHERE (BRCH_ID, AFF_SEQ, TUB_PAY_SEQ) IN 
            (SELECT A.BRCH_ID, A.AFF_SEQ, B.TUB_PAY_SEQ
               FROM TB_AC_TIEUPASK_DTL A, TB_AC_TIEUPPAY_LST B, TB_AC_AFFAIR_MST C
              WHERE A.BRCH_ID = B.BRCH_ID
                AND A.BRCH_ID = C.BRCH_ID
                AND A.TUB_SEQ = B.TUB_SEQ
                AND A.ASK_SEQ = B.ASK_SEQ
                AND A.AFF_SEQ = C.AFF_SEQ
                AND C.AFF_PRS_STS = '30' 
                AND B.BRCH_ID = #{BRCH_ID, jdbcType=VARCHAR}
                AND B.TUB_SEQ =   #{TUB_SEQ, jdbcType=VARCHAR}
                AND B.TUB_PAY_SEQ =  #{TUB_PAY_SEQ, jdbcType=VARCHAR}
            );
            
       -- 제휴사 정보에  최근거래일 갱신
       UPDATE TB_CC_TIEUP_LST
          SET LST_DEAL_DT = NVL(LBF_DEAL_DT, LST_DEAL_DT) ,
              LBF_DEAL_DT = NULL,
              EDT_USR = #{OPERATOR, jdbcType=VARCHAR} , 
              EDT_DT = SYSDATE               
           WHERE BRCH_ID = #{BRCH_ID, jdbcType=VARCHAR}
             AND TUB_SEQ =   #{TUB_SEQ, jdbcType=VARCHAR};
                                     
       exception
           when others then
               raise_application_error(-20501,'TB_AC_TIEUPPAY_LST save error : ' ||SQLERRM);
       end;                 
   
    </insert> 
    
    
    <!-- 제휴사 입금정보  조회 -->
    <select id="selectTupPayInfo" parameterType="map" resultType ="map">
        SELECT A.TUB_NM,
               B.GBN,
               B.DT,
               NVL(B.OCC_AMT, '-99999') OCC_AMT ,
               NVL(B.VAT_AMT, '-99999') VAT_AMT ,
               NVL(B.PAY_AMT, '-99999') PAY_AMT
          FROM TB_CC_TIEUP_LST A,
               (SELECT 
               BRCH_ID,
               TUB_SEQ,
               GBN,
               SEQ,
               TO_CHAR(DT,'YYYY-MM-DD') AS DT,
               OCC_AMT,
               VAT_AMT,
               PAY_AMT,
               SUM(NVL(ASK_AMT,0) - NVL(PAY_AMT,0))  OVER (ORDER BY DT, SEQ) AS UNP_AMT
          FROM (SELECT BRCH_ID,
                       TUB_SEQ, 
                       1 AS SEQ,
                       '비용발생' AS GBN,
                       A.ASK_DT AS DT, 
                       A.UNP_AMT,
                       OCC_AMT,
                       VAT_AMT,
                       A.ASK_AMT,
                       0 AS PAY_AMT
                  FROM TB_AC_TIEUPASK_MST A
                 WHERE  ASK_DT IS NOT NULL 
                 UNION ALL
                SELECT BRCH_ID,
                       TUB_SEQ, 
                       2 AS SEQ,
                       '입금처리' AS GBN,
                       A.TUB_PAY_DT AS DT,
                       0 AS UNP_AMT,
                       0 AS OCC_AMT,
                       0 AS VAT_AMT,
                       0 AS ASK_AMT,
                       A.PAY_AMT
                  FROM TB_AC_TIEUPPAY_LST A
                 WHERE TUB_PAY_DT IS NOT NULL
                ) A 
               ) B  
         WHERE A.BRCH_ID = B.BRCH_ID
           AND A.TUB_SEQ = B.TUB_SEQ
           AND A.TUB_NM LIKE '%' ||  #{S_TUB_NM, jdbcType=VARCHAR} || '%'
        ORDER BY A.TUB_SEQ, DT, SEQ    
         
       

    </select>      
      

  <!-- 사건 진행(내근)  조회 -->
    <select id="selectAffairPrsInfoOne" parameterType="map" resultType ="map">
            SELECT /* 사건 내근진행 */
                   'N' AS FLAG,
                   ROWIDTOCHAR(B.ROWID) AS ROW_ID,
                   '0' AS CHK,
                    #{OPERATOR, jdbcType=VARCHAR} AS OPERATOR,
                    C.BRCH_ID, 
                    C.AFF_SEQ, 
                    C.DTL_SEQ,
                    TO_CHAR(ACP_DT,'YYYYMMDD') AS ACP_DT,
                    C.BND_NM,
                    NVL(FC_CC_GET_CODENAME('AC09',ACP_MTD),' ') AS ACP_MTD,
                    NVL(FC_CC_GET_CODENAME('AD04',PRS_STS),' ') AS PRS_STS,
                    NVL(C.BND_TEL, ' ') AS BND_TEL,
                    NVL(C.BND_FAX, ' ') AS BND_FAX                           
              FROM TB_AC_AFFAIR_MST A, TB_AC_AFFAIR_DTL B, TB_AC_AFFAIRPRS_LST C 
             WHERE A.BRCH_ID = B.BRCH_ID
               AND A.BRCH_ID = C.BRCH_ID
               AND A.AFF_SEQ = B.AFF_SEQ
               AND A.AFF_SEQ = C.AFF_SEQ
               AND B.DTL_SEQ = C.DTL_SEQ
               AND A.BRCH_ID =  #{S_BRCH_ID, jdbcType=VARCHAR}
               AND A.AFF_SEQ = #{S_AFF_SEQ, jdbcType=VARCHAR}
             ORDER BY C.BRCH_ID, C.AFF_SEQ, C.DTL_SEQ, C.ACP_DT, C.BND_NM


    </select>    
    
    
      <!-- 사건 진행(외근)  조회 -->
    <select id="selectAffairPrsOutOne" parameterType="map" resultType ="map">
            SELECT /* 사건진행(외근) */
                   'N' AS FLAG,
                   ROWIDTOCHAR(B.ROWID) AS ROW_ID,
                   '0' AS CHK,
                    #{OPERATOR, jdbcType=VARCHAR} AS OPERATOR,
                    C.BRCH_ID, 
                    C.AFF_SEQ, 
                    C.DTL_SEQ,
                    TO_CHAR(ACP_DT,'YYYYMMDD') AS ACP_DT,
                    C.BND_NM,
                    NVL(OUT_CHG_USR, ' ') OUT_CHG_USR,
                    NVL(PRS_NOTE, ' ') AS PRS_NOTE    
              FROM TB_AC_AFFAIR_MST A, TB_AC_AFFAIR_DTL B, TB_AC_AFFAIROUT_LST C
             WHERE A.BRCH_ID = B.BRCH_ID
               AND A.BRCH_ID = C.BRCH_ID
               AND A.AFF_SEQ = B.AFF_SEQ
               AND A.AFF_SEQ = C.AFF_SEQ
               AND B.DTL_SEQ = C.DTL_SEQ
               AND A.BRCH_ID =  #{S_BRCH_ID, jdbcType=VARCHAR}
               AND A.AFF_SEQ = #{S_AFF_SEQ, jdbcType=VARCHAR}
             ORDER BY C.BRCH_ID, C.AFF_SEQ, C.DTL_SEQ, C.ACP_DT, C.BND_NM


    </select>    
    

  <!-- 사건 진행(내외근)  조회 -->
    <!-- 
    <select id="selectAffairPrsInfo" parameterType="map" resultType ="map">
            SELECT /* 사건 디테일 */
                   'N' AS FLAG,
                   ROWIDTOCHAR(B.ROWID) AS ROW_ID,
                   '0' AS CHK,
                    #{OPERATOR, jdbcType=VARCHAR} AS OPERATOR,
                    C.BRCH_ID, 
                    C.AFF_SEQ, 
                    C.DTL_SEQ,
                    C.GBN,
                    C.ACP_DT,
                    C.BND_NM,
                    C.NOTE_1,
                    C.NOTE_2
              FROM TB_AC_AFFAIR_MST A, TB_AC_AFFAIR_DTL B, TB_CC_TIEUP_LST D,
                   (SELECT /*내근*/
                           '내근' AS GBN,
                           BRCH_ID,
                           AFF_SEQ,
                           DTL_SEQ,
                           TO_CHAR(ACP_DT,'YYYYMMDD') AS ACP_DT,
                           BND_NM,
                           NVL(FC_CC_GET_CODENAME('AC09',ACP_MTD),' ') AS NOTE_1,
                           NVL(FC_CC_GET_CODENAME('AD04',PRS_STS),' ') AS NOTE_2       
                      FROM TB_AC_AFFAIRPRS_LST
                    UNION ALL
                    SELECT /*외근*/
                           '외근' AS GBN,
                            BRCH_ID,
                           AFF_SEQ,
                           DTL_SEQ,
                           TO_CHAR(ACP_DT,'YYYYMMDD') AS ACP_DT,
                           BND_NM,
                           OUT_CHG_USR NOTE_1,
                           PRS_NOTE AS NOTE_2       
                      FROM TB_AC_AFFAIROUT_LST
                   ) C
             WHERE A.BRCH_ID = B.BRCH_ID
               AND A.BRCH_ID = C.BRCH_ID
               AND A.BRCH_ID = D.BRCH_ID
               AND A.AFF_SEQ = B.AFF_SEQ
               AND A.AFF_SEQ = C.AFF_SEQ
               AND B.DTL_SEQ = C.DTL_SEQ
               AND A.TUB_SEQ = D.TUB_SEQ
               AND A.BRCH_ID =  #{S_BRCH_ID, jdbcType=VARCHAR}
               AND A.TUB_SEQ like  #{TUb_SEQ, jdbcType=VARCHAR} || '%'
               AND (A.TUB_NM LIKE '%' || #{S_TUB_NM, jdbcType=VARCHAR} || '%' 
                    OR A.CHG_NM LIKE '%' || #{S_TUB_NM, jdbcType=VARCHAR} || '%' 
                    OR A.CLT_NM LIKE '%' || #{S_TUB_NM, jdbcType=VARCHAR} || '%'
                    OR A.CLT_JMN LIKE '%' || #{S_TUB_NM, jdbcType=VARCHAR} || '%'
                    OR A.CLT_TEL LIKE '%' || #{S_TUB_NM, jdbcType=VARCHAR} || '%'
                    OR A.HNA_CHG_USR_NM LIKE '%' || #{S_TUB_NM, jdbcType=VARCHAR} || '%'
                    OR A.TUB_TEL LIKE '%' || #{S_TUB_NM, jdbcType=VARCHAR} || '%'
                    OR A.TUB_FAX LIKE '%' || #{S_TUB_NM, jdbcType=VARCHAR} || '%'
                    OR D.RLT_NM LIKE '%' || #{S_TUB_NM, jdbcType=VARCHAR} || '%'    
                    OR A.AFF_SEQ LIKE #{S_TUB_NM, jdbcType=VARCHAR} || '%'               
                   )
               AND A.AFF_ST_DT BETWEEN TO_DATE(NVL(#{S_ST_DT, jdbcType=VARCHAR},'19000101')) AND TO_DATE(NVL(#{S_ED_DT, jdbcType=VARCHAR},'29991231')) + 0.99999
               AND A.AFF_PRS_STS LIKE  #{S_AFF_PRS_STS, jdbcType=VARCHAR} || '%'
             ORDER BY C.BRCH_ID, C.AFF_SEQ, C.DTL_SEQ, C.GBN, C.ACP_DT, C.BND_NM


    </select>   
     --> 


  <!-- 사건입금내역  조회 -->
    <select id="selecBondPayOne" parameterType="map" resultType ="map">
            SELECT /* 사건입금내역 */
                    B.BRCH_ID, 
                    B.BND_SEQ,
                    B.BND_NM,
                    TO_CHAR(B.PAY_DT,'YYYYMMDD') AS PAY_DT,
                    NVL(B.PAY_AMT,'-99999') AS PAY_AMT
              FROM TB_AC_AFFAIRCHRG_LST B                   
             WHERE B.BRCH_ID =  #{S_BRCH_ID, jdbcType=VARCHAR}
               AND B.AFF_SEQ = #{S_AFF_SEQ, jdbcType=VARCHAR}
             ORDER BY B.PAY_DT DESC


    </select>  

  <!-- 사건입금내역  조회 -->
    <!-- 
    <select id="selecTieupPay" parameterType="map" resultType ="map">
            SELECT /* 사건입금내역 */
                    C.BRCH_ID, 
                    C.TUB_SEQ,
                    D.TUB_NM,
                    TO_CHAR(PAY_DT,'YYYYMMDD') AS PAY_DT,
                    NVL(PAY_AMT,'-99999') AS PAY_AMT
              FROM TB_AC_AFFAIR_MST A, TB_AC_TIEUPPAY_LST C, TB_CC_TIEUP_LST D
             WHERE A.BRCH_ID = C.BRCH_ID
               AND A.BRCH_ID = D.BRCH_ID
               AND A.TUB_SEQ = C.TUB_SEQ
               AND A.TUB_SEQ = D.TUB_SEQ
               AND C.SIN_GBN = '30'
               AND A.BRCH_ID =  #{S_BRCH_ID, jdbcType=VARCHAR}
               AND A.TUB_SEQ like  #{TUb_SEQ, jdbcType=VARCHAR} || '%'
               AND (A.TUB_NM LIKE '%' || #{S_TUB_NM, jdbcType=VARCHAR} || '%' 
                    OR A.CHG_NM LIKE '%' || #{S_TUB_NM, jdbcType=VARCHAR} || '%' 
                    OR A.CLT_NM LIKE '%' || #{S_TUB_NM, jdbcType=VARCHAR} || '%'
                    OR A.CLT_JMN LIKE '%' || #{S_TUB_NM, jdbcType=VARCHAR} || '%'
                    OR A.CLT_TEL LIKE '%' || #{S_TUB_NM, jdbcType=VARCHAR} || '%'
                    OR A.HNA_CHG_USR_NM LIKE '%' || #{S_TUB_NM, jdbcType=VARCHAR} || '%'
                    OR A.TUB_TEL LIKE '%' || #{S_TUB_NM, jdbcType=VARCHAR} || '%'
                    OR A.TUB_FAX LIKE '%' || #{S_TUB_NM, jdbcType=VARCHAR} || '%'
                    OR D.RLT_NM LIKE '%' || #{S_TUB_NM, jdbcType=VARCHAR} || '%'    
                    OR A.AFF_SEQ LIKE #{S_TUB_NM, jdbcType=VARCHAR} || '%'               
                   )
               AND A.AFF_ST_DT BETWEEN TO_DATE(NVL(#{S_ST_DT, jdbcType=VARCHAR},'19000101')) AND TO_DATE(NVL(#{S_ED_DT, jdbcType=VARCHAR},'29991231')) + 0.99999
               AND A.AFF_PRS_STS LIKE  #{S_AFF_PRS_STS, jdbcType=VARCHAR} || '%'
             GROUP BY C.BRCH_ID, 
                    C.TUB_SEQ,
                    D.TUB_NM,
                    TO_CHAR(PAY_DT,'YYYYMMDD'),
                    NVL(PAY_AMT,'-99999')  
             ORDER BY C.BRCH_ID, PAY_DT DESC


    </select>  
     -->
    
   <!-- 발급예정건 조회 -->
    <select id="selectAffairExpLst" parameterType="map" resultType ="map">
        SELECT /* 발급예정건 조회 */
                NVL(A.BRCH_ID,' ') AS  BRCH_ID,
                NVL(A.AFF_SEQ,'-99999') AS  AFF_SEQ,
                NVL(A.TUB_NM,' ') AS  TUB_NM,
                NVL(A.CHG_NM,' ')  CHG_NM,        
                TO_CHAR(A.AFF_ST_DT,'YYYY-MM-DD') ||' ~ ' || TO_CHAR(NVL(A.AFF_ETC_ED_DT, A.AFF_ED_DT),'YYYY-MM-DD') AS AFF_DT ,
                NVL(A.CLT_NM,' ') AS  CLT_NM,
                NVL(A.CLT_JMN,' ') AS  CLT_JMN,
                NVL(C.ASK_AMT,'-99999') AS ASK_AMT
          FROM TB_AC_AFFAIR_MST A, TB_AC_AFFAIR_DTL B,
               (SELECT BRCH_ID,
                       AFF_SEQ,   
                       NVL(SUM(BNK_CHRG),0) + NVL(SUM(AGC_CHRG),0) AS ASK_AMT
                  FROM TB_AC_AFFAIR_DTL                 
                 GROUP BY BRCH_ID, AFF_SEQ
               ) C
         WHERE A.BRCH_ID = B.BRCH_ID
           AND A.BRCH_ID = C.BRCH_ID
           AND A.AFF_SEQ = B.AFF_SEQ
           AND A.AFF_SEQ = C.AFF_SEQ 
           AND (NVL(B.REQ_BND_STS,' ') = '380' OR NVL(B.PRS_STS_1,' ') = '380' OR NVL(B.PRS_STS_2,' ') = '380')
           AND A.BRCH_ID =  #{S_BRCH_ID, jdbcType=VARCHAR}
           AND A.HNA_CHG_USR_NM LIKE  #{S_CHG_USR_NM, jdbcType=VARCHAR} || '%'
           AND (A.TUB_NM LIKE '%' || #{S_CLT_NM, jdbcType=VARCHAR} || '%' 
                OR A.CHG_NM LIKE '%' || #{S_CLT_NM, jdbcType=VARCHAR} || '%' 
                OR A.CLT_NM LIKE '%' || #{S_CLT_NM, jdbcType=VARCHAR} || '%'
                OR A.CLT_JMN LIKE '%' || #{S_CLT_NM, jdbcType=VARCHAR} || '%'
                OR A.TUB_TEL LIKE '%' || #{S_CLT_NM, jdbcType=VARCHAR} || '%'
                OR A.TUB_FAX LIKE '%' || #{S_CLT_NM, jdbcType=VARCHAR} || '%'
               )
         ORDER BY A.AFF_SEQ DESC

    </select>    


   <!-- 수수료일계표 조회 N -->
    <select id="selectAffChrgNotLst" parameterType="map" resultType ="map">
        SELECT 'N' AS FLAG,
                ' ' AS ROW_ID,
                '0' AS CHK,
                #{OPERATOR, jdbcType=VARCHAR} AS OPERATOR,
               NVL(A.BRCH_ID, ' ') AS BRCH_ID,
               NVL(A.AFF_SEQ, '-99999') AS AFF_SEQ,
               ' ' AS PAY_DT,
               NVL(A.CLT_NM, ' ') AS CLT_NM,
               NVL(A.CLT_JMN, ' ') AS CLT_JMN,
               NVL(B.PRS_STEP,'-99999') AS PRS_STEP,
               NVL(FC_CC_GET_CODENAME('AD03',B.BND_STS),' ') AS BND_STS_NM,
               NVL(C.BND_SEQ, '-99999') AS BND_SEQ,
               NVL(C.BND_NM, ' ') AS BND_NM,
               NVL(C.CHRG_AMT, '-99999') AS PAY_AMT,
               NVL(A.AFF_PRS_STS,' ') AS AFF_PRS_STS,
               '등록' AS BTN               
          FROM TB_AC_AFFAIR_MST A, 
          (SELECT BRCH_ID,
                   AFF_SEQ,
                   B.SEQ AS PRS_STEP,
                CASE 
                     WHEN B.SEQ = 1 THEN NVL(BND_SEQ_1, REQ_BND_SEQ)
                     WHEN B.SEQ = 2 THEN BND_SEQ_2 
                END AS BND_SEQ,
                CASE 
                     WHEN B.SEQ = 1 THEN NVL(BND_NM_1, REQ_BND_NM)
                     WHEN B.SEQ = 2 THEN BND_NM_2 
                END AS BND_NM,                   
                CASE 
                     WHEN B.SEQ = 1 THEN (CASE WHEN BND_SEQ_1 IS NULL THEN REQ_BND_STS ELSE PRS_STS_1 END)   --  진행1의 채권사가 없어야 의뢰채권사 상태이다
                     WHEN B.SEQ = 2 THEN PRS_STS_2 
                END AS BND_STS
             FROM TB_AC_AFFAIR_DTL A, COPYT B
            WHERE B.SEQ BETWEEN 1 AND 2   
          ) B, TB_CC_BOND_LST C
         WHERE A.BRCH_ID = B.BRCH_ID
           AND A.BRCH_ID = C.BRCH_ID
           AND A.AFF_SEQ = B.AFF_SEQ
           AND B.BND_SEQ = C.BND_SEQ
            AND ((A.AFF_PRS_STS = '10' AND B.BND_STS != '380') OR (A.AFF_PRS_STS IN ('20','25') AND B.BND_STS = '380') )  -- 사건진행이거나 발급예정
         AND NOT EXISTS (SELECT 1
                             FROM TB_AC_AFFAIRCHRG_LST
                            WHERE BRCH_ID = A.BRCH_ID
                              AND AFF_SEQ = A.AFF_SEQ
                              AND BND_SEQ = B.BND_SEQ
                          )
           AND A.BRCH_ID =  #{S_BRCH_ID, jdbcType=VARCHAR}
           AND (B.BND_NM LIKE  '%'|| #{S_BND_NM, jdbcType=VARCHAR} || '%' OR A.CLT_NM LIKE '%'|| #{S_BND_NM, jdbcType=VARCHAR} || '%')
         ORDER BY A.AFF_ST_DT DESC

    </select> 
    
   <!-- 수수료일계표 조회 Y -->
    <select id="selectAffChrgYesLst" parameterType="map" resultType ="map">
        SELECT 'N' AS FLAG,
                ROWIDTOCHAR(A.ROWID) AS ROW_ID,
                '0' AS CHK,
                #{OPERATOR, jdbcType=VARCHAR} AS OPERATOR,
               NVL(A.BRCH_ID, ' ') AS BRCH_ID,
               NVL(A.AFF_SEQ, '-99999') AS AFF_SEQ,
               NVL(TO_CHAR(A.PAY_DT,'YYYYMMDD'),' ') AS PAY_DT,
               NVL(A.CLT_NM, ' ') AS CLT_NM,
               NVL(A.PRS_STEP,'-99999') AS PRS_STEP,
               NVL(A.BND_SEQ, '-99999') AS BND_SEQ,
               NVL(A.BND_NM, ' ') AS BND_NM,
               NVL(A.PAY_AMT, '-99999') AS PAY_AMT,
               '취소' AS BTN           
          FROM TB_AC_AFFAIRCHRG_LST A
         WHERE A.BRCH_ID =  #{S_BRCH_ID, jdbcType=VARCHAR}
           AND (A.BND_NM LIKE '%' || #{S_BND_NM, jdbcType=VARCHAR} || '%' OR A.CLT_NM LIKE '%' || #{S_BND_NM, jdbcType=VARCHAR} || '%')
           AND A.PAY_DT BETWEEN  TO_DATE(NVL(#{S_ST_DT, jdbcType=VARCHAR},'19000101')) AND TO_DATE(NVL(#{S_ED_DT, jdbcType=VARCHAR},'29991231')) + 0.99999
         ORDER BY A.PAY_DT DESC, A.EDT_DT DESC

    </select>   

     <!-- 수수료일계표  추가/수정 -->
     <insert   id="saveAffairChrgLst" parameterType="map" >

        DECLARE
                V_BNK_CHRG NUMBER(10);
                V_CNT NUMBER(10);
        begin
                
            UPDATE TB_AC_AFFAIRCHRG_LST
               SET PAY_DT = #{PAY_DT, jdbcType=VARCHAR} , 
                   CLT_NM = #{CLT_NM, jdbcType=VARCHAR} , 
                   PRS_STEP = #{PRS_STEP, jdbcType=VARCHAR} , 
                   BND_NM = #{BND_NM, jdbcType=VARCHAR} , 
                   PAY_AMT = #{PAY_AMT, jdbcType=VARCHAR} , 
                   EDT_USR = #{OPERATOR, jdbcType=VARCHAR} , 
                   EDT_DT = SYSDATE 
             where BND_SEQ = #{BND_SEQ, jdbcType=VARCHAR}
               and BRCH_ID = #{BRCH_ID, jdbcType=VARCHAR}
               and AFF_SEQ = #{AFF_SEQ, jdbcType=VARCHAR};
                
                  if sql%rowcount=0 then
                  

                  INSERT INTO TB_AC_AFFAIRCHRG_LST
                          (
                           BRCH_ID , 
                           AFF_SEQ , 
                           BND_SEQ , 
                           PAY_DT , 
                           CLT_NM , 
                           PRS_STEP , 
                           BND_NM , 
                           PAY_AMT , 
                           CRT_USR , 
                           CRT_DT , 
                           EDT_USR , 
                           EDT_DT )
                   VALUES (
                           #{BRCH_ID, jdbcType=VARCHAR} , 
                           #{AFF_SEQ, jdbcType=VARCHAR} , 
                           #{BND_SEQ, jdbcType=VARCHAR} , 
                           #{PAY_DT, jdbcType=VARCHAR} , 
                           #{CLT_NM, jdbcType=VARCHAR} , 
                           #{PRS_STEP, jdbcType=VARCHAR} , 
                           #{BND_NM, jdbcType=VARCHAR} , 
                           #{PAY_AMT, jdbcType=VARCHAR} , 
                           #{OPERATOR, jdbcType=VARCHAR} , 
                           SYSDATE , 
                           #{OPERATOR, jdbcType=VARCHAR} , 
                           SYSDATE );

                     end if;
                     
            exception
                when others then
                    raise_application_error(-20501,'TB_AC_AFFAIRCHRG_LST save error : ' ||SQLERRM);
            end;
        
    </insert> 


   <!-- 수수료일계표 삭제 -->
    <delete   id="deleteAffairChrgLst" parameterType="map" >
        
        DELETE FROM TB_AC_AFFAIRCHRG_LST
         WHERE ROWID = chartorowid(#{ROW_ID, jdbcType=VARCHAR})             
         
    </delete>


   <!-- 수수료일계표 삭제 기존꺼 -->
    <delete   id="deleteAffairChrgLst_old" parameterType="map" >
         DECLARE
                V_CNT NUMBER(10);
 
          BEGIN
          
          
                -- 사건진행에서 해당사건이 서류등록 상태가 아니거나 상세에서 공란 또는 100 이 아니면 삭제 불가
                SELECT
                       COUNT(*)
                  INTO V_CNT
                  FROM TB_AC_AFFAIR_MST A, TB_AC_AFFAIR_DTL B, TB_AC_AFFAIRCHRG_LST C
                 WHERE A.BRCH_ID = B.BRCH_ID
                   AND A.BRCH_ID = C.BRCH_ID
                   AND A.AFF_SEQ = B.AFF_SEQ
                   AND A.AFF_SEQ = C.AFF_SEQ
                   AND (B.BND_SEQ_1 = DECODE(C.PRS_STEP,'1', C.BND_SEQ, B.BND_SEQ_1)
                        OR 
                        B.BND_SEQ_2 = DECODE(C.PRS_STEP,'2', C.BND_SEQ, B.BND_SEQ_2)
                       ) 
                   AND DECODE(C.PRS_STEP,'1', B.PRS_STS_1, '2', B.PRS_STS_2) != '380'  -- 발급예정은 무조건
                   AND ((A.AFF_PRS_STS != '10')  -- 서류등록상태가 아니거나 
                        OR 
                        (A.AFF_PRS_STS = '10' AND (NVL(DECODE(C.PRS_STEP,'1', B.PRS_STS_1, '2', B.PRS_STS_2), '100') != '100'))  -- 서류등록 상태이면서 진행이 된것들
                       )
                   AND C.ROWID = chartorowid(#{ROW_ID, jdbcType=VARCHAR}) ;
               
                IF V_CNT > 0 THEN
                    raise_application_error(-20599,'수수료 일계표 삭제가능한 상태가 아닙니다. 사건마감, 또는 채권사 진행이 있으면 삭제 불가능 합니다. ');
                ELSE
                    DELETE FROM TB_AC_AFFAIRCHRG_LST
                     WHERE ROWID = chartorowid(#{ROW_ID, jdbcType=VARCHAR}) ;              
                END IF;          
          
        exception
            when others then
                raise_application_error(-20501,'TB_AC_AFFAIRCHRG_LST DELETE error : ' ||SQLERRM);
        end;  
   
    </delete>


   <!-- 내근 접수방법 조회 -->
    <select id="selectBndAcpMtd" parameterType="map" resultType ="map">
        SELECT /* 내근접수방법 */
               NVL(ACP_MTD, ' ') AS ACP_MTD
          FROM TB_AC_AFFAIRPRS_LST
         WHERE BRCH_ID =  #{BRCH_ID, jdbcType=VARCHAR}
           AND AFF_SEQ =  #{AFF_SEQ, jdbcType=VARCHAR}
           AND DTL_SEQ =  #{DTL_SEQ, jdbcType=VARCHAR}
           AND BND_SEQ =  #{BND_SEQ, jdbcType=VARCHAR}
           AND ROWNUM = 1

    </select>   


   <!-- 입금요청 조회 -->
    <select id="selectChrgReqLst" parameterType="map" resultType ="map">
        SELECT 'N' AS FLAG,
                ROWIDTOCHAR(A.ROWID) AS ROW_ID,
                '0' AS CHK,
                #{OPERATOR, jdbcType=VARCHAR} AS OPERATOR,
               NVL(A.BRCH_ID, ' ') AS BRCH_ID,
               NVL(A.AFF_SEQ, '-99999') AS AFF_SEQ,
               NVL(TO_CHAR(A.REQ_DT,'YYYYMMDD'),' ') AS REQ_DT,
               NVL(A.CLT_NM, ' ') AS CLT_NM,
               NVL(A.CLT_JMN, ' ') AS CLT_JMN,
               NVL(A.BND_SEQ, '-99999') AS BND_SEQ,
               NVL(A.BND_NM, ' ') AS BND_NM,
               NVL(A.PRS_STEP,'-99999') AS PRS_STEP,
               NVL(A.REQ_AMT, '-99999') AS REQ_AMT,
               NVL(NVL(A.REQ_NOTE,C.ACC_NO),' ') AS REQ_NOTE, -- 없으면 채권사 기본정보의 계좌 
               decode(A.REQ_DOC_YN,'Y',1,0) AS REQ_DOC_YN
          FROM TB_AC_AFFAIRCHRG_REQ_LST A, TB_CC_BOND_LST C
         WHERE A.BRCH_ID = C.BRCH_ID(+)
           AND A.BND_SEQ = C.BND_SEQ(+)
           AND A.BRCH_ID =  #{S_BRCH_ID, jdbcType=VARCHAR}
           AND A.AFF_SEQ =  #{S_AFF_SEQ, jdbcType=VARCHAR}
           AND A.BND_SEQ =  #{S_BND_SEQ, jdbcType=VARCHAR}
           AND A.PRS_STEP =  #{S_PRS_STEP, jdbcType=VARCHAR}

    </select>   
 
 
    <!-- 입금요청의 입금유무 조회 -->
    <select id="chkChrgReqPrsSts" parameterType="map" resultType ="map">
        SELECT 'Y' AS REQ_PRS_STS,
               '입금완료' AS REQ_PRS_STS_NM   
          FROM TB_AC_AFFAIRCHRG_LST A
         WHERE A.BRCH_ID =  #{S_BRCH_ID, jdbcType=VARCHAR}
           AND A.AFF_SEQ =  #{S_AFF_SEQ, jdbcType=VARCHAR}
           AND A.BND_SEQ =  #{S_BND_SEQ, jdbcType=VARCHAR}

    </select>   
 
 
      <!-- 입금요청  추가/수정 -->
     <insert   id="saveChrgReqLst" parameterType="map" >

         DECLARE
                V_CNT NUMBER(10);
 
          BEGIN

                -- 이미 입금처리 되면 수정 불가 
                SELECT
                       COUNT(*)
                  INTO V_CNT
                  FROM TB_AC_AFFAIRCHRG_LST A, TB_AC_AFFAIRCHRG_REQ_LST B
                 WHERE A.BRCH_ID = B.BRCH_ID
                   AND A.AFF_SEQ = B.AFF_SEQ
                   AND A.BND_SEQ = B.BND_SEQ
                   AND B.ROWID = chartorowid(#{ROW_ID, jdbcType=VARCHAR}) ;
               
                IF V_CNT > 0 THEN
                    raise_application_error(-20599,'이미 입금처리 되어 추가/수정 불가능 합니다. 먼저 입금취소 하세요.');
                ELSE
            
                    UPDATE TB_AC_AFFAIRCHRG_REQ_LST
                       SET        REQ_DT = #{REQ_DT, jdbcType=VARCHAR} , 
                           CLT_NM = #{CLT_NM, jdbcType=VARCHAR} , 
                           CLT_JMN = #{CLT_JMN, jdbcType=VARCHAR} , 
                           PRS_STEP = #{PRS_STEP, jdbcType=VARCHAR} , 
                           BND_NM = #{BND_NM, jdbcType=VARCHAR} , 
                           REQ_AMT = #{REQ_AMT, jdbcType=VARCHAR} , 
                           REQ_NOTE = #{REQ_NOTE, jdbcType=VARCHAR} , 
                           REQ_DOC_YN = DECODE(#{REQ_DOC_YN, jdbcType=VARCHAR},'1','Y','N')  ,
                           REQ_STS = #{REQ_STS, jdbcType=VARCHAR} 
                                    
                     WHERE ROWID = chartorowid(#{ROW_ID, jdbcType=VARCHAR}) ; 
        
                          if sql%rowcount=0 then
                          
        
                            INSERT INTO TB_AC_AFFAIRCHRG_REQ_LST
                                    (
                                     BRCH_ID , 
                                     AFF_SEQ , 
                                     BND_SEQ , 
                                     REQ_DT , 
                                     CLT_NM , 
                                     CLT_JMN , 
                                     PRS_STEP , 
                                     BND_NM , 
                                     REQ_AMT , 
                                     REQ_NOTE , 
                                     REQ_DOC_YN , 
                                     REQ_STS , 
                                     CRT_USR , 
                                     CRT_DT , 
                                     EDT_USR , 
                                     EDT_DT )
                             VALUES (
                                     #{BRCH_ID, jdbcType=VARCHAR} , 
                                     #{AFF_SEQ, jdbcType=VARCHAR} , 
                                     #{BND_SEQ, jdbcType=VARCHAR} , 
                                     #{REQ_DT, jdbcType=VARCHAR} , 
                                     #{CLT_NM, jdbcType=VARCHAR} , 
                                     #{CLT_JMN, jdbcType=VARCHAR} , 
                                     #{PRS_STEP, jdbcType=VARCHAR} , 
                                     #{BND_NM, jdbcType=VARCHAR} , 
                                     #{REQ_AMT, jdbcType=VARCHAR} , 
                                     #{REQ_NOTE, jdbcType=VARCHAR} , 
                                     DECODE(#{REQ_DOC_YN, jdbcType=VARCHAR},'1','Y','N'), 
                                     #{REQ_STS, jdbcType=VARCHAR} , 
                                     #{OPERATOR, jdbcType=VARCHAR} , 
                                     SYSDATE , 
                                     #{OPERATOR, jdbcType=VARCHAR} , 
                                     SYSDATE );
        
                             end if;
                     
                END IF;             
            
            
            exception
                when others then
                    raise_application_error(-20501,'TB_AC_AFFAIRCHRG_REQ_LST save error : ' ||SQLERRM);
            end;
        
    </insert> 
    
    <!-- 입금요청 삭제 -->
    <delete   id="deleteChrgReqLst" parameterType="map" >
         DECLARE
                V_CNT NUMBER(10);
 
          BEGIN
          
          
                -- 이미 입금처리 되면 삭제 불가 
                SELECT
                       COUNT(*)
                  INTO V_CNT
                  FROM TB_AC_AFFAIRCHRG_LST A, TB_AC_AFFAIRCHRG_REQ_LST B
                 WHERE A.BRCH_ID = B.BRCH_ID
                   AND A.AFF_SEQ = B.AFF_SEQ
                   AND A.BND_SEQ = B.BND_SEQ
                   AND B.ROWID = chartorowid(#{ROW_ID, jdbcType=VARCHAR}) ;
               
                IF V_CNT > 0 THEN
                    raise_application_error(-20599,'이미 입금처리 되어 입금요청 취소 불가능 합니다. 먼저 입금취소 하세요.');
                ELSE
                    DELETE FROM TB_AC_AFFAIRCHRG_REQ_LST
                     WHERE ROWID = chartorowid(#{ROW_ID, jdbcType=VARCHAR}) ;              
                END IF;          
          
        exception
            when others then
                raise_application_error(-20501,'TB_AC_AFFAIRCHRG_REQ_LST DELETE error : ' ||SQLERRM);
        end;  
   
    </delete>  
    
    <!-- 입금요청 카운트 조회 -->
    <select id="countChrgReqLst" parameterType="map" resultType ="map">
        SELECT COUNT(*) AS REQ_CNT,
               '입금요청:' || COUNT(*) || '건' AS REQ_CNT_MSG
          FROM TB_AC_AFFAIRCHRG_REQ_LST A
         WHERE A.BRCH_ID =  #{S_BRCH_ID, jdbcType=VARCHAR}
           AND NOT EXISTS (SELECT 1
                             FROM TB_AC_AFFAIRCHRG_LST
                            WHERE BRCH_ID = A.BRCH_ID
                              AND AFF_SEQ = A.AFF_SEQ
                              AND BND_SEQ = A.BND_SEQ
                          )

    </select>   

    <!-- 입금요청 미처리건 조회 -->
    <select id="selectAffairChrgReqLst" parameterType="map" resultType ="map">
        SELECT 'N' AS FLAG,
                ROWIDTOCHAR(A.ROWID) AS ROW_ID,
                '0' AS CHK,
                #{OPERATOR, jdbcType=VARCHAR} AS OPERATOR,
               NVL(A.BRCH_ID, ' ') AS BRCH_ID,
               NVL(A.AFF_SEQ, '-99999') AS AFF_SEQ,
               NVL(TO_CHAR(A.REQ_DT,'YYYYMMDD'), ' ') AS PAY_DT,
               NVL(A.CLT_NM, ' ') AS CLT_NM,
               NVL(A.CLT_JMN, ' ') AS CLT_JMN,
               NVL(A.PRS_STEP, '-99999') AS PRS_STEP,
               NVL(A.BND_SEQ, '-99999') AS BND_SEQ,
               NVL(A.BND_NM, ' ') AS BND_NM,
               NVL(A.REQ_AMT, '-99999') AS PAY_AMT,
               NVL(A.REQ_NOTE, ' ') AS REQ_NOTE,
               decode(A.REQ_DOC_YN,'Y',1,0) AS REQ_DOC_YN,
               FC_CC_GET_USRNAME(A.BRCH_ID, A.CRT_USR) AS REQ_USR_NM,
               '입금' AS ADD_BTN,
               '삭제' AS DEL_BTN           
          FROM TB_AC_AFFAIRCHRG_REQ_LST A
         WHERE A.BRCH_ID =  #{S_BRCH_ID, jdbcType=VARCHAR}
           AND NOT EXISTS (SELECT 1
                             FROM TB_AC_AFFAIRCHRG_LST
                            WHERE BRCH_ID = A.BRCH_ID
                              AND AFF_SEQ = A.AFF_SEQ
                              AND BND_SEQ = A.BND_SEQ
                          )
              ORDER BY A.REQ_DT DESC

    </select>       


     <!-- 입금요청용 수수료 일계표 저장  -->
     <insert   id="saveAffairChrgReqLst" parameterType="map" >
        begin
                
                  INSERT INTO TB_AC_AFFAIRCHRG_LST
                          (
                           BRCH_ID , 
                           AFF_SEQ , 
                           BND_SEQ , 
                           PAY_DT , 
                           CLT_NM , 
                           PRS_STEP , 
                           BND_NM , 
                           PAY_AMT , 
                           CRT_USR , 
                           CRT_DT , 
                           EDT_USR , 
                           EDT_DT )
                   VALUES (
                           #{BRCH_ID, jdbcType=VARCHAR} , 
                           #{AFF_SEQ, jdbcType=VARCHAR} , 
                           #{BND_SEQ, jdbcType=VARCHAR} , 
                           #{PAY_DT, jdbcType=VARCHAR} , 
                           #{CLT_NM, jdbcType=VARCHAR} , 
                           #{PRS_STEP, jdbcType=VARCHAR} , 
                           #{BND_NM, jdbcType=VARCHAR} , 
                           #{PAY_AMT, jdbcType=VARCHAR} , 
                           #{OPERATOR, jdbcType=VARCHAR} , 
                           SYSDATE , 
                           #{OPERATOR, jdbcType=VARCHAR} , 
                           SYSDATE );
                           
                           
                   -- 입금완료시 내외근 진행에도 입금완료(505) 코드 등록 
                   UPDATE TB_AC_AFFAIRPRS_LST
                      SET PRS_STS = '505',
                          EDT_USR = #{OPERATOR, jdbcType=VARCHAR} , 
                          EDT_DT = SYSDATE 
                    where BND_SEQ = #{BND_SEQ, jdbcType=VARCHAR}
                      and BRCH_ID = #{BRCH_ID, jdbcType=VARCHAR}
                      and AFF_SEQ = #{AFF_SEQ , jdbcType=VARCHAR};     
  
                     UPDATE TB_AC_AFFAIROUT_LST
                      SET PRS_STS = '505',
                          EDT_USR = #{OPERATOR, jdbcType=VARCHAR} , 
                          EDT_DT = SYSDATE 
                    where BND_SEQ = #{BND_SEQ, jdbcType=VARCHAR}
                      and BRCH_ID = #{BRCH_ID, jdbcType=VARCHAR}
                      and AFF_SEQ = #{AFF_SEQ , jdbcType=VARCHAR};                       
                              


            exception
                when others then
                    raise_application_error(-20501,'TB_AC_AFFAIRCHRG_LST save error : ' ||SQLERRM);
            end;
        
    </insert> 

   <!-- 바코드 채번 -->
    <select id="selectBarCode" parameterType="map" resultType ="map">
       SELECT /* 바코드 채번 */
              SQ_AC_BARCODE_LST.NEXTVAL AS BAR_CODE
         FROM DUAL              
    </select>

              
</mapper>